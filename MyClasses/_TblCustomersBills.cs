
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblCustomersBills : SqlClientEntity
	{
		public _TblCustomersBills()
		{
			this.QuerySource = "TblCustomersBills";
			this.MappingName = "TblCustomersBills";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblCustomersBillsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Bill_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Bill_ID, Bill_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblCustomersBillsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Bill_ID
			{
				get
				{
					return new SqlParameter("@Bill_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Customer_Id
			{
				get
				{
					return new SqlParameter("@Customer_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bill_Details
			{
				get
				{
					return new SqlParameter("@Bill_Details", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_Date
			{
				get
				{
					return new SqlParameter("@Bill_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Bill_Time
			{
				get
				{
					return new SqlParameter("@Bill_Time", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_Type
			{
				get
				{
					return new SqlParameter("@Bill_Type", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_Discount
			{
				get
				{
					return new SqlParameter("@Bill_Discount", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_DiscountMoney
			{
				get
				{
					return new SqlParameter("@Bill_DiscountMoney", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bill_DiscountType
			{
				get
				{
					return new SqlParameter("@Bill_DiscountType", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_CustomerName
			{
				get
				{
					return new SqlParameter("@Bill_CustomerName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_CustomerPhone
			{
				get
				{
					return new SqlParameter("@Bill_CustomerPhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pay_Cash
			{
				get
				{
					return new SqlParameter("@Pay_Cash", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Pay_Bank
			{
				get
				{
					return new SqlParameter("@Pay_Bank", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bill_Vat
			{
				get
				{
					return new SqlParameter("@Bill_Vat", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bill_Vat_Value
			{
				get
				{
					return new SqlParameter("@Bill_Vat_Value", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Pay_Bank_Type
			{
				get
				{
					return new SqlParameter("@Pay_Bank_Type", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pay_Bank_Fees
			{
				get
				{
					return new SqlParameter("@Pay_Bank_Fees", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Bill_QrCode
			{
				get
				{
					return new SqlParameter("@Bill_QrCode", SqlDbType.Image, 2147483647);
				}
			}
			
			public static SqlParameter Customer_Pay
			{
				get
				{
					return new SqlParameter("@Customer_Pay", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_Rest
			{
				get
				{
					return new SqlParameter("@Customer_Rest", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_VatNumber
			{
				get
				{
					return new SqlParameter("@Bill_VatNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Back_Refrence
			{
				get
				{
					return new SqlParameter("@Back_Refrence", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bill_Notes
			{
				get
				{
					return new SqlParameter("@Bill_Notes", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Bill_ID = "Bill_ID";
            public const string Customer_Id = "Customer_Id";
            public const string User_Id = "User_Id";
            public const string Bill_Details = "Bill_Details";
            public const string Bill_Date = "Bill_Date";
            public const string Bill_Time = "Bill_Time";
            public const string Bill_Type = "Bill_Type";
            public const string Bill_Discount = "Bill_Discount";
            public const string Bill_DiscountMoney = "Bill_DiscountMoney";
            public const string Bill_DiscountType = "Bill_DiscountType";
            public const string Bill_CustomerName = "Bill_CustomerName";
            public const string Bill_CustomerPhone = "Bill_CustomerPhone";
            public const string Pay_Cash = "Pay_Cash";
            public const string Pay_Bank = "Pay_Bank";
            public const string Bill_Vat = "Bill_Vat";
            public const string Bill_Vat_Value = "Bill_Vat_Value";
            public const string Pay_Bank_Type = "Pay_Bank_Type";
            public const string Pay_Bank_Fees = "Pay_Bank_Fees";
            public const string Bill_QrCode = "Bill_QrCode";
            public const string Customer_Pay = "Customer_Pay";
            public const string Customer_Rest = "Customer_Rest";
            public const string Bill_VatNumber = "Bill_VatNumber";
            public const string Back_Refrence = "Back_Refrence";
            public const string Bill_Notes = "Bill_Notes";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Bill_ID] = _TblCustomersBills.PropertyNames.Bill_ID;
					ht[Customer_Id] = _TblCustomersBills.PropertyNames.Customer_Id;
					ht[User_Id] = _TblCustomersBills.PropertyNames.User_Id;
					ht[Bill_Details] = _TblCustomersBills.PropertyNames.Bill_Details;
					ht[Bill_Date] = _TblCustomersBills.PropertyNames.Bill_Date;
					ht[Bill_Time] = _TblCustomersBills.PropertyNames.Bill_Time;
					ht[Bill_Type] = _TblCustomersBills.PropertyNames.Bill_Type;
					ht[Bill_Discount] = _TblCustomersBills.PropertyNames.Bill_Discount;
					ht[Bill_DiscountMoney] = _TblCustomersBills.PropertyNames.Bill_DiscountMoney;
					ht[Bill_DiscountType] = _TblCustomersBills.PropertyNames.Bill_DiscountType;
					ht[Bill_CustomerName] = _TblCustomersBills.PropertyNames.Bill_CustomerName;
					ht[Bill_CustomerPhone] = _TblCustomersBills.PropertyNames.Bill_CustomerPhone;
					ht[Pay_Cash] = _TblCustomersBills.PropertyNames.Pay_Cash;
					ht[Pay_Bank] = _TblCustomersBills.PropertyNames.Pay_Bank;
					ht[Bill_Vat] = _TblCustomersBills.PropertyNames.Bill_Vat;
					ht[Bill_Vat_Value] = _TblCustomersBills.PropertyNames.Bill_Vat_Value;
					ht[Pay_Bank_Type] = _TblCustomersBills.PropertyNames.Pay_Bank_Type;
					ht[Pay_Bank_Fees] = _TblCustomersBills.PropertyNames.Pay_Bank_Fees;
					ht[Bill_QrCode] = _TblCustomersBills.PropertyNames.Bill_QrCode;
					ht[Customer_Pay] = _TblCustomersBills.PropertyNames.Customer_Pay;
					ht[Customer_Rest] = _TblCustomersBills.PropertyNames.Customer_Rest;
					ht[Bill_VatNumber] = _TblCustomersBills.PropertyNames.Bill_VatNumber;
					ht[Back_Refrence] = _TblCustomersBills.PropertyNames.Back_Refrence;
					ht[Bill_Notes] = _TblCustomersBills.PropertyNames.Bill_Notes;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Bill_ID = "Bill_ID";
            public const string Customer_Id = "Customer_Id";
            public const string User_Id = "User_Id";
            public const string Bill_Details = "Bill_Details";
            public const string Bill_Date = "Bill_Date";
            public const string Bill_Time = "Bill_Time";
            public const string Bill_Type = "Bill_Type";
            public const string Bill_Discount = "Bill_Discount";
            public const string Bill_DiscountMoney = "Bill_DiscountMoney";
            public const string Bill_DiscountType = "Bill_DiscountType";
            public const string Bill_CustomerName = "Bill_CustomerName";
            public const string Bill_CustomerPhone = "Bill_CustomerPhone";
            public const string Pay_Cash = "Pay_Cash";
            public const string Pay_Bank = "Pay_Bank";
            public const string Bill_Vat = "Bill_Vat";
            public const string Bill_Vat_Value = "Bill_Vat_Value";
            public const string Pay_Bank_Type = "Pay_Bank_Type";
            public const string Pay_Bank_Fees = "Pay_Bank_Fees";
            public const string Bill_QrCode = "Bill_QrCode";
            public const string Customer_Pay = "Customer_Pay";
            public const string Customer_Rest = "Customer_Rest";
            public const string Bill_VatNumber = "Bill_VatNumber";
            public const string Back_Refrence = "Back_Refrence";
            public const string Bill_Notes = "Bill_Notes";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Bill_ID] = _TblCustomersBills.ColumnNames.Bill_ID;
					ht[Customer_Id] = _TblCustomersBills.ColumnNames.Customer_Id;
					ht[User_Id] = _TblCustomersBills.ColumnNames.User_Id;
					ht[Bill_Details] = _TblCustomersBills.ColumnNames.Bill_Details;
					ht[Bill_Date] = _TblCustomersBills.ColumnNames.Bill_Date;
					ht[Bill_Time] = _TblCustomersBills.ColumnNames.Bill_Time;
					ht[Bill_Type] = _TblCustomersBills.ColumnNames.Bill_Type;
					ht[Bill_Discount] = _TblCustomersBills.ColumnNames.Bill_Discount;
					ht[Bill_DiscountMoney] = _TblCustomersBills.ColumnNames.Bill_DiscountMoney;
					ht[Bill_DiscountType] = _TblCustomersBills.ColumnNames.Bill_DiscountType;
					ht[Bill_CustomerName] = _TblCustomersBills.ColumnNames.Bill_CustomerName;
					ht[Bill_CustomerPhone] = _TblCustomersBills.ColumnNames.Bill_CustomerPhone;
					ht[Pay_Cash] = _TblCustomersBills.ColumnNames.Pay_Cash;
					ht[Pay_Bank] = _TblCustomersBills.ColumnNames.Pay_Bank;
					ht[Bill_Vat] = _TblCustomersBills.ColumnNames.Bill_Vat;
					ht[Bill_Vat_Value] = _TblCustomersBills.ColumnNames.Bill_Vat_Value;
					ht[Pay_Bank_Type] = _TblCustomersBills.ColumnNames.Pay_Bank_Type;
					ht[Pay_Bank_Fees] = _TblCustomersBills.ColumnNames.Pay_Bank_Fees;
					ht[Bill_QrCode] = _TblCustomersBills.ColumnNames.Bill_QrCode;
					ht[Customer_Pay] = _TblCustomersBills.ColumnNames.Customer_Pay;
					ht[Customer_Rest] = _TblCustomersBills.ColumnNames.Customer_Rest;
					ht[Bill_VatNumber] = _TblCustomersBills.ColumnNames.Bill_VatNumber;
					ht[Back_Refrence] = _TblCustomersBills.ColumnNames.Back_Refrence;
					ht[Bill_Notes] = _TblCustomersBills.ColumnNames.Bill_Notes;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Bill_ID = "s_Bill_ID";
            public const string Customer_Id = "s_Customer_Id";
            public const string User_Id = "s_User_Id";
            public const string Bill_Details = "s_Bill_Details";
            public const string Bill_Date = "s_Bill_Date";
            public const string Bill_Time = "s_Bill_Time";
            public const string Bill_Type = "s_Bill_Type";
            public const string Bill_Discount = "s_Bill_Discount";
            public const string Bill_DiscountMoney = "s_Bill_DiscountMoney";
            public const string Bill_DiscountType = "s_Bill_DiscountType";
            public const string Bill_CustomerName = "s_Bill_CustomerName";
            public const string Bill_CustomerPhone = "s_Bill_CustomerPhone";
            public const string Pay_Cash = "s_Pay_Cash";
            public const string Pay_Bank = "s_Pay_Bank";
            public const string Bill_Vat = "s_Bill_Vat";
            public const string Bill_Vat_Value = "s_Bill_Vat_Value";
            public const string Pay_Bank_Type = "s_Pay_Bank_Type";
            public const string Pay_Bank_Fees = "s_Pay_Bank_Fees";
            public const string Customer_Pay = "s_Customer_Pay";
            public const string Customer_Rest = "s_Customer_Rest";
            public const string Bill_VatNumber = "s_Bill_VatNumber";
            public const string Back_Refrence = "s_Back_Refrence";
            public const string Bill_Notes = "s_Bill_Notes";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Bill_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Bill_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Bill_ID, value);
			}
		}

		public virtual int Customer_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Customer_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Customer_Id, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual string Bill_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_Details, value);
			}
		}

		public virtual DateTime Bill_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Bill_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Bill_Date, value);
			}
		}

		public virtual string Bill_Time
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_Time);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_Time, value);
			}
		}

		public virtual string Bill_Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_Type, value);
			}
		}

		public virtual string Bill_Discount
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_Discount);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_Discount, value);
			}
		}

		public virtual double Bill_DiscountMoney
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Bill_DiscountMoney);
			}
			set
	        {
				base.Setdouble(ColumnNames.Bill_DiscountMoney, value);
			}
		}

		public virtual string Bill_DiscountType
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_DiscountType);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_DiscountType, value);
			}
		}

		public virtual string Bill_CustomerName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_CustomerName);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_CustomerName, value);
			}
		}

		public virtual string Bill_CustomerPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_CustomerPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_CustomerPhone, value);
			}
		}

		public virtual double Pay_Cash
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Pay_Cash);
			}
			set
	        {
				base.Setdouble(ColumnNames.Pay_Cash, value);
			}
		}

		public virtual double Pay_Bank
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Pay_Bank);
			}
			set
	        {
				base.Setdouble(ColumnNames.Pay_Bank, value);
			}
		}

		public virtual double Bill_Vat
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Bill_Vat);
			}
			set
	        {
				base.Setdouble(ColumnNames.Bill_Vat, value);
			}
		}

		public virtual double Bill_Vat_Value
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Bill_Vat_Value);
			}
			set
	        {
				base.Setdouble(ColumnNames.Bill_Vat_Value, value);
			}
		}

		public virtual string Pay_Bank_Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pay_Bank_Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Pay_Bank_Type, value);
			}
		}

		public virtual double Pay_Bank_Fees
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Pay_Bank_Fees);
			}
			set
	        {
				base.Setdouble(ColumnNames.Pay_Bank_Fees, value);
			}
		}

		public virtual byte[] Bill_QrCode
	    {
			get
	        {
				return base.GetByteArray(ColumnNames.Bill_QrCode);
			}
			set
	        {
				base.SetByteArray(ColumnNames.Bill_QrCode, value);
			}
		}

		public virtual string Customer_Pay
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Pay);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Pay, value);
			}
		}

		public virtual string Customer_Rest
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Rest);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Rest, value);
			}
		}

		public virtual string Bill_VatNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_VatNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_VatNumber, value);
			}
		}

		public virtual string Back_Refrence
	    {
			get
	        {
				return base.Getstring(ColumnNames.Back_Refrence);
			}
			set
	        {
				base.Setstring(ColumnNames.Back_Refrence, value);
			}
		}

		public virtual string Bill_Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bill_Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Bill_Notes, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Bill_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_ID) ? string.Empty : base.GetintAsString(ColumnNames.Bill_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_ID);
				else
					this.Bill_ID = base.SetintAsString(ColumnNames.Bill_ID, value);
			}
		}

		public virtual string s_Customer_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Id) ? string.Empty : base.GetintAsString(ColumnNames.Customer_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Id);
				else
					this.Customer_Id = base.SetintAsString(ColumnNames.Customer_Id, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Bill_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Details);
				else
					this.Bill_Details = base.SetstringAsString(ColumnNames.Bill_Details, value);
			}
		}

		public virtual string s_Bill_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Bill_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Date);
				else
					this.Bill_Date = base.SetDateTimeAsString(ColumnNames.Bill_Date, value);
			}
		}

		public virtual string s_Bill_Time
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Time) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_Time);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Time);
				else
					this.Bill_Time = base.SetstringAsString(ColumnNames.Bill_Time, value);
			}
		}

		public virtual string s_Bill_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Type) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Type);
				else
					this.Bill_Type = base.SetstringAsString(ColumnNames.Bill_Type, value);
			}
		}

		public virtual string s_Bill_Discount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Discount) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_Discount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Discount);
				else
					this.Bill_Discount = base.SetstringAsString(ColumnNames.Bill_Discount, value);
			}
		}

		public virtual string s_Bill_DiscountMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_DiscountMoney) ? string.Empty : base.GetdoubleAsString(ColumnNames.Bill_DiscountMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_DiscountMoney);
				else
					this.Bill_DiscountMoney = base.SetdoubleAsString(ColumnNames.Bill_DiscountMoney, value);
			}
		}

		public virtual string s_Bill_DiscountType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_DiscountType) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_DiscountType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_DiscountType);
				else
					this.Bill_DiscountType = base.SetstringAsString(ColumnNames.Bill_DiscountType, value);
			}
		}

		public virtual string s_Bill_CustomerName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_CustomerName) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_CustomerName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_CustomerName);
				else
					this.Bill_CustomerName = base.SetstringAsString(ColumnNames.Bill_CustomerName, value);
			}
		}

		public virtual string s_Bill_CustomerPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_CustomerPhone) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_CustomerPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_CustomerPhone);
				else
					this.Bill_CustomerPhone = base.SetstringAsString(ColumnNames.Bill_CustomerPhone, value);
			}
		}

		public virtual string s_Pay_Cash
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Cash) ? string.Empty : base.GetdoubleAsString(ColumnNames.Pay_Cash);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Cash);
				else
					this.Pay_Cash = base.SetdoubleAsString(ColumnNames.Pay_Cash, value);
			}
		}

		public virtual string s_Pay_Bank
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Bank) ? string.Empty : base.GetdoubleAsString(ColumnNames.Pay_Bank);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Bank);
				else
					this.Pay_Bank = base.SetdoubleAsString(ColumnNames.Pay_Bank, value);
			}
		}

		public virtual string s_Bill_Vat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Vat) ? string.Empty : base.GetdoubleAsString(ColumnNames.Bill_Vat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Vat);
				else
					this.Bill_Vat = base.SetdoubleAsString(ColumnNames.Bill_Vat, value);
			}
		}

		public virtual string s_Bill_Vat_Value
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Vat_Value) ? string.Empty : base.GetdoubleAsString(ColumnNames.Bill_Vat_Value);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Vat_Value);
				else
					this.Bill_Vat_Value = base.SetdoubleAsString(ColumnNames.Bill_Vat_Value, value);
			}
		}

		public virtual string s_Pay_Bank_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Bank_Type) ? string.Empty : base.GetstringAsString(ColumnNames.Pay_Bank_Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Bank_Type);
				else
					this.Pay_Bank_Type = base.SetstringAsString(ColumnNames.Pay_Bank_Type, value);
			}
		}

		public virtual string s_Pay_Bank_Fees
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Bank_Fees) ? string.Empty : base.GetdoubleAsString(ColumnNames.Pay_Bank_Fees);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Bank_Fees);
				else
					this.Pay_Bank_Fees = base.SetdoubleAsString(ColumnNames.Pay_Bank_Fees, value);
			}
		}

		public virtual string s_Customer_Pay
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Pay) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Pay);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Pay);
				else
					this.Customer_Pay = base.SetstringAsString(ColumnNames.Customer_Pay, value);
			}
		}

		public virtual string s_Customer_Rest
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Rest) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Rest);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Rest);
				else
					this.Customer_Rest = base.SetstringAsString(ColumnNames.Customer_Rest, value);
			}
		}

		public virtual string s_Bill_VatNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_VatNumber) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_VatNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_VatNumber);
				else
					this.Bill_VatNumber = base.SetstringAsString(ColumnNames.Bill_VatNumber, value);
			}
		}

		public virtual string s_Back_Refrence
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Back_Refrence) ? string.Empty : base.GetstringAsString(ColumnNames.Back_Refrence);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Back_Refrence);
				else
					this.Back_Refrence = base.SetstringAsString(ColumnNames.Back_Refrence, value);
			}
		}

		public virtual string s_Bill_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Bill_Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Notes);
				else
					this.Bill_Notes = base.SetstringAsString(ColumnNames.Bill_Notes, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Bill_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_ID, Parameters.Bill_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Id, Parameters.Customer_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Details, Parameters.Bill_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Date, Parameters.Bill_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Time
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Time, Parameters.Bill_Time);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Type, Parameters.Bill_Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Discount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Discount, Parameters.Bill_Discount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_DiscountMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_DiscountMoney, Parameters.Bill_DiscountMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_DiscountType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_DiscountType, Parameters.Bill_DiscountType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_CustomerName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_CustomerName, Parameters.Bill_CustomerName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_CustomerPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_CustomerPhone, Parameters.Bill_CustomerPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Cash
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Cash, Parameters.Pay_Cash);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Bank
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Bank, Parameters.Pay_Bank);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Vat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Vat, Parameters.Bill_Vat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Vat_Value
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Vat_Value, Parameters.Bill_Vat_Value);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Bank_Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Bank_Type, Parameters.Pay_Bank_Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Bank_Fees
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Bank_Fees, Parameters.Pay_Bank_Fees);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_QrCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_QrCode, Parameters.Bill_QrCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Pay
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Pay, Parameters.Customer_Pay);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Rest
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Rest, Parameters.Customer_Rest);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_VatNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_VatNumber, Parameters.Bill_VatNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Back_Refrence
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Back_Refrence, Parameters.Back_Refrence);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Notes, Parameters.Bill_Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Bill_ID
		    {
				get
		        {
					if(_Bill_ID_W == null)
	        	    {
						_Bill_ID_W = TearOff.Bill_ID;
					}
					return _Bill_ID_W;
				}
			}

			public WhereParameter Customer_Id
		    {
				get
		        {
					if(_Customer_Id_W == null)
	        	    {
						_Customer_Id_W = TearOff.Customer_Id;
					}
					return _Customer_Id_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Bill_Details
		    {
				get
		        {
					if(_Bill_Details_W == null)
	        	    {
						_Bill_Details_W = TearOff.Bill_Details;
					}
					return _Bill_Details_W;
				}
			}

			public WhereParameter Bill_Date
		    {
				get
		        {
					if(_Bill_Date_W == null)
	        	    {
						_Bill_Date_W = TearOff.Bill_Date;
					}
					return _Bill_Date_W;
				}
			}

			public WhereParameter Bill_Time
		    {
				get
		        {
					if(_Bill_Time_W == null)
	        	    {
						_Bill_Time_W = TearOff.Bill_Time;
					}
					return _Bill_Time_W;
				}
			}

			public WhereParameter Bill_Type
		    {
				get
		        {
					if(_Bill_Type_W == null)
	        	    {
						_Bill_Type_W = TearOff.Bill_Type;
					}
					return _Bill_Type_W;
				}
			}

			public WhereParameter Bill_Discount
		    {
				get
		        {
					if(_Bill_Discount_W == null)
	        	    {
						_Bill_Discount_W = TearOff.Bill_Discount;
					}
					return _Bill_Discount_W;
				}
			}

			public WhereParameter Bill_DiscountMoney
		    {
				get
		        {
					if(_Bill_DiscountMoney_W == null)
	        	    {
						_Bill_DiscountMoney_W = TearOff.Bill_DiscountMoney;
					}
					return _Bill_DiscountMoney_W;
				}
			}

			public WhereParameter Bill_DiscountType
		    {
				get
		        {
					if(_Bill_DiscountType_W == null)
	        	    {
						_Bill_DiscountType_W = TearOff.Bill_DiscountType;
					}
					return _Bill_DiscountType_W;
				}
			}

			public WhereParameter Bill_CustomerName
		    {
				get
		        {
					if(_Bill_CustomerName_W == null)
	        	    {
						_Bill_CustomerName_W = TearOff.Bill_CustomerName;
					}
					return _Bill_CustomerName_W;
				}
			}

			public WhereParameter Bill_CustomerPhone
		    {
				get
		        {
					if(_Bill_CustomerPhone_W == null)
	        	    {
						_Bill_CustomerPhone_W = TearOff.Bill_CustomerPhone;
					}
					return _Bill_CustomerPhone_W;
				}
			}

			public WhereParameter Pay_Cash
		    {
				get
		        {
					if(_Pay_Cash_W == null)
	        	    {
						_Pay_Cash_W = TearOff.Pay_Cash;
					}
					return _Pay_Cash_W;
				}
			}

			public WhereParameter Pay_Bank
		    {
				get
		        {
					if(_Pay_Bank_W == null)
	        	    {
						_Pay_Bank_W = TearOff.Pay_Bank;
					}
					return _Pay_Bank_W;
				}
			}

			public WhereParameter Bill_Vat
		    {
				get
		        {
					if(_Bill_Vat_W == null)
	        	    {
						_Bill_Vat_W = TearOff.Bill_Vat;
					}
					return _Bill_Vat_W;
				}
			}

			public WhereParameter Bill_Vat_Value
		    {
				get
		        {
					if(_Bill_Vat_Value_W == null)
	        	    {
						_Bill_Vat_Value_W = TearOff.Bill_Vat_Value;
					}
					return _Bill_Vat_Value_W;
				}
			}

			public WhereParameter Pay_Bank_Type
		    {
				get
		        {
					if(_Pay_Bank_Type_W == null)
	        	    {
						_Pay_Bank_Type_W = TearOff.Pay_Bank_Type;
					}
					return _Pay_Bank_Type_W;
				}
			}

			public WhereParameter Pay_Bank_Fees
		    {
				get
		        {
					if(_Pay_Bank_Fees_W == null)
	        	    {
						_Pay_Bank_Fees_W = TearOff.Pay_Bank_Fees;
					}
					return _Pay_Bank_Fees_W;
				}
			}

			public WhereParameter Bill_QrCode
		    {
				get
		        {
					if(_Bill_QrCode_W == null)
	        	    {
						_Bill_QrCode_W = TearOff.Bill_QrCode;
					}
					return _Bill_QrCode_W;
				}
			}

			public WhereParameter Customer_Pay
		    {
				get
		        {
					if(_Customer_Pay_W == null)
	        	    {
						_Customer_Pay_W = TearOff.Customer_Pay;
					}
					return _Customer_Pay_W;
				}
			}

			public WhereParameter Customer_Rest
		    {
				get
		        {
					if(_Customer_Rest_W == null)
	        	    {
						_Customer_Rest_W = TearOff.Customer_Rest;
					}
					return _Customer_Rest_W;
				}
			}

			public WhereParameter Bill_VatNumber
		    {
				get
		        {
					if(_Bill_VatNumber_W == null)
	        	    {
						_Bill_VatNumber_W = TearOff.Bill_VatNumber;
					}
					return _Bill_VatNumber_W;
				}
			}

			public WhereParameter Back_Refrence
		    {
				get
		        {
					if(_Back_Refrence_W == null)
	        	    {
						_Back_Refrence_W = TearOff.Back_Refrence;
					}
					return _Back_Refrence_W;
				}
			}

			public WhereParameter Bill_Notes
		    {
				get
		        {
					if(_Bill_Notes_W == null)
	        	    {
						_Bill_Notes_W = TearOff.Bill_Notes;
					}
					return _Bill_Notes_W;
				}
			}

			private WhereParameter _Bill_ID_W = null;
			private WhereParameter _Customer_Id_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Bill_Details_W = null;
			private WhereParameter _Bill_Date_W = null;
			private WhereParameter _Bill_Time_W = null;
			private WhereParameter _Bill_Type_W = null;
			private WhereParameter _Bill_Discount_W = null;
			private WhereParameter _Bill_DiscountMoney_W = null;
			private WhereParameter _Bill_DiscountType_W = null;
			private WhereParameter _Bill_CustomerName_W = null;
			private WhereParameter _Bill_CustomerPhone_W = null;
			private WhereParameter _Pay_Cash_W = null;
			private WhereParameter _Pay_Bank_W = null;
			private WhereParameter _Bill_Vat_W = null;
			private WhereParameter _Bill_Vat_Value_W = null;
			private WhereParameter _Pay_Bank_Type_W = null;
			private WhereParameter _Pay_Bank_Fees_W = null;
			private WhereParameter _Bill_QrCode_W = null;
			private WhereParameter _Customer_Pay_W = null;
			private WhereParameter _Customer_Rest_W = null;
			private WhereParameter _Bill_VatNumber_W = null;
			private WhereParameter _Back_Refrence_W = null;
			private WhereParameter _Bill_Notes_W = null;

			public void WhereClauseReset()
			{
				_Bill_ID_W = null;
				_Customer_Id_W = null;
				_User_Id_W = null;
				_Bill_Details_W = null;
				_Bill_Date_W = null;
				_Bill_Time_W = null;
				_Bill_Type_W = null;
				_Bill_Discount_W = null;
				_Bill_DiscountMoney_W = null;
				_Bill_DiscountType_W = null;
				_Bill_CustomerName_W = null;
				_Bill_CustomerPhone_W = null;
				_Pay_Cash_W = null;
				_Pay_Bank_W = null;
				_Bill_Vat_W = null;
				_Bill_Vat_Value_W = null;
				_Pay_Bank_Type_W = null;
				_Pay_Bank_Fees_W = null;
				_Bill_QrCode_W = null;
				_Customer_Pay_W = null;
				_Customer_Rest_W = null;
				_Bill_VatNumber_W = null;
				_Back_Refrence_W = null;
				_Bill_Notes_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Bill_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_ID, Parameters.Bill_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Id, Parameters.Customer_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Details, Parameters.Bill_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Date, Parameters.Bill_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Time
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Time, Parameters.Bill_Time);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Type, Parameters.Bill_Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Discount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Discount, Parameters.Bill_Discount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_DiscountMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_DiscountMoney, Parameters.Bill_DiscountMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_DiscountType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_DiscountType, Parameters.Bill_DiscountType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_CustomerName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_CustomerName, Parameters.Bill_CustomerName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_CustomerPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_CustomerPhone, Parameters.Bill_CustomerPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Cash
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Cash, Parameters.Pay_Cash);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Bank
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Bank, Parameters.Pay_Bank);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Vat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Vat, Parameters.Bill_Vat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Vat_Value
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Vat_Value, Parameters.Bill_Vat_Value);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Bank_Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Bank_Type, Parameters.Pay_Bank_Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Bank_Fees
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Bank_Fees, Parameters.Pay_Bank_Fees);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_QrCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_QrCode, Parameters.Bill_QrCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Pay
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Pay, Parameters.Customer_Pay);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Rest
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Rest, Parameters.Customer_Rest);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_VatNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_VatNumber, Parameters.Bill_VatNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Back_Refrence
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Back_Refrence, Parameters.Back_Refrence);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Notes, Parameters.Bill_Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Bill_ID
		    {
				get
		        {
					if(_Bill_ID_W == null)
	        	    {
						_Bill_ID_W = TearOff.Bill_ID;
					}
					return _Bill_ID_W;
				}
			}

			public AggregateParameter Customer_Id
		    {
				get
		        {
					if(_Customer_Id_W == null)
	        	    {
						_Customer_Id_W = TearOff.Customer_Id;
					}
					return _Customer_Id_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Bill_Details
		    {
				get
		        {
					if(_Bill_Details_W == null)
	        	    {
						_Bill_Details_W = TearOff.Bill_Details;
					}
					return _Bill_Details_W;
				}
			}

			public AggregateParameter Bill_Date
		    {
				get
		        {
					if(_Bill_Date_W == null)
	        	    {
						_Bill_Date_W = TearOff.Bill_Date;
					}
					return _Bill_Date_W;
				}
			}

			public AggregateParameter Bill_Time
		    {
				get
		        {
					if(_Bill_Time_W == null)
	        	    {
						_Bill_Time_W = TearOff.Bill_Time;
					}
					return _Bill_Time_W;
				}
			}

			public AggregateParameter Bill_Type
		    {
				get
		        {
					if(_Bill_Type_W == null)
	        	    {
						_Bill_Type_W = TearOff.Bill_Type;
					}
					return _Bill_Type_W;
				}
			}

			public AggregateParameter Bill_Discount
		    {
				get
		        {
					if(_Bill_Discount_W == null)
	        	    {
						_Bill_Discount_W = TearOff.Bill_Discount;
					}
					return _Bill_Discount_W;
				}
			}

			public AggregateParameter Bill_DiscountMoney
		    {
				get
		        {
					if(_Bill_DiscountMoney_W == null)
	        	    {
						_Bill_DiscountMoney_W = TearOff.Bill_DiscountMoney;
					}
					return _Bill_DiscountMoney_W;
				}
			}

			public AggregateParameter Bill_DiscountType
		    {
				get
		        {
					if(_Bill_DiscountType_W == null)
	        	    {
						_Bill_DiscountType_W = TearOff.Bill_DiscountType;
					}
					return _Bill_DiscountType_W;
				}
			}

			public AggregateParameter Bill_CustomerName
		    {
				get
		        {
					if(_Bill_CustomerName_W == null)
	        	    {
						_Bill_CustomerName_W = TearOff.Bill_CustomerName;
					}
					return _Bill_CustomerName_W;
				}
			}

			public AggregateParameter Bill_CustomerPhone
		    {
				get
		        {
					if(_Bill_CustomerPhone_W == null)
	        	    {
						_Bill_CustomerPhone_W = TearOff.Bill_CustomerPhone;
					}
					return _Bill_CustomerPhone_W;
				}
			}

			public AggregateParameter Pay_Cash
		    {
				get
		        {
					if(_Pay_Cash_W == null)
	        	    {
						_Pay_Cash_W = TearOff.Pay_Cash;
					}
					return _Pay_Cash_W;
				}
			}

			public AggregateParameter Pay_Bank
		    {
				get
		        {
					if(_Pay_Bank_W == null)
	        	    {
						_Pay_Bank_W = TearOff.Pay_Bank;
					}
					return _Pay_Bank_W;
				}
			}

			public AggregateParameter Bill_Vat
		    {
				get
		        {
					if(_Bill_Vat_W == null)
	        	    {
						_Bill_Vat_W = TearOff.Bill_Vat;
					}
					return _Bill_Vat_W;
				}
			}

			public AggregateParameter Bill_Vat_Value
		    {
				get
		        {
					if(_Bill_Vat_Value_W == null)
	        	    {
						_Bill_Vat_Value_W = TearOff.Bill_Vat_Value;
					}
					return _Bill_Vat_Value_W;
				}
			}

			public AggregateParameter Pay_Bank_Type
		    {
				get
		        {
					if(_Pay_Bank_Type_W == null)
	        	    {
						_Pay_Bank_Type_W = TearOff.Pay_Bank_Type;
					}
					return _Pay_Bank_Type_W;
				}
			}

			public AggregateParameter Pay_Bank_Fees
		    {
				get
		        {
					if(_Pay_Bank_Fees_W == null)
	        	    {
						_Pay_Bank_Fees_W = TearOff.Pay_Bank_Fees;
					}
					return _Pay_Bank_Fees_W;
				}
			}

			public AggregateParameter Bill_QrCode
		    {
				get
		        {
					if(_Bill_QrCode_W == null)
	        	    {
						_Bill_QrCode_W = TearOff.Bill_QrCode;
					}
					return _Bill_QrCode_W;
				}
			}

			public AggregateParameter Customer_Pay
		    {
				get
		        {
					if(_Customer_Pay_W == null)
	        	    {
						_Customer_Pay_W = TearOff.Customer_Pay;
					}
					return _Customer_Pay_W;
				}
			}

			public AggregateParameter Customer_Rest
		    {
				get
		        {
					if(_Customer_Rest_W == null)
	        	    {
						_Customer_Rest_W = TearOff.Customer_Rest;
					}
					return _Customer_Rest_W;
				}
			}

			public AggregateParameter Bill_VatNumber
		    {
				get
		        {
					if(_Bill_VatNumber_W == null)
	        	    {
						_Bill_VatNumber_W = TearOff.Bill_VatNumber;
					}
					return _Bill_VatNumber_W;
				}
			}

			public AggregateParameter Back_Refrence
		    {
				get
		        {
					if(_Back_Refrence_W == null)
	        	    {
						_Back_Refrence_W = TearOff.Back_Refrence;
					}
					return _Back_Refrence_W;
				}
			}

			public AggregateParameter Bill_Notes
		    {
				get
		        {
					if(_Bill_Notes_W == null)
	        	    {
						_Bill_Notes_W = TearOff.Bill_Notes;
					}
					return _Bill_Notes_W;
				}
			}

			private AggregateParameter _Bill_ID_W = null;
			private AggregateParameter _Customer_Id_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Bill_Details_W = null;
			private AggregateParameter _Bill_Date_W = null;
			private AggregateParameter _Bill_Time_W = null;
			private AggregateParameter _Bill_Type_W = null;
			private AggregateParameter _Bill_Discount_W = null;
			private AggregateParameter _Bill_DiscountMoney_W = null;
			private AggregateParameter _Bill_DiscountType_W = null;
			private AggregateParameter _Bill_CustomerName_W = null;
			private AggregateParameter _Bill_CustomerPhone_W = null;
			private AggregateParameter _Pay_Cash_W = null;
			private AggregateParameter _Pay_Bank_W = null;
			private AggregateParameter _Bill_Vat_W = null;
			private AggregateParameter _Bill_Vat_Value_W = null;
			private AggregateParameter _Pay_Bank_Type_W = null;
			private AggregateParameter _Pay_Bank_Fees_W = null;
			private AggregateParameter _Bill_QrCode_W = null;
			private AggregateParameter _Customer_Pay_W = null;
			private AggregateParameter _Customer_Rest_W = null;
			private AggregateParameter _Bill_VatNumber_W = null;
			private AggregateParameter _Back_Refrence_W = null;
			private AggregateParameter _Bill_Notes_W = null;

			public void AggregateClauseReset()
			{
				_Bill_ID_W = null;
				_Customer_Id_W = null;
				_User_Id_W = null;
				_Bill_Details_W = null;
				_Bill_Date_W = null;
				_Bill_Time_W = null;
				_Bill_Type_W = null;
				_Bill_Discount_W = null;
				_Bill_DiscountMoney_W = null;
				_Bill_DiscountType_W = null;
				_Bill_CustomerName_W = null;
				_Bill_CustomerPhone_W = null;
				_Pay_Cash_W = null;
				_Pay_Bank_W = null;
				_Bill_Vat_W = null;
				_Bill_Vat_Value_W = null;
				_Pay_Bank_Type_W = null;
				_Pay_Bank_Fees_W = null;
				_Bill_QrCode_W = null;
				_Customer_Pay_W = null;
				_Customer_Rest_W = null;
				_Bill_VatNumber_W = null;
				_Back_Refrence_W = null;
				_Bill_Notes_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersBillsInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersBillsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersBillsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Bill_ID);
			p.SourceColumn = ColumnNames.Bill_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Bill_ID);
			p.SourceColumn = ColumnNames.Bill_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Id);
			p.SourceColumn = ColumnNames.Customer_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.User_Id);
			p.SourceColumn = ColumnNames.User_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Details);
			p.SourceColumn = ColumnNames.Bill_Details;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Date);
			p.SourceColumn = ColumnNames.Bill_Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Time);
			p.SourceColumn = ColumnNames.Bill_Time;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Type);
			p.SourceColumn = ColumnNames.Bill_Type;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Discount);
			p.SourceColumn = ColumnNames.Bill_Discount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_DiscountMoney);
			p.SourceColumn = ColumnNames.Bill_DiscountMoney;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_DiscountType);
			p.SourceColumn = ColumnNames.Bill_DiscountType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_CustomerName);
			p.SourceColumn = ColumnNames.Bill_CustomerName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_CustomerPhone);
			p.SourceColumn = ColumnNames.Bill_CustomerPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Cash);
			p.SourceColumn = ColumnNames.Pay_Cash;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Bank);
			p.SourceColumn = ColumnNames.Pay_Bank;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Vat);
			p.SourceColumn = ColumnNames.Bill_Vat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Vat_Value);
			p.SourceColumn = ColumnNames.Bill_Vat_Value;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Bank_Type);
			p.SourceColumn = ColumnNames.Pay_Bank_Type;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Bank_Fees);
			p.SourceColumn = ColumnNames.Pay_Bank_Fees;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_QrCode);
			p.SourceColumn = ColumnNames.Bill_QrCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Pay);
			p.SourceColumn = ColumnNames.Customer_Pay;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Rest);
			p.SourceColumn = ColumnNames.Customer_Rest;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_VatNumber);
			p.SourceColumn = ColumnNames.Bill_VatNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Back_Refrence);
			p.SourceColumn = ColumnNames.Back_Refrence;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bill_Notes);
			p.SourceColumn = ColumnNames.Bill_Notes;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
