/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewOutComing : SqlClientEntity
	{
		public ViewOutComing()
		{
			this.QuerySource = "ViewOutComing";
			this.MappingName = "ViewOutComing";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Out_ID
			{
				get
				{
					return new SqlParameter("@Out_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Item_Id
			{
				get
				{
					return new SqlParameter("@Item_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Out_Details
			{
				get
				{
					return new SqlParameter("@Out_Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Out_Money
			{
				get
				{
					return new SqlParameter("@Out_Money", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Out_Time
			{
				get
				{
					return new SqlParameter("@Out_Time", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Out_Date
			{
				get
				{
					return new SqlParameter("@Out_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Item_name
			{
				get
				{
					return new SqlParameter("@Item_name", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter User_Name
			{
				get
				{
					return new SqlParameter("@User_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bank_Name
			{
				get
				{
					return new SqlParameter("@Bank_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bank_Id
			{
				get
				{
					return new SqlParameter("@Bank_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Out_Notes
			{
				get
				{
					return new SqlParameter("@Out_Notes", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Out_Vat
			{
				get
				{
					return new SqlParameter("@Out_Vat", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Out_BeforeVat
			{
				get
				{
					return new SqlParameter("@Out_BeforeVat", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Out_WaslNumber
			{
				get
				{
					return new SqlParameter("@Out_WaslNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Out_Vat_Value
			{
				get
				{
					return new SqlParameter("@Out_Vat_Value", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Out_ID = "Out_ID";
            public const string Item_Id = "Item_Id";
            public const string Out_Details = "Out_Details";
            public const string Out_Money = "Out_Money";
            public const string User_Id = "User_Id";
            public const string Out_Time = "Out_Time";
            public const string Out_Date = "Out_Date";
            public const string Item_name = "Item_name";
            public const string User_Name = "User_Name";
            public const string Bank_Name = "Bank_Name";
            public const string Bank_Id = "Bank_Id";
            public const string Out_Notes = "Out_Notes";
            public const string Out_Vat = "Out_Vat";
            public const string Out_BeforeVat = "Out_BeforeVat";
            public const string Out_WaslNumber = "Out_WaslNumber";
            public const string Out_Vat_Value = "Out_Vat_Value";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Out_ID] = ViewOutComing.PropertyNames.Out_ID;
					ht[Item_Id] = ViewOutComing.PropertyNames.Item_Id;
					ht[Out_Details] = ViewOutComing.PropertyNames.Out_Details;
					ht[Out_Money] = ViewOutComing.PropertyNames.Out_Money;
					ht[User_Id] = ViewOutComing.PropertyNames.User_Id;
					ht[Out_Time] = ViewOutComing.PropertyNames.Out_Time;
					ht[Out_Date] = ViewOutComing.PropertyNames.Out_Date;
					ht[Item_name] = ViewOutComing.PropertyNames.Item_name;
					ht[User_Name] = ViewOutComing.PropertyNames.User_Name;
					ht[Bank_Name] = ViewOutComing.PropertyNames.Bank_Name;
					ht[Bank_Id] = ViewOutComing.PropertyNames.Bank_Id;
					ht[Out_Notes] = ViewOutComing.PropertyNames.Out_Notes;
					ht[Out_Vat] = ViewOutComing.PropertyNames.Out_Vat;
					ht[Out_BeforeVat] = ViewOutComing.PropertyNames.Out_BeforeVat;
					ht[Out_WaslNumber] = ViewOutComing.PropertyNames.Out_WaslNumber;
					ht[Out_Vat_Value] = ViewOutComing.PropertyNames.Out_Vat_Value;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Out_ID = "Out_ID";
            public const string Item_Id = "Item_Id";
            public const string Out_Details = "Out_Details";
            public const string Out_Money = "Out_Money";
            public const string User_Id = "User_Id";
            public const string Out_Time = "Out_Time";
            public const string Out_Date = "Out_Date";
            public const string Item_name = "Item_name";
            public const string User_Name = "User_Name";
            public const string Bank_Name = "Bank_Name";
            public const string Bank_Id = "Bank_Id";
            public const string Out_Notes = "Out_Notes";
            public const string Out_Vat = "Out_Vat";
            public const string Out_BeforeVat = "Out_BeforeVat";
            public const string Out_WaslNumber = "Out_WaslNumber";
            public const string Out_Vat_Value = "Out_Vat_Value";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Out_ID] = ViewOutComing.ColumnNames.Out_ID;
					ht[Item_Id] = ViewOutComing.ColumnNames.Item_Id;
					ht[Out_Details] = ViewOutComing.ColumnNames.Out_Details;
					ht[Out_Money] = ViewOutComing.ColumnNames.Out_Money;
					ht[User_Id] = ViewOutComing.ColumnNames.User_Id;
					ht[Out_Time] = ViewOutComing.ColumnNames.Out_Time;
					ht[Out_Date] = ViewOutComing.ColumnNames.Out_Date;
					ht[Item_name] = ViewOutComing.ColumnNames.Item_name;
					ht[User_Name] = ViewOutComing.ColumnNames.User_Name;
					ht[Bank_Name] = ViewOutComing.ColumnNames.Bank_Name;
					ht[Bank_Id] = ViewOutComing.ColumnNames.Bank_Id;
					ht[Out_Notes] = ViewOutComing.ColumnNames.Out_Notes;
					ht[Out_Vat] = ViewOutComing.ColumnNames.Out_Vat;
					ht[Out_BeforeVat] = ViewOutComing.ColumnNames.Out_BeforeVat;
					ht[Out_WaslNumber] = ViewOutComing.ColumnNames.Out_WaslNumber;
					ht[Out_Vat_Value] = ViewOutComing.ColumnNames.Out_Vat_Value;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Out_ID = "s_Out_ID";
            public const string Item_Id = "s_Item_Id";
            public const string Out_Details = "s_Out_Details";
            public const string Out_Money = "s_Out_Money";
            public const string User_Id = "s_User_Id";
            public const string Out_Time = "s_Out_Time";
            public const string Out_Date = "s_Out_Date";
            public const string Item_name = "s_Item_name";
            public const string User_Name = "s_User_Name";
            public const string Bank_Name = "s_Bank_Name";
            public const string Bank_Id = "s_Bank_Id";
            public const string Out_Notes = "s_Out_Notes";
            public const string Out_Vat = "s_Out_Vat";
            public const string Out_BeforeVat = "s_Out_BeforeVat";
            public const string Out_WaslNumber = "s_Out_WaslNumber";
            public const string Out_Vat_Value = "s_Out_Vat_Value";

		}
		#endregion	
		
		#region Properties
			public virtual int Out_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Out_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Out_ID, value);
			}
		}

		public virtual int Item_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Item_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Item_Id, value);
			}
		}

		public virtual string Out_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Out_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Out_Details, value);
			}
		}

		public virtual double Out_Money
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Out_Money);
			}
			set
	        {
				base.Setdouble(ColumnNames.Out_Money, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual string Out_Time
	    {
			get
	        {
				return base.Getstring(ColumnNames.Out_Time);
			}
			set
	        {
				base.Setstring(ColumnNames.Out_Time, value);
			}
		}

		public virtual DateTime Out_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Out_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Out_Date, value);
			}
		}

		public virtual string Item_name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Item_name);
			}
			set
	        {
				base.Setstring(ColumnNames.Item_name, value);
			}
		}

		public virtual string User_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.User_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.User_Name, value);
			}
		}

		public virtual string Bank_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bank_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Bank_Name, value);
			}
		}

		public virtual int Bank_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Bank_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Bank_Id, value);
			}
		}

		public virtual string Out_Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Out_Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Out_Notes, value);
			}
		}

		public virtual double Out_Vat
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Out_Vat);
			}
			set
	        {
				base.Setdouble(ColumnNames.Out_Vat, value);
			}
		}

		public virtual double Out_BeforeVat
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Out_BeforeVat);
			}
			set
	        {
				base.Setdouble(ColumnNames.Out_BeforeVat, value);
			}
		}

		public virtual string Out_WaslNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.Out_WaslNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.Out_WaslNumber, value);
			}
		}

		public virtual double Out_Vat_Value
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Out_Vat_Value);
			}
			set
	        {
				base.Setdouble(ColumnNames.Out_Vat_Value, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Out_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_ID) ? string.Empty : base.GetintAsString(ColumnNames.Out_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_ID);
				else
					this.Out_ID = base.SetintAsString(ColumnNames.Out_ID, value);
			}
		}

		public virtual string s_Item_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Item_Id) ? string.Empty : base.GetintAsString(ColumnNames.Item_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Item_Id);
				else
					this.Item_Id = base.SetintAsString(ColumnNames.Item_Id, value);
			}
		}

		public virtual string s_Out_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Out_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Details);
				else
					this.Out_Details = base.SetstringAsString(ColumnNames.Out_Details, value);
			}
		}

		public virtual string s_Out_Money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Money) ? string.Empty : base.GetdoubleAsString(ColumnNames.Out_Money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Money);
				else
					this.Out_Money = base.SetdoubleAsString(ColumnNames.Out_Money, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Out_Time
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Time) ? string.Empty : base.GetstringAsString(ColumnNames.Out_Time);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Time);
				else
					this.Out_Time = base.SetstringAsString(ColumnNames.Out_Time, value);
			}
		}

		public virtual string s_Out_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Out_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Date);
				else
					this.Out_Date = base.SetDateTimeAsString(ColumnNames.Out_Date, value);
			}
		}

		public virtual string s_Item_name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Item_name) ? string.Empty : base.GetstringAsString(ColumnNames.Item_name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Item_name);
				else
					this.Item_name = base.SetstringAsString(ColumnNames.Item_name, value);
			}
		}

		public virtual string s_User_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Name) ? string.Empty : base.GetstringAsString(ColumnNames.User_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Name);
				else
					this.User_Name = base.SetstringAsString(ColumnNames.User_Name, value);
			}
		}

		public virtual string s_Bank_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bank_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Bank_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bank_Name);
				else
					this.Bank_Name = base.SetstringAsString(ColumnNames.Bank_Name, value);
			}
		}

		public virtual string s_Bank_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bank_Id) ? string.Empty : base.GetintAsString(ColumnNames.Bank_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bank_Id);
				else
					this.Bank_Id = base.SetintAsString(ColumnNames.Bank_Id, value);
			}
		}

		public virtual string s_Out_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Out_Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Notes);
				else
					this.Out_Notes = base.SetstringAsString(ColumnNames.Out_Notes, value);
			}
		}

		public virtual string s_Out_Vat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Vat) ? string.Empty : base.GetdoubleAsString(ColumnNames.Out_Vat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Vat);
				else
					this.Out_Vat = base.SetdoubleAsString(ColumnNames.Out_Vat, value);
			}
		}

		public virtual string s_Out_BeforeVat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_BeforeVat) ? string.Empty : base.GetdoubleAsString(ColumnNames.Out_BeforeVat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_BeforeVat);
				else
					this.Out_BeforeVat = base.SetdoubleAsString(ColumnNames.Out_BeforeVat, value);
			}
		}

		public virtual string s_Out_WaslNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_WaslNumber) ? string.Empty : base.GetstringAsString(ColumnNames.Out_WaslNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_WaslNumber);
				else
					this.Out_WaslNumber = base.SetstringAsString(ColumnNames.Out_WaslNumber, value);
			}
		}

		public virtual string s_Out_Vat_Value
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Out_Vat_Value) ? string.Empty : base.GetdoubleAsString(ColumnNames.Out_Vat_Value);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Out_Vat_Value);
				else
					this.Out_Vat_Value = base.SetdoubleAsString(ColumnNames.Out_Vat_Value, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Out_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_ID, Parameters.Out_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Item_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Item_Id, Parameters.Item_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Details, Parameters.Out_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Money, Parameters.Out_Money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Time
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Time, Parameters.Out_Time);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Date, Parameters.Out_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Item_name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Item_name, Parameters.Item_name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bank_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bank_Name, Parameters.Bank_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bank_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Notes, Parameters.Out_Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Vat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Vat, Parameters.Out_Vat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_BeforeVat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_BeforeVat, Parameters.Out_BeforeVat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_WaslNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_WaslNumber, Parameters.Out_WaslNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Out_Vat_Value
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Out_Vat_Value, Parameters.Out_Vat_Value);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Out_ID
		    {
				get
		        {
					if(_Out_ID_W == null)
	        	    {
						_Out_ID_W = TearOff.Out_ID;
					}
					return _Out_ID_W;
				}
			}

			public WhereParameter Item_Id
		    {
				get
		        {
					if(_Item_Id_W == null)
	        	    {
						_Item_Id_W = TearOff.Item_Id;
					}
					return _Item_Id_W;
				}
			}

			public WhereParameter Out_Details
		    {
				get
		        {
					if(_Out_Details_W == null)
	        	    {
						_Out_Details_W = TearOff.Out_Details;
					}
					return _Out_Details_W;
				}
			}

			public WhereParameter Out_Money
		    {
				get
		        {
					if(_Out_Money_W == null)
	        	    {
						_Out_Money_W = TearOff.Out_Money;
					}
					return _Out_Money_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Out_Time
		    {
				get
		        {
					if(_Out_Time_W == null)
	        	    {
						_Out_Time_W = TearOff.Out_Time;
					}
					return _Out_Time_W;
				}
			}

			public WhereParameter Out_Date
		    {
				get
		        {
					if(_Out_Date_W == null)
	        	    {
						_Out_Date_W = TearOff.Out_Date;
					}
					return _Out_Date_W;
				}
			}

			public WhereParameter Item_name
		    {
				get
		        {
					if(_Item_name_W == null)
	        	    {
						_Item_name_W = TearOff.Item_name;
					}
					return _Item_name_W;
				}
			}

			public WhereParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			public WhereParameter Bank_Name
		    {
				get
		        {
					if(_Bank_Name_W == null)
	        	    {
						_Bank_Name_W = TearOff.Bank_Name;
					}
					return _Bank_Name_W;
				}
			}

			public WhereParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public WhereParameter Out_Notes
		    {
				get
		        {
					if(_Out_Notes_W == null)
	        	    {
						_Out_Notes_W = TearOff.Out_Notes;
					}
					return _Out_Notes_W;
				}
			}

			public WhereParameter Out_Vat
		    {
				get
		        {
					if(_Out_Vat_W == null)
	        	    {
						_Out_Vat_W = TearOff.Out_Vat;
					}
					return _Out_Vat_W;
				}
			}

			public WhereParameter Out_BeforeVat
		    {
				get
		        {
					if(_Out_BeforeVat_W == null)
	        	    {
						_Out_BeforeVat_W = TearOff.Out_BeforeVat;
					}
					return _Out_BeforeVat_W;
				}
			}

			public WhereParameter Out_WaslNumber
		    {
				get
		        {
					if(_Out_WaslNumber_W == null)
	        	    {
						_Out_WaslNumber_W = TearOff.Out_WaslNumber;
					}
					return _Out_WaslNumber_W;
				}
			}

			public WhereParameter Out_Vat_Value
		    {
				get
		        {
					if(_Out_Vat_Value_W == null)
	        	    {
						_Out_Vat_Value_W = TearOff.Out_Vat_Value;
					}
					return _Out_Vat_Value_W;
				}
			}

			private WhereParameter _Out_ID_W = null;
			private WhereParameter _Item_Id_W = null;
			private WhereParameter _Out_Details_W = null;
			private WhereParameter _Out_Money_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Out_Time_W = null;
			private WhereParameter _Out_Date_W = null;
			private WhereParameter _Item_name_W = null;
			private WhereParameter _User_Name_W = null;
			private WhereParameter _Bank_Name_W = null;
			private WhereParameter _Bank_Id_W = null;
			private WhereParameter _Out_Notes_W = null;
			private WhereParameter _Out_Vat_W = null;
			private WhereParameter _Out_BeforeVat_W = null;
			private WhereParameter _Out_WaslNumber_W = null;
			private WhereParameter _Out_Vat_Value_W = null;

			public void WhereClauseReset()
			{
				_Out_ID_W = null;
				_Item_Id_W = null;
				_Out_Details_W = null;
				_Out_Money_W = null;
				_User_Id_W = null;
				_Out_Time_W = null;
				_Out_Date_W = null;
				_Item_name_W = null;
				_User_Name_W = null;
				_Bank_Name_W = null;
				_Bank_Id_W = null;
				_Out_Notes_W = null;
				_Out_Vat_W = null;
				_Out_BeforeVat_W = null;
				_Out_WaslNumber_W = null;
				_Out_Vat_Value_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Out_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_ID, Parameters.Out_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Item_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Item_Id, Parameters.Item_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Details, Parameters.Out_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Money, Parameters.Out_Money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Time
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Time, Parameters.Out_Time);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Date, Parameters.Out_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Item_name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Item_name, Parameters.Item_name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bank_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bank_Name, Parameters.Bank_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bank_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Notes, Parameters.Out_Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Vat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Vat, Parameters.Out_Vat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_BeforeVat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_BeforeVat, Parameters.Out_BeforeVat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_WaslNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_WaslNumber, Parameters.Out_WaslNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Out_Vat_Value
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Out_Vat_Value, Parameters.Out_Vat_Value);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Out_ID
		    {
				get
		        {
					if(_Out_ID_W == null)
	        	    {
						_Out_ID_W = TearOff.Out_ID;
					}
					return _Out_ID_W;
				}
			}

			public AggregateParameter Item_Id
		    {
				get
		        {
					if(_Item_Id_W == null)
	        	    {
						_Item_Id_W = TearOff.Item_Id;
					}
					return _Item_Id_W;
				}
			}

			public AggregateParameter Out_Details
		    {
				get
		        {
					if(_Out_Details_W == null)
	        	    {
						_Out_Details_W = TearOff.Out_Details;
					}
					return _Out_Details_W;
				}
			}

			public AggregateParameter Out_Money
		    {
				get
		        {
					if(_Out_Money_W == null)
	        	    {
						_Out_Money_W = TearOff.Out_Money;
					}
					return _Out_Money_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Out_Time
		    {
				get
		        {
					if(_Out_Time_W == null)
	        	    {
						_Out_Time_W = TearOff.Out_Time;
					}
					return _Out_Time_W;
				}
			}

			public AggregateParameter Out_Date
		    {
				get
		        {
					if(_Out_Date_W == null)
	        	    {
						_Out_Date_W = TearOff.Out_Date;
					}
					return _Out_Date_W;
				}
			}

			public AggregateParameter Item_name
		    {
				get
		        {
					if(_Item_name_W == null)
	        	    {
						_Item_name_W = TearOff.Item_name;
					}
					return _Item_name_W;
				}
			}

			public AggregateParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			public AggregateParameter Bank_Name
		    {
				get
		        {
					if(_Bank_Name_W == null)
	        	    {
						_Bank_Name_W = TearOff.Bank_Name;
					}
					return _Bank_Name_W;
				}
			}

			public AggregateParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public AggregateParameter Out_Notes
		    {
				get
		        {
					if(_Out_Notes_W == null)
	        	    {
						_Out_Notes_W = TearOff.Out_Notes;
					}
					return _Out_Notes_W;
				}
			}

			public AggregateParameter Out_Vat
		    {
				get
		        {
					if(_Out_Vat_W == null)
	        	    {
						_Out_Vat_W = TearOff.Out_Vat;
					}
					return _Out_Vat_W;
				}
			}

			public AggregateParameter Out_BeforeVat
		    {
				get
		        {
					if(_Out_BeforeVat_W == null)
	        	    {
						_Out_BeforeVat_W = TearOff.Out_BeforeVat;
					}
					return _Out_BeforeVat_W;
				}
			}

			public AggregateParameter Out_WaslNumber
		    {
				get
		        {
					if(_Out_WaslNumber_W == null)
	        	    {
						_Out_WaslNumber_W = TearOff.Out_WaslNumber;
					}
					return _Out_WaslNumber_W;
				}
			}

			public AggregateParameter Out_Vat_Value
		    {
				get
		        {
					if(_Out_Vat_Value_W == null)
	        	    {
						_Out_Vat_Value_W = TearOff.Out_Vat_Value;
					}
					return _Out_Vat_Value_W;
				}
			}

			private AggregateParameter _Out_ID_W = null;
			private AggregateParameter _Item_Id_W = null;
			private AggregateParameter _Out_Details_W = null;
			private AggregateParameter _Out_Money_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Out_Time_W = null;
			private AggregateParameter _Out_Date_W = null;
			private AggregateParameter _Item_name_W = null;
			private AggregateParameter _User_Name_W = null;
			private AggregateParameter _Bank_Name_W = null;
			private AggregateParameter _Bank_Id_W = null;
			private AggregateParameter _Out_Notes_W = null;
			private AggregateParameter _Out_Vat_W = null;
			private AggregateParameter _Out_BeforeVat_W = null;
			private AggregateParameter _Out_WaslNumber_W = null;
			private AggregateParameter _Out_Vat_Value_W = null;

			public void AggregateClauseReset()
			{
				_Out_ID_W = null;
				_Item_Id_W = null;
				_Out_Details_W = null;
				_Out_Money_W = null;
				_User_Id_W = null;
				_Out_Time_W = null;
				_Out_Date_W = null;
				_Item_name_W = null;
				_User_Name_W = null;
				_Bank_Name_W = null;
				_Bank_Id_W = null;
				_Out_Notes_W = null;
				_Out_Vat_W = null;
				_Out_BeforeVat_W = null;
				_Out_WaslNumber_W = null;
				_Out_Vat_Value_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
