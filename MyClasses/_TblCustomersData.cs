
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblCustomersData : SqlClientEntity
	{
		public _TblCustomersData()
		{
			this.QuerySource = "TblCustomersData";
			this.MappingName = "TblCustomersData";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblCustomersDataLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Customer_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Customer_ID, Customer_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblCustomersDataLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Customer_ID
			{
				get
				{
					return new SqlParameter("@Customer_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Customer_Name
			{
				get
				{
					return new SqlParameter("@Customer_Name", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Customer_Address
			{
				get
				{
					return new SqlParameter("@Customer_Address", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Customer_Mobile
			{
				get
				{
					return new SqlParameter("@Customer_Mobile", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_VatNumber
			{
				get
				{
					return new SqlParameter("@Customer_VatNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_SenderName
			{
				get
				{
					return new SqlParameter("@Customer_SenderName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_SenderMobile
			{
				get
				{
					return new SqlParameter("@Customer_SenderMobile", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Recent_money
			{
				get
				{
					return new SqlParameter("@Recent_money", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter RecentDate
			{
				get
				{
					return new SqlParameter("@RecentDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Customer_MaxMoney
			{
				get
				{
					return new SqlParameter("@Customer_MaxMoney", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_BankNumber1
			{
				get
				{
					return new SqlParameter("@Customer_BankNumber1", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_BankNumber2
			{
				get
				{
					return new SqlParameter("@Customer_BankNumber2", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_BankType1
			{
				get
				{
					return new SqlParameter("@Customer_BankType1", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_BankType2
			{
				get
				{
					return new SqlParameter("@Customer_BankType2", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Customer_Type
			{
				get
				{
					return new SqlParameter("@Customer_Type", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Customer_ID = "Customer_ID";
            public const string Customer_Name = "Customer_Name";
            public const string Customer_Address = "Customer_Address";
            public const string Customer_Mobile = "Customer_Mobile";
            public const string Customer_VatNumber = "Customer_VatNumber";
            public const string Customer_SenderName = "Customer_SenderName";
            public const string Customer_SenderMobile = "Customer_SenderMobile";
            public const string Recent_money = "Recent_money";
            public const string RecentDate = "RecentDate";
            public const string Customer_MaxMoney = "Customer_MaxMoney";
            public const string Customer_BankNumber1 = "Customer_BankNumber1";
            public const string Customer_BankNumber2 = "Customer_BankNumber2";
            public const string Customer_BankType1 = "Customer_BankType1";
            public const string Customer_BankType2 = "Customer_BankType2";
            public const string Customer_Type = "Customer_Type";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Customer_ID] = _TblCustomersData.PropertyNames.Customer_ID;
					ht[Customer_Name] = _TblCustomersData.PropertyNames.Customer_Name;
					ht[Customer_Address] = _TblCustomersData.PropertyNames.Customer_Address;
					ht[Customer_Mobile] = _TblCustomersData.PropertyNames.Customer_Mobile;
					ht[Customer_VatNumber] = _TblCustomersData.PropertyNames.Customer_VatNumber;
					ht[Customer_SenderName] = _TblCustomersData.PropertyNames.Customer_SenderName;
					ht[Customer_SenderMobile] = _TblCustomersData.PropertyNames.Customer_SenderMobile;
					ht[Recent_money] = _TblCustomersData.PropertyNames.Recent_money;
					ht[RecentDate] = _TblCustomersData.PropertyNames.RecentDate;
					ht[Customer_MaxMoney] = _TblCustomersData.PropertyNames.Customer_MaxMoney;
					ht[Customer_BankNumber1] = _TblCustomersData.PropertyNames.Customer_BankNumber1;
					ht[Customer_BankNumber2] = _TblCustomersData.PropertyNames.Customer_BankNumber2;
					ht[Customer_BankType1] = _TblCustomersData.PropertyNames.Customer_BankType1;
					ht[Customer_BankType2] = _TblCustomersData.PropertyNames.Customer_BankType2;
					ht[Customer_Type] = _TblCustomersData.PropertyNames.Customer_Type;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Customer_ID = "Customer_ID";
            public const string Customer_Name = "Customer_Name";
            public const string Customer_Address = "Customer_Address";
            public const string Customer_Mobile = "Customer_Mobile";
            public const string Customer_VatNumber = "Customer_VatNumber";
            public const string Customer_SenderName = "Customer_SenderName";
            public const string Customer_SenderMobile = "Customer_SenderMobile";
            public const string Recent_money = "Recent_money";
            public const string RecentDate = "RecentDate";
            public const string Customer_MaxMoney = "Customer_MaxMoney";
            public const string Customer_BankNumber1 = "Customer_BankNumber1";
            public const string Customer_BankNumber2 = "Customer_BankNumber2";
            public const string Customer_BankType1 = "Customer_BankType1";
            public const string Customer_BankType2 = "Customer_BankType2";
            public const string Customer_Type = "Customer_Type";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Customer_ID] = _TblCustomersData.ColumnNames.Customer_ID;
					ht[Customer_Name] = _TblCustomersData.ColumnNames.Customer_Name;
					ht[Customer_Address] = _TblCustomersData.ColumnNames.Customer_Address;
					ht[Customer_Mobile] = _TblCustomersData.ColumnNames.Customer_Mobile;
					ht[Customer_VatNumber] = _TblCustomersData.ColumnNames.Customer_VatNumber;
					ht[Customer_SenderName] = _TblCustomersData.ColumnNames.Customer_SenderName;
					ht[Customer_SenderMobile] = _TblCustomersData.ColumnNames.Customer_SenderMobile;
					ht[Recent_money] = _TblCustomersData.ColumnNames.Recent_money;
					ht[RecentDate] = _TblCustomersData.ColumnNames.RecentDate;
					ht[Customer_MaxMoney] = _TblCustomersData.ColumnNames.Customer_MaxMoney;
					ht[Customer_BankNumber1] = _TblCustomersData.ColumnNames.Customer_BankNumber1;
					ht[Customer_BankNumber2] = _TblCustomersData.ColumnNames.Customer_BankNumber2;
					ht[Customer_BankType1] = _TblCustomersData.ColumnNames.Customer_BankType1;
					ht[Customer_BankType2] = _TblCustomersData.ColumnNames.Customer_BankType2;
					ht[Customer_Type] = _TblCustomersData.ColumnNames.Customer_Type;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Customer_ID = "s_Customer_ID";
            public const string Customer_Name = "s_Customer_Name";
            public const string Customer_Address = "s_Customer_Address";
            public const string Customer_Mobile = "s_Customer_Mobile";
            public const string Customer_VatNumber = "s_Customer_VatNumber";
            public const string Customer_SenderName = "s_Customer_SenderName";
            public const string Customer_SenderMobile = "s_Customer_SenderMobile";
            public const string Recent_money = "s_Recent_money";
            public const string RecentDate = "s_RecentDate";
            public const string Customer_MaxMoney = "s_Customer_MaxMoney";
            public const string Customer_BankNumber1 = "s_Customer_BankNumber1";
            public const string Customer_BankNumber2 = "s_Customer_BankNumber2";
            public const string Customer_BankType1 = "s_Customer_BankType1";
            public const string Customer_BankType2 = "s_Customer_BankType2";
            public const string Customer_Type = "s_Customer_Type";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Customer_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Customer_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Customer_ID, value);
			}
		}

		public virtual string Customer_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Name, value);
			}
		}

		public virtual string Customer_Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Address, value);
			}
		}

		public virtual string Customer_Mobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Mobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Mobile, value);
			}
		}

		public virtual string Customer_VatNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_VatNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_VatNumber, value);
			}
		}

		public virtual string Customer_SenderName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_SenderName);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_SenderName, value);
			}
		}

		public virtual string Customer_SenderMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_SenderMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_SenderMobile, value);
			}
		}

		public virtual double Recent_money
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Recent_money);
			}
			set
	        {
				base.Setdouble(ColumnNames.Recent_money, value);
			}
		}

		public virtual DateTime RecentDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RecentDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RecentDate, value);
			}
		}

		public virtual string Customer_MaxMoney
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_MaxMoney);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_MaxMoney, value);
			}
		}

		public virtual string Customer_BankNumber1
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_BankNumber1);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_BankNumber1, value);
			}
		}

		public virtual string Customer_BankNumber2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_BankNumber2);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_BankNumber2, value);
			}
		}

		public virtual string Customer_BankType1
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_BankType1);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_BankType1, value);
			}
		}

		public virtual string Customer_BankType2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_BankType2);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_BankType2, value);
			}
		}

		public virtual string Customer_Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Customer_Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Customer_Type, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Customer_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_ID) ? string.Empty : base.GetintAsString(ColumnNames.Customer_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_ID);
				else
					this.Customer_ID = base.SetintAsString(ColumnNames.Customer_ID, value);
			}
		}

		public virtual string s_Customer_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Name);
				else
					this.Customer_Name = base.SetstringAsString(ColumnNames.Customer_Name, value);
			}
		}

		public virtual string s_Customer_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Address) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Address);
				else
					this.Customer_Address = base.SetstringAsString(ColumnNames.Customer_Address, value);
			}
		}

		public virtual string s_Customer_Mobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Mobile) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Mobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Mobile);
				else
					this.Customer_Mobile = base.SetstringAsString(ColumnNames.Customer_Mobile, value);
			}
		}

		public virtual string s_Customer_VatNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_VatNumber) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_VatNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_VatNumber);
				else
					this.Customer_VatNumber = base.SetstringAsString(ColumnNames.Customer_VatNumber, value);
			}
		}

		public virtual string s_Customer_SenderName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_SenderName) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_SenderName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_SenderName);
				else
					this.Customer_SenderName = base.SetstringAsString(ColumnNames.Customer_SenderName, value);
			}
		}

		public virtual string s_Customer_SenderMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_SenderMobile) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_SenderMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_SenderMobile);
				else
					this.Customer_SenderMobile = base.SetstringAsString(ColumnNames.Customer_SenderMobile, value);
			}
		}

		public virtual string s_Recent_money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Recent_money) ? string.Empty : base.GetdoubleAsString(ColumnNames.Recent_money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Recent_money);
				else
					this.Recent_money = base.SetdoubleAsString(ColumnNames.Recent_money, value);
			}
		}

		public virtual string s_RecentDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RecentDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RecentDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RecentDate);
				else
					this.RecentDate = base.SetDateTimeAsString(ColumnNames.RecentDate, value);
			}
		}

		public virtual string s_Customer_MaxMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_MaxMoney) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_MaxMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_MaxMoney);
				else
					this.Customer_MaxMoney = base.SetstringAsString(ColumnNames.Customer_MaxMoney, value);
			}
		}

		public virtual string s_Customer_BankNumber1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_BankNumber1) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_BankNumber1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_BankNumber1);
				else
					this.Customer_BankNumber1 = base.SetstringAsString(ColumnNames.Customer_BankNumber1, value);
			}
		}

		public virtual string s_Customer_BankNumber2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_BankNumber2) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_BankNumber2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_BankNumber2);
				else
					this.Customer_BankNumber2 = base.SetstringAsString(ColumnNames.Customer_BankNumber2, value);
			}
		}

		public virtual string s_Customer_BankType1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_BankType1) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_BankType1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_BankType1);
				else
					this.Customer_BankType1 = base.SetstringAsString(ColumnNames.Customer_BankType1, value);
			}
		}

		public virtual string s_Customer_BankType2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_BankType2) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_BankType2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_BankType2);
				else
					this.Customer_BankType2 = base.SetstringAsString(ColumnNames.Customer_BankType2, value);
			}
		}

		public virtual string s_Customer_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Customer_Type) ? string.Empty : base.GetstringAsString(ColumnNames.Customer_Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Customer_Type);
				else
					this.Customer_Type = base.SetstringAsString(ColumnNames.Customer_Type, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Customer_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_ID, Parameters.Customer_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Name, Parameters.Customer_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Address, Parameters.Customer_Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Mobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Mobile, Parameters.Customer_Mobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_VatNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_VatNumber, Parameters.Customer_VatNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_SenderName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_SenderName, Parameters.Customer_SenderName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_SenderMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_SenderMobile, Parameters.Customer_SenderMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Recent_money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Recent_money, Parameters.Recent_money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RecentDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RecentDate, Parameters.RecentDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_MaxMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_MaxMoney, Parameters.Customer_MaxMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_BankNumber1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_BankNumber1, Parameters.Customer_BankNumber1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_BankNumber2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_BankNumber2, Parameters.Customer_BankNumber2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_BankType1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_BankType1, Parameters.Customer_BankType1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_BankType2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_BankType2, Parameters.Customer_BankType2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Customer_Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Customer_Type, Parameters.Customer_Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Customer_ID
		    {
				get
		        {
					if(_Customer_ID_W == null)
	        	    {
						_Customer_ID_W = TearOff.Customer_ID;
					}
					return _Customer_ID_W;
				}
			}

			public WhereParameter Customer_Name
		    {
				get
		        {
					if(_Customer_Name_W == null)
	        	    {
						_Customer_Name_W = TearOff.Customer_Name;
					}
					return _Customer_Name_W;
				}
			}

			public WhereParameter Customer_Address
		    {
				get
		        {
					if(_Customer_Address_W == null)
	        	    {
						_Customer_Address_W = TearOff.Customer_Address;
					}
					return _Customer_Address_W;
				}
			}

			public WhereParameter Customer_Mobile
		    {
				get
		        {
					if(_Customer_Mobile_W == null)
	        	    {
						_Customer_Mobile_W = TearOff.Customer_Mobile;
					}
					return _Customer_Mobile_W;
				}
			}

			public WhereParameter Customer_VatNumber
		    {
				get
		        {
					if(_Customer_VatNumber_W == null)
	        	    {
						_Customer_VatNumber_W = TearOff.Customer_VatNumber;
					}
					return _Customer_VatNumber_W;
				}
			}

			public WhereParameter Customer_SenderName
		    {
				get
		        {
					if(_Customer_SenderName_W == null)
	        	    {
						_Customer_SenderName_W = TearOff.Customer_SenderName;
					}
					return _Customer_SenderName_W;
				}
			}

			public WhereParameter Customer_SenderMobile
		    {
				get
		        {
					if(_Customer_SenderMobile_W == null)
	        	    {
						_Customer_SenderMobile_W = TearOff.Customer_SenderMobile;
					}
					return _Customer_SenderMobile_W;
				}
			}

			public WhereParameter Recent_money
		    {
				get
		        {
					if(_Recent_money_W == null)
	        	    {
						_Recent_money_W = TearOff.Recent_money;
					}
					return _Recent_money_W;
				}
			}

			public WhereParameter RecentDate
		    {
				get
		        {
					if(_RecentDate_W == null)
	        	    {
						_RecentDate_W = TearOff.RecentDate;
					}
					return _RecentDate_W;
				}
			}

			public WhereParameter Customer_MaxMoney
		    {
				get
		        {
					if(_Customer_MaxMoney_W == null)
	        	    {
						_Customer_MaxMoney_W = TearOff.Customer_MaxMoney;
					}
					return _Customer_MaxMoney_W;
				}
			}

			public WhereParameter Customer_BankNumber1
		    {
				get
		        {
					if(_Customer_BankNumber1_W == null)
	        	    {
						_Customer_BankNumber1_W = TearOff.Customer_BankNumber1;
					}
					return _Customer_BankNumber1_W;
				}
			}

			public WhereParameter Customer_BankNumber2
		    {
				get
		        {
					if(_Customer_BankNumber2_W == null)
	        	    {
						_Customer_BankNumber2_W = TearOff.Customer_BankNumber2;
					}
					return _Customer_BankNumber2_W;
				}
			}

			public WhereParameter Customer_BankType1
		    {
				get
		        {
					if(_Customer_BankType1_W == null)
	        	    {
						_Customer_BankType1_W = TearOff.Customer_BankType1;
					}
					return _Customer_BankType1_W;
				}
			}

			public WhereParameter Customer_BankType2
		    {
				get
		        {
					if(_Customer_BankType2_W == null)
	        	    {
						_Customer_BankType2_W = TearOff.Customer_BankType2;
					}
					return _Customer_BankType2_W;
				}
			}

			public WhereParameter Customer_Type
		    {
				get
		        {
					if(_Customer_Type_W == null)
	        	    {
						_Customer_Type_W = TearOff.Customer_Type;
					}
					return _Customer_Type_W;
				}
			}

			private WhereParameter _Customer_ID_W = null;
			private WhereParameter _Customer_Name_W = null;
			private WhereParameter _Customer_Address_W = null;
			private WhereParameter _Customer_Mobile_W = null;
			private WhereParameter _Customer_VatNumber_W = null;
			private WhereParameter _Customer_SenderName_W = null;
			private WhereParameter _Customer_SenderMobile_W = null;
			private WhereParameter _Recent_money_W = null;
			private WhereParameter _RecentDate_W = null;
			private WhereParameter _Customer_MaxMoney_W = null;
			private WhereParameter _Customer_BankNumber1_W = null;
			private WhereParameter _Customer_BankNumber2_W = null;
			private WhereParameter _Customer_BankType1_W = null;
			private WhereParameter _Customer_BankType2_W = null;
			private WhereParameter _Customer_Type_W = null;

			public void WhereClauseReset()
			{
				_Customer_ID_W = null;
				_Customer_Name_W = null;
				_Customer_Address_W = null;
				_Customer_Mobile_W = null;
				_Customer_VatNumber_W = null;
				_Customer_SenderName_W = null;
				_Customer_SenderMobile_W = null;
				_Recent_money_W = null;
				_RecentDate_W = null;
				_Customer_MaxMoney_W = null;
				_Customer_BankNumber1_W = null;
				_Customer_BankNumber2_W = null;
				_Customer_BankType1_W = null;
				_Customer_BankType2_W = null;
				_Customer_Type_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Customer_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_ID, Parameters.Customer_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Name, Parameters.Customer_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Address, Parameters.Customer_Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Mobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Mobile, Parameters.Customer_Mobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_VatNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_VatNumber, Parameters.Customer_VatNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_SenderName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_SenderName, Parameters.Customer_SenderName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_SenderMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_SenderMobile, Parameters.Customer_SenderMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Recent_money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Recent_money, Parameters.Recent_money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RecentDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecentDate, Parameters.RecentDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_MaxMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_MaxMoney, Parameters.Customer_MaxMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_BankNumber1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_BankNumber1, Parameters.Customer_BankNumber1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_BankNumber2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_BankNumber2, Parameters.Customer_BankNumber2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_BankType1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_BankType1, Parameters.Customer_BankType1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_BankType2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_BankType2, Parameters.Customer_BankType2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Customer_Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Customer_Type, Parameters.Customer_Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Customer_ID
		    {
				get
		        {
					if(_Customer_ID_W == null)
	        	    {
						_Customer_ID_W = TearOff.Customer_ID;
					}
					return _Customer_ID_W;
				}
			}

			public AggregateParameter Customer_Name
		    {
				get
		        {
					if(_Customer_Name_W == null)
	        	    {
						_Customer_Name_W = TearOff.Customer_Name;
					}
					return _Customer_Name_W;
				}
			}

			public AggregateParameter Customer_Address
		    {
				get
		        {
					if(_Customer_Address_W == null)
	        	    {
						_Customer_Address_W = TearOff.Customer_Address;
					}
					return _Customer_Address_W;
				}
			}

			public AggregateParameter Customer_Mobile
		    {
				get
		        {
					if(_Customer_Mobile_W == null)
	        	    {
						_Customer_Mobile_W = TearOff.Customer_Mobile;
					}
					return _Customer_Mobile_W;
				}
			}

			public AggregateParameter Customer_VatNumber
		    {
				get
		        {
					if(_Customer_VatNumber_W == null)
	        	    {
						_Customer_VatNumber_W = TearOff.Customer_VatNumber;
					}
					return _Customer_VatNumber_W;
				}
			}

			public AggregateParameter Customer_SenderName
		    {
				get
		        {
					if(_Customer_SenderName_W == null)
	        	    {
						_Customer_SenderName_W = TearOff.Customer_SenderName;
					}
					return _Customer_SenderName_W;
				}
			}

			public AggregateParameter Customer_SenderMobile
		    {
				get
		        {
					if(_Customer_SenderMobile_W == null)
	        	    {
						_Customer_SenderMobile_W = TearOff.Customer_SenderMobile;
					}
					return _Customer_SenderMobile_W;
				}
			}

			public AggregateParameter Recent_money
		    {
				get
		        {
					if(_Recent_money_W == null)
	        	    {
						_Recent_money_W = TearOff.Recent_money;
					}
					return _Recent_money_W;
				}
			}

			public AggregateParameter RecentDate
		    {
				get
		        {
					if(_RecentDate_W == null)
	        	    {
						_RecentDate_W = TearOff.RecentDate;
					}
					return _RecentDate_W;
				}
			}

			public AggregateParameter Customer_MaxMoney
		    {
				get
		        {
					if(_Customer_MaxMoney_W == null)
	        	    {
						_Customer_MaxMoney_W = TearOff.Customer_MaxMoney;
					}
					return _Customer_MaxMoney_W;
				}
			}

			public AggregateParameter Customer_BankNumber1
		    {
				get
		        {
					if(_Customer_BankNumber1_W == null)
	        	    {
						_Customer_BankNumber1_W = TearOff.Customer_BankNumber1;
					}
					return _Customer_BankNumber1_W;
				}
			}

			public AggregateParameter Customer_BankNumber2
		    {
				get
		        {
					if(_Customer_BankNumber2_W == null)
	        	    {
						_Customer_BankNumber2_W = TearOff.Customer_BankNumber2;
					}
					return _Customer_BankNumber2_W;
				}
			}

			public AggregateParameter Customer_BankType1
		    {
				get
		        {
					if(_Customer_BankType1_W == null)
	        	    {
						_Customer_BankType1_W = TearOff.Customer_BankType1;
					}
					return _Customer_BankType1_W;
				}
			}

			public AggregateParameter Customer_BankType2
		    {
				get
		        {
					if(_Customer_BankType2_W == null)
	        	    {
						_Customer_BankType2_W = TearOff.Customer_BankType2;
					}
					return _Customer_BankType2_W;
				}
			}

			public AggregateParameter Customer_Type
		    {
				get
		        {
					if(_Customer_Type_W == null)
	        	    {
						_Customer_Type_W = TearOff.Customer_Type;
					}
					return _Customer_Type_W;
				}
			}

			private AggregateParameter _Customer_ID_W = null;
			private AggregateParameter _Customer_Name_W = null;
			private AggregateParameter _Customer_Address_W = null;
			private AggregateParameter _Customer_Mobile_W = null;
			private AggregateParameter _Customer_VatNumber_W = null;
			private AggregateParameter _Customer_SenderName_W = null;
			private AggregateParameter _Customer_SenderMobile_W = null;
			private AggregateParameter _Recent_money_W = null;
			private AggregateParameter _RecentDate_W = null;
			private AggregateParameter _Customer_MaxMoney_W = null;
			private AggregateParameter _Customer_BankNumber1_W = null;
			private AggregateParameter _Customer_BankNumber2_W = null;
			private AggregateParameter _Customer_BankType1_W = null;
			private AggregateParameter _Customer_BankType2_W = null;
			private AggregateParameter _Customer_Type_W = null;

			public void AggregateClauseReset()
			{
				_Customer_ID_W = null;
				_Customer_Name_W = null;
				_Customer_Address_W = null;
				_Customer_Mobile_W = null;
				_Customer_VatNumber_W = null;
				_Customer_SenderName_W = null;
				_Customer_SenderMobile_W = null;
				_Recent_money_W = null;
				_RecentDate_W = null;
				_Customer_MaxMoney_W = null;
				_Customer_BankNumber1_W = null;
				_Customer_BankNumber2_W = null;
				_Customer_BankType1_W = null;
				_Customer_BankType2_W = null;
				_Customer_Type_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersDataInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Customer_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersDataUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblCustomersDataDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Customer_ID);
			p.SourceColumn = ColumnNames.Customer_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Customer_ID);
			p.SourceColumn = ColumnNames.Customer_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Name);
			p.SourceColumn = ColumnNames.Customer_Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Address);
			p.SourceColumn = ColumnNames.Customer_Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Mobile);
			p.SourceColumn = ColumnNames.Customer_Mobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_VatNumber);
			p.SourceColumn = ColumnNames.Customer_VatNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_SenderName);
			p.SourceColumn = ColumnNames.Customer_SenderName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_SenderMobile);
			p.SourceColumn = ColumnNames.Customer_SenderMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Recent_money);
			p.SourceColumn = ColumnNames.Recent_money;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RecentDate);
			p.SourceColumn = ColumnNames.RecentDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_MaxMoney);
			p.SourceColumn = ColumnNames.Customer_MaxMoney;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_BankNumber1);
			p.SourceColumn = ColumnNames.Customer_BankNumber1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_BankNumber2);
			p.SourceColumn = ColumnNames.Customer_BankNumber2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_BankType1);
			p.SourceColumn = ColumnNames.Customer_BankType1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_BankType2);
			p.SourceColumn = ColumnNames.Customer_BankType2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Customer_Type);
			p.SourceColumn = ColumnNames.Customer_Type;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
