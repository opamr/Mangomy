/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewStoreReviewSummary : SqlClientEntity
	{
		public ViewStoreReviewSummary()
		{
			this.QuerySource = "ViewStoreReviewSummary";
			this.MappingName = "ViewStoreReviewSummary";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Review_Date
			{
				get
				{
					return new SqlParameter("@Review_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Review_Title
			{
				get
				{
					return new SqlParameter("@Review_Title", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Review_Details
			{
				get
				{
					return new SqlParameter("@Review_Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Summary_ID
			{
				get
				{
					return new SqlParameter("@Summary_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Review_Id
			{
				get
				{
					return new SqlParameter("@Review_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Good_TraidName
			{
				get
				{
					return new SqlParameter("@Good_TraidName", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Title_Id
			{
				get
				{
					return new SqlParameter("@Title_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Program_Count
			{
				get
				{
					return new SqlParameter("@Program_Count", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Entry_Count
			{
				get
				{
					return new SqlParameter("@Entry_Count", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Detail_Type
			{
				get
				{
					return new SqlParameter("@Detail_Type", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Detail_Difference
			{
				get
				{
					return new SqlParameter("@Detail_Difference", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Pay_Price
			{
				get
				{
					return new SqlParameter("@Pay_Price", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Detail_Total
			{
				get
				{
					return new SqlParameter("@Detail_Total", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Detail_TotalGood
			{
				get
				{
					return new SqlParameter("@Detail_TotalGood", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Review_Date = "Review_Date";
            public const string Review_Title = "Review_Title";
            public const string User_Id = "User_Id";
            public const string Review_Details = "Review_Details";
            public const string Summary_ID = "Summary_ID";
            public const string Review_Id = "Review_Id";
            public const string Good_TraidName = "Good_TraidName";
            public const string Title_Id = "Title_Id";
            public const string Program_Count = "Program_Count";
            public const string Entry_Count = "Entry_Count";
            public const string Detail_Type = "Detail_Type";
            public const string Detail_Difference = "Detail_Difference";
            public const string Pay_Price = "Pay_Price";
            public const string Detail_Total = "Detail_Total";
            public const string Detail_TotalGood = "Detail_TotalGood";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Review_Date] = ViewStoreReviewSummary.PropertyNames.Review_Date;
					ht[Review_Title] = ViewStoreReviewSummary.PropertyNames.Review_Title;
					ht[User_Id] = ViewStoreReviewSummary.PropertyNames.User_Id;
					ht[Review_Details] = ViewStoreReviewSummary.PropertyNames.Review_Details;
					ht[Summary_ID] = ViewStoreReviewSummary.PropertyNames.Summary_ID;
					ht[Review_Id] = ViewStoreReviewSummary.PropertyNames.Review_Id;
					ht[Good_TraidName] = ViewStoreReviewSummary.PropertyNames.Good_TraidName;
					ht[Title_Id] = ViewStoreReviewSummary.PropertyNames.Title_Id;
					ht[Program_Count] = ViewStoreReviewSummary.PropertyNames.Program_Count;
					ht[Entry_Count] = ViewStoreReviewSummary.PropertyNames.Entry_Count;
					ht[Detail_Type] = ViewStoreReviewSummary.PropertyNames.Detail_Type;
					ht[Detail_Difference] = ViewStoreReviewSummary.PropertyNames.Detail_Difference;
					ht[Pay_Price] = ViewStoreReviewSummary.PropertyNames.Pay_Price;
					ht[Detail_Total] = ViewStoreReviewSummary.PropertyNames.Detail_Total;
					ht[Detail_TotalGood] = ViewStoreReviewSummary.PropertyNames.Detail_TotalGood;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Review_Date = "Review_Date";
            public const string Review_Title = "Review_Title";
            public const string User_Id = "User_Id";
            public const string Review_Details = "Review_Details";
            public const string Summary_ID = "Summary_ID";
            public const string Review_Id = "Review_Id";
            public const string Good_TraidName = "Good_TraidName";
            public const string Title_Id = "Title_Id";
            public const string Program_Count = "Program_Count";
            public const string Entry_Count = "Entry_Count";
            public const string Detail_Type = "Detail_Type";
            public const string Detail_Difference = "Detail_Difference";
            public const string Pay_Price = "Pay_Price";
            public const string Detail_Total = "Detail_Total";
            public const string Detail_TotalGood = "Detail_TotalGood";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Review_Date] = ViewStoreReviewSummary.ColumnNames.Review_Date;
					ht[Review_Title] = ViewStoreReviewSummary.ColumnNames.Review_Title;
					ht[User_Id] = ViewStoreReviewSummary.ColumnNames.User_Id;
					ht[Review_Details] = ViewStoreReviewSummary.ColumnNames.Review_Details;
					ht[Summary_ID] = ViewStoreReviewSummary.ColumnNames.Summary_ID;
					ht[Review_Id] = ViewStoreReviewSummary.ColumnNames.Review_Id;
					ht[Good_TraidName] = ViewStoreReviewSummary.ColumnNames.Good_TraidName;
					ht[Title_Id] = ViewStoreReviewSummary.ColumnNames.Title_Id;
					ht[Program_Count] = ViewStoreReviewSummary.ColumnNames.Program_Count;
					ht[Entry_Count] = ViewStoreReviewSummary.ColumnNames.Entry_Count;
					ht[Detail_Type] = ViewStoreReviewSummary.ColumnNames.Detail_Type;
					ht[Detail_Difference] = ViewStoreReviewSummary.ColumnNames.Detail_Difference;
					ht[Pay_Price] = ViewStoreReviewSummary.ColumnNames.Pay_Price;
					ht[Detail_Total] = ViewStoreReviewSummary.ColumnNames.Detail_Total;
					ht[Detail_TotalGood] = ViewStoreReviewSummary.ColumnNames.Detail_TotalGood;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Review_Date = "s_Review_Date";
            public const string Review_Title = "s_Review_Title";
            public const string User_Id = "s_User_Id";
            public const string Review_Details = "s_Review_Details";
            public const string Summary_ID = "s_Summary_ID";
            public const string Review_Id = "s_Review_Id";
            public const string Good_TraidName = "s_Good_TraidName";
            public const string Title_Id = "s_Title_Id";
            public const string Program_Count = "s_Program_Count";
            public const string Entry_Count = "s_Entry_Count";
            public const string Detail_Type = "s_Detail_Type";
            public const string Detail_Difference = "s_Detail_Difference";
            public const string Pay_Price = "s_Pay_Price";
            public const string Detail_Total = "s_Detail_Total";
            public const string Detail_TotalGood = "s_Detail_TotalGood";

		}
		#endregion	
		
		#region Properties
			public virtual DateTime Review_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Review_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Review_Date, value);
			}
		}

		public virtual string Review_Title
	    {
			get
	        {
				return base.Getstring(ColumnNames.Review_Title);
			}
			set
	        {
				base.Setstring(ColumnNames.Review_Title, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual string Review_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Review_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Review_Details, value);
			}
		}

		public virtual int Summary_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Summary_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Summary_ID, value);
			}
		}

		public virtual int Review_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Review_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Review_Id, value);
			}
		}

		public virtual string Good_TraidName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Good_TraidName);
			}
			set
	        {
				base.Setstring(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual int Title_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Title_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Title_Id, value);
			}
		}

		public virtual double Program_Count
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Program_Count);
			}
			set
	        {
				base.Setdouble(ColumnNames.Program_Count, value);
			}
		}

		public virtual double Entry_Count
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Entry_Count);
			}
			set
	        {
				base.Setdouble(ColumnNames.Entry_Count, value);
			}
		}

		public virtual string Detail_Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Detail_Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Detail_Type, value);
			}
		}

		public virtual double Detail_Difference
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Detail_Difference);
			}
			set
	        {
				base.Setdouble(ColumnNames.Detail_Difference, value);
			}
		}

		public virtual double Pay_Price
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Pay_Price);
			}
			set
	        {
				base.Setdouble(ColumnNames.Pay_Price, value);
			}
		}

		public virtual double Detail_Total
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Detail_Total);
			}
			set
	        {
				base.Setdouble(ColumnNames.Detail_Total, value);
			}
		}

		public virtual double Detail_TotalGood
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Detail_TotalGood);
			}
			set
	        {
				base.Setdouble(ColumnNames.Detail_TotalGood, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Review_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Review_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Review_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Review_Date);
				else
					this.Review_Date = base.SetDateTimeAsString(ColumnNames.Review_Date, value);
			}
		}

		public virtual string s_Review_Title
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Review_Title) ? string.Empty : base.GetstringAsString(ColumnNames.Review_Title);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Review_Title);
				else
					this.Review_Title = base.SetstringAsString(ColumnNames.Review_Title, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Review_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Review_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Review_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Review_Details);
				else
					this.Review_Details = base.SetstringAsString(ColumnNames.Review_Details, value);
			}
		}

		public virtual string s_Summary_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Summary_ID) ? string.Empty : base.GetintAsString(ColumnNames.Summary_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Summary_ID);
				else
					this.Summary_ID = base.SetintAsString(ColumnNames.Summary_ID, value);
			}
		}

		public virtual string s_Review_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Review_Id) ? string.Empty : base.GetintAsString(ColumnNames.Review_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Review_Id);
				else
					this.Review_Id = base.SetintAsString(ColumnNames.Review_Id, value);
			}
		}

		public virtual string s_Good_TraidName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_TraidName) ? string.Empty : base.GetstringAsString(ColumnNames.Good_TraidName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_TraidName);
				else
					this.Good_TraidName = base.SetstringAsString(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual string s_Title_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title_Id) ? string.Empty : base.GetintAsString(ColumnNames.Title_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title_Id);
				else
					this.Title_Id = base.SetintAsString(ColumnNames.Title_Id, value);
			}
		}

		public virtual string s_Program_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Program_Count) ? string.Empty : base.GetdoubleAsString(ColumnNames.Program_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Program_Count);
				else
					this.Program_Count = base.SetdoubleAsString(ColumnNames.Program_Count, value);
			}
		}

		public virtual string s_Entry_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Entry_Count) ? string.Empty : base.GetdoubleAsString(ColumnNames.Entry_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Entry_Count);
				else
					this.Entry_Count = base.SetdoubleAsString(ColumnNames.Entry_Count, value);
			}
		}

		public virtual string s_Detail_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Type) ? string.Empty : base.GetstringAsString(ColumnNames.Detail_Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Type);
				else
					this.Detail_Type = base.SetstringAsString(ColumnNames.Detail_Type, value);
			}
		}

		public virtual string s_Detail_Difference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Difference) ? string.Empty : base.GetdoubleAsString(ColumnNames.Detail_Difference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Difference);
				else
					this.Detail_Difference = base.SetdoubleAsString(ColumnNames.Detail_Difference, value);
			}
		}

		public virtual string s_Pay_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Price) ? string.Empty : base.GetdoubleAsString(ColumnNames.Pay_Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Price);
				else
					this.Pay_Price = base.SetdoubleAsString(ColumnNames.Pay_Price, value);
			}
		}

		public virtual string s_Detail_Total
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Total) ? string.Empty : base.GetdoubleAsString(ColumnNames.Detail_Total);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Total);
				else
					this.Detail_Total = base.SetdoubleAsString(ColumnNames.Detail_Total, value);
			}
		}

		public virtual string s_Detail_TotalGood
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_TotalGood) ? string.Empty : base.GetdoubleAsString(ColumnNames.Detail_TotalGood);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_TotalGood);
				else
					this.Detail_TotalGood = base.SetdoubleAsString(ColumnNames.Detail_TotalGood, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Review_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Review_Date, Parameters.Review_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Review_Title
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Review_Title, Parameters.Review_Title);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Review_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Review_Details, Parameters.Review_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Summary_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Summary_ID, Parameters.Summary_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Review_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Review_Id, Parameters.Review_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_TraidName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Title_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title_Id, Parameters.Title_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Program_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Program_Count, Parameters.Program_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Entry_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Entry_Count, Parameters.Entry_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Type, Parameters.Detail_Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Difference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Difference, Parameters.Detail_Difference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Price, Parameters.Pay_Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Total
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Total, Parameters.Detail_Total);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_TotalGood
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_TotalGood, Parameters.Detail_TotalGood);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Review_Date
		    {
				get
		        {
					if(_Review_Date_W == null)
	        	    {
						_Review_Date_W = TearOff.Review_Date;
					}
					return _Review_Date_W;
				}
			}

			public WhereParameter Review_Title
		    {
				get
		        {
					if(_Review_Title_W == null)
	        	    {
						_Review_Title_W = TearOff.Review_Title;
					}
					return _Review_Title_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Review_Details
		    {
				get
		        {
					if(_Review_Details_W == null)
	        	    {
						_Review_Details_W = TearOff.Review_Details;
					}
					return _Review_Details_W;
				}
			}

			public WhereParameter Summary_ID
		    {
				get
		        {
					if(_Summary_ID_W == null)
	        	    {
						_Summary_ID_W = TearOff.Summary_ID;
					}
					return _Summary_ID_W;
				}
			}

			public WhereParameter Review_Id
		    {
				get
		        {
					if(_Review_Id_W == null)
	        	    {
						_Review_Id_W = TearOff.Review_Id;
					}
					return _Review_Id_W;
				}
			}

			public WhereParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public WhereParameter Title_Id
		    {
				get
		        {
					if(_Title_Id_W == null)
	        	    {
						_Title_Id_W = TearOff.Title_Id;
					}
					return _Title_Id_W;
				}
			}

			public WhereParameter Program_Count
		    {
				get
		        {
					if(_Program_Count_W == null)
	        	    {
						_Program_Count_W = TearOff.Program_Count;
					}
					return _Program_Count_W;
				}
			}

			public WhereParameter Entry_Count
		    {
				get
		        {
					if(_Entry_Count_W == null)
	        	    {
						_Entry_Count_W = TearOff.Entry_Count;
					}
					return _Entry_Count_W;
				}
			}

			public WhereParameter Detail_Type
		    {
				get
		        {
					if(_Detail_Type_W == null)
	        	    {
						_Detail_Type_W = TearOff.Detail_Type;
					}
					return _Detail_Type_W;
				}
			}

			public WhereParameter Detail_Difference
		    {
				get
		        {
					if(_Detail_Difference_W == null)
	        	    {
						_Detail_Difference_W = TearOff.Detail_Difference;
					}
					return _Detail_Difference_W;
				}
			}

			public WhereParameter Pay_Price
		    {
				get
		        {
					if(_Pay_Price_W == null)
	        	    {
						_Pay_Price_W = TearOff.Pay_Price;
					}
					return _Pay_Price_W;
				}
			}

			public WhereParameter Detail_Total
		    {
				get
		        {
					if(_Detail_Total_W == null)
	        	    {
						_Detail_Total_W = TearOff.Detail_Total;
					}
					return _Detail_Total_W;
				}
			}

			public WhereParameter Detail_TotalGood
		    {
				get
		        {
					if(_Detail_TotalGood_W == null)
	        	    {
						_Detail_TotalGood_W = TearOff.Detail_TotalGood;
					}
					return _Detail_TotalGood_W;
				}
			}

			private WhereParameter _Review_Date_W = null;
			private WhereParameter _Review_Title_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Review_Details_W = null;
			private WhereParameter _Summary_ID_W = null;
			private WhereParameter _Review_Id_W = null;
			private WhereParameter _Good_TraidName_W = null;
			private WhereParameter _Title_Id_W = null;
			private WhereParameter _Program_Count_W = null;
			private WhereParameter _Entry_Count_W = null;
			private WhereParameter _Detail_Type_W = null;
			private WhereParameter _Detail_Difference_W = null;
			private WhereParameter _Pay_Price_W = null;
			private WhereParameter _Detail_Total_W = null;
			private WhereParameter _Detail_TotalGood_W = null;

			public void WhereClauseReset()
			{
				_Review_Date_W = null;
				_Review_Title_W = null;
				_User_Id_W = null;
				_Review_Details_W = null;
				_Summary_ID_W = null;
				_Review_Id_W = null;
				_Good_TraidName_W = null;
				_Title_Id_W = null;
				_Program_Count_W = null;
				_Entry_Count_W = null;
				_Detail_Type_W = null;
				_Detail_Difference_W = null;
				_Pay_Price_W = null;
				_Detail_Total_W = null;
				_Detail_TotalGood_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Review_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Review_Date, Parameters.Review_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Review_Title
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Review_Title, Parameters.Review_Title);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Review_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Review_Details, Parameters.Review_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Summary_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Summary_ID, Parameters.Summary_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Review_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Review_Id, Parameters.Review_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_TraidName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Title_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title_Id, Parameters.Title_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Program_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Program_Count, Parameters.Program_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Entry_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Entry_Count, Parameters.Entry_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Type, Parameters.Detail_Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Difference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Difference, Parameters.Detail_Difference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Price, Parameters.Pay_Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Total
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Total, Parameters.Detail_Total);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_TotalGood
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_TotalGood, Parameters.Detail_TotalGood);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Review_Date
		    {
				get
		        {
					if(_Review_Date_W == null)
	        	    {
						_Review_Date_W = TearOff.Review_Date;
					}
					return _Review_Date_W;
				}
			}

			public AggregateParameter Review_Title
		    {
				get
		        {
					if(_Review_Title_W == null)
	        	    {
						_Review_Title_W = TearOff.Review_Title;
					}
					return _Review_Title_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Review_Details
		    {
				get
		        {
					if(_Review_Details_W == null)
	        	    {
						_Review_Details_W = TearOff.Review_Details;
					}
					return _Review_Details_W;
				}
			}

			public AggregateParameter Summary_ID
		    {
				get
		        {
					if(_Summary_ID_W == null)
	        	    {
						_Summary_ID_W = TearOff.Summary_ID;
					}
					return _Summary_ID_W;
				}
			}

			public AggregateParameter Review_Id
		    {
				get
		        {
					if(_Review_Id_W == null)
	        	    {
						_Review_Id_W = TearOff.Review_Id;
					}
					return _Review_Id_W;
				}
			}

			public AggregateParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public AggregateParameter Title_Id
		    {
				get
		        {
					if(_Title_Id_W == null)
	        	    {
						_Title_Id_W = TearOff.Title_Id;
					}
					return _Title_Id_W;
				}
			}

			public AggregateParameter Program_Count
		    {
				get
		        {
					if(_Program_Count_W == null)
	        	    {
						_Program_Count_W = TearOff.Program_Count;
					}
					return _Program_Count_W;
				}
			}

			public AggregateParameter Entry_Count
		    {
				get
		        {
					if(_Entry_Count_W == null)
	        	    {
						_Entry_Count_W = TearOff.Entry_Count;
					}
					return _Entry_Count_W;
				}
			}

			public AggregateParameter Detail_Type
		    {
				get
		        {
					if(_Detail_Type_W == null)
	        	    {
						_Detail_Type_W = TearOff.Detail_Type;
					}
					return _Detail_Type_W;
				}
			}

			public AggregateParameter Detail_Difference
		    {
				get
		        {
					if(_Detail_Difference_W == null)
	        	    {
						_Detail_Difference_W = TearOff.Detail_Difference;
					}
					return _Detail_Difference_W;
				}
			}

			public AggregateParameter Pay_Price
		    {
				get
		        {
					if(_Pay_Price_W == null)
	        	    {
						_Pay_Price_W = TearOff.Pay_Price;
					}
					return _Pay_Price_W;
				}
			}

			public AggregateParameter Detail_Total
		    {
				get
		        {
					if(_Detail_Total_W == null)
	        	    {
						_Detail_Total_W = TearOff.Detail_Total;
					}
					return _Detail_Total_W;
				}
			}

			public AggregateParameter Detail_TotalGood
		    {
				get
		        {
					if(_Detail_TotalGood_W == null)
	        	    {
						_Detail_TotalGood_W = TearOff.Detail_TotalGood;
					}
					return _Detail_TotalGood_W;
				}
			}

			private AggregateParameter _Review_Date_W = null;
			private AggregateParameter _Review_Title_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Review_Details_W = null;
			private AggregateParameter _Summary_ID_W = null;
			private AggregateParameter _Review_Id_W = null;
			private AggregateParameter _Good_TraidName_W = null;
			private AggregateParameter _Title_Id_W = null;
			private AggregateParameter _Program_Count_W = null;
			private AggregateParameter _Entry_Count_W = null;
			private AggregateParameter _Detail_Type_W = null;
			private AggregateParameter _Detail_Difference_W = null;
			private AggregateParameter _Pay_Price_W = null;
			private AggregateParameter _Detail_Total_W = null;
			private AggregateParameter _Detail_TotalGood_W = null;

			public void AggregateClauseReset()
			{
				_Review_Date_W = null;
				_Review_Title_W = null;
				_User_Id_W = null;
				_Review_Details_W = null;
				_Summary_ID_W = null;
				_Review_Id_W = null;
				_Good_TraidName_W = null;
				_Title_Id_W = null;
				_Program_Count_W = null;
				_Entry_Count_W = null;
				_Detail_Type_W = null;
				_Detail_Difference_W = null;
				_Pay_Price_W = null;
				_Detail_Total_W = null;
				_Detail_TotalGood_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
