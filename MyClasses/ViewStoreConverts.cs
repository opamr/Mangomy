/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewStoreConverts : SqlClientEntity
	{
		public ViewStoreConverts()
		{
			this.QuerySource = "ViewStoreConverts";
			this.MappingName = "ViewStoreConverts";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Convert_ID
			{
				get
				{
					return new SqlParameter("@Convert_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Convert_Date
			{
				get
				{
					return new SqlParameter("@Convert_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Convert_From
			{
				get
				{
					return new SqlParameter("@Convert_From", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Convert_To
			{
				get
				{
					return new SqlParameter("@Convert_To", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromStore
			{
				get
				{
					return new SqlParameter("@FromStore", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ToStore
			{
				get
				{
					return new SqlParameter("@ToStore", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter User_Name
			{
				get
				{
					return new SqlParameter("@User_Name", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Convert_ID = "Convert_ID";
            public const string Convert_Date = "Convert_Date";
            public const string Convert_From = "Convert_From";
            public const string Convert_To = "Convert_To";
            public const string User_Id = "User_Id";
            public const string FromStore = "FromStore";
            public const string ToStore = "ToStore";
            public const string User_Name = "User_Name";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Convert_ID] = ViewStoreConverts.PropertyNames.Convert_ID;
					ht[Convert_Date] = ViewStoreConverts.PropertyNames.Convert_Date;
					ht[Convert_From] = ViewStoreConverts.PropertyNames.Convert_From;
					ht[Convert_To] = ViewStoreConverts.PropertyNames.Convert_To;
					ht[User_Id] = ViewStoreConverts.PropertyNames.User_Id;
					ht[FromStore] = ViewStoreConverts.PropertyNames.FromStore;
					ht[ToStore] = ViewStoreConverts.PropertyNames.ToStore;
					ht[User_Name] = ViewStoreConverts.PropertyNames.User_Name;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Convert_ID = "Convert_ID";
            public const string Convert_Date = "Convert_Date";
            public const string Convert_From = "Convert_From";
            public const string Convert_To = "Convert_To";
            public const string User_Id = "User_Id";
            public const string FromStore = "FromStore";
            public const string ToStore = "ToStore";
            public const string User_Name = "User_Name";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Convert_ID] = ViewStoreConverts.ColumnNames.Convert_ID;
					ht[Convert_Date] = ViewStoreConverts.ColumnNames.Convert_Date;
					ht[Convert_From] = ViewStoreConverts.ColumnNames.Convert_From;
					ht[Convert_To] = ViewStoreConverts.ColumnNames.Convert_To;
					ht[User_Id] = ViewStoreConverts.ColumnNames.User_Id;
					ht[FromStore] = ViewStoreConverts.ColumnNames.FromStore;
					ht[ToStore] = ViewStoreConverts.ColumnNames.ToStore;
					ht[User_Name] = ViewStoreConverts.ColumnNames.User_Name;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Convert_ID = "s_Convert_ID";
            public const string Convert_Date = "s_Convert_Date";
            public const string Convert_From = "s_Convert_From";
            public const string Convert_To = "s_Convert_To";
            public const string User_Id = "s_User_Id";
            public const string FromStore = "s_FromStore";
            public const string ToStore = "s_ToStore";
            public const string User_Name = "s_User_Name";

		}
		#endregion	
		
		#region Properties
			public virtual int Convert_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_ID, value);
			}
		}

		public virtual DateTime Convert_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Convert_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Convert_Date, value);
			}
		}

		public virtual int Convert_From
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_From);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_From, value);
			}
		}

		public virtual int Convert_To
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_To);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_To, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual string FromStore
	    {
			get
	        {
				return base.Getstring(ColumnNames.FromStore);
			}
			set
	        {
				base.Setstring(ColumnNames.FromStore, value);
			}
		}

		public virtual string ToStore
	    {
			get
	        {
				return base.Getstring(ColumnNames.ToStore);
			}
			set
	        {
				base.Setstring(ColumnNames.ToStore, value);
			}
		}

		public virtual string User_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.User_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.User_Name, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Convert_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_ID) ? string.Empty : base.GetintAsString(ColumnNames.Convert_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_ID);
				else
					this.Convert_ID = base.SetintAsString(ColumnNames.Convert_ID, value);
			}
		}

		public virtual string s_Convert_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Convert_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_Date);
				else
					this.Convert_Date = base.SetDateTimeAsString(ColumnNames.Convert_Date, value);
			}
		}

		public virtual string s_Convert_From
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_From) ? string.Empty : base.GetintAsString(ColumnNames.Convert_From);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_From);
				else
					this.Convert_From = base.SetintAsString(ColumnNames.Convert_From, value);
			}
		}

		public virtual string s_Convert_To
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_To) ? string.Empty : base.GetintAsString(ColumnNames.Convert_To);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_To);
				else
					this.Convert_To = base.SetintAsString(ColumnNames.Convert_To, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_FromStore
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromStore) ? string.Empty : base.GetstringAsString(ColumnNames.FromStore);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromStore);
				else
					this.FromStore = base.SetstringAsString(ColumnNames.FromStore, value);
			}
		}

		public virtual string s_ToStore
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToStore) ? string.Empty : base.GetstringAsString(ColumnNames.ToStore);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToStore);
				else
					this.ToStore = base.SetstringAsString(ColumnNames.ToStore, value);
			}
		}

		public virtual string s_User_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Name) ? string.Empty : base.GetstringAsString(ColumnNames.User_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Name);
				else
					this.User_Name = base.SetstringAsString(ColumnNames.User_Name, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Convert_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_ID, Parameters.Convert_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_Date, Parameters.Convert_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_From
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_From, Parameters.Convert_From);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_To
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_To, Parameters.Convert_To);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromStore
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromStore, Parameters.FromStore);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToStore
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToStore, Parameters.ToStore);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Convert_ID
		    {
				get
		        {
					if(_Convert_ID_W == null)
	        	    {
						_Convert_ID_W = TearOff.Convert_ID;
					}
					return _Convert_ID_W;
				}
			}

			public WhereParameter Convert_Date
		    {
				get
		        {
					if(_Convert_Date_W == null)
	        	    {
						_Convert_Date_W = TearOff.Convert_Date;
					}
					return _Convert_Date_W;
				}
			}

			public WhereParameter Convert_From
		    {
				get
		        {
					if(_Convert_From_W == null)
	        	    {
						_Convert_From_W = TearOff.Convert_From;
					}
					return _Convert_From_W;
				}
			}

			public WhereParameter Convert_To
		    {
				get
		        {
					if(_Convert_To_W == null)
	        	    {
						_Convert_To_W = TearOff.Convert_To;
					}
					return _Convert_To_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter FromStore
		    {
				get
		        {
					if(_FromStore_W == null)
	        	    {
						_FromStore_W = TearOff.FromStore;
					}
					return _FromStore_W;
				}
			}

			public WhereParameter ToStore
		    {
				get
		        {
					if(_ToStore_W == null)
	        	    {
						_ToStore_W = TearOff.ToStore;
					}
					return _ToStore_W;
				}
			}

			public WhereParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			private WhereParameter _Convert_ID_W = null;
			private WhereParameter _Convert_Date_W = null;
			private WhereParameter _Convert_From_W = null;
			private WhereParameter _Convert_To_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _FromStore_W = null;
			private WhereParameter _ToStore_W = null;
			private WhereParameter _User_Name_W = null;

			public void WhereClauseReset()
			{
				_Convert_ID_W = null;
				_Convert_Date_W = null;
				_Convert_From_W = null;
				_Convert_To_W = null;
				_User_Id_W = null;
				_FromStore_W = null;
				_ToStore_W = null;
				_User_Name_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Convert_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_ID, Parameters.Convert_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_Date, Parameters.Convert_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_From
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_From, Parameters.Convert_From);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_To
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_To, Parameters.Convert_To);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromStore
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromStore, Parameters.FromStore);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToStore
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToStore, Parameters.ToStore);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Convert_ID
		    {
				get
		        {
					if(_Convert_ID_W == null)
	        	    {
						_Convert_ID_W = TearOff.Convert_ID;
					}
					return _Convert_ID_W;
				}
			}

			public AggregateParameter Convert_Date
		    {
				get
		        {
					if(_Convert_Date_W == null)
	        	    {
						_Convert_Date_W = TearOff.Convert_Date;
					}
					return _Convert_Date_W;
				}
			}

			public AggregateParameter Convert_From
		    {
				get
		        {
					if(_Convert_From_W == null)
	        	    {
						_Convert_From_W = TearOff.Convert_From;
					}
					return _Convert_From_W;
				}
			}

			public AggregateParameter Convert_To
		    {
				get
		        {
					if(_Convert_To_W == null)
	        	    {
						_Convert_To_W = TearOff.Convert_To;
					}
					return _Convert_To_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter FromStore
		    {
				get
		        {
					if(_FromStore_W == null)
	        	    {
						_FromStore_W = TearOff.FromStore;
					}
					return _FromStore_W;
				}
			}

			public AggregateParameter ToStore
		    {
				get
		        {
					if(_ToStore_W == null)
	        	    {
						_ToStore_W = TearOff.ToStore;
					}
					return _ToStore_W;
				}
			}

			public AggregateParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			private AggregateParameter _Convert_ID_W = null;
			private AggregateParameter _Convert_Date_W = null;
			private AggregateParameter _Convert_From_W = null;
			private AggregateParameter _Convert_To_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _FromStore_W = null;
			private AggregateParameter _ToStore_W = null;
			private AggregateParameter _User_Name_W = null;

			public void AggregateClauseReset()
			{
				_Convert_ID_W = null;
				_Convert_Date_W = null;
				_Convert_From_W = null;
				_Convert_To_W = null;
				_User_Id_W = null;
				_FromStore_W = null;
				_ToStore_W = null;
				_User_Name_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
