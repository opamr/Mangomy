
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblRentPayDetails : SqlClientEntity
	{
		public _TblRentPayDetails()
		{
			this.QuerySource = "TblRentPayDetails";
			this.MappingName = "TblRentPayDetails";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblRentPayDetailsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Detail_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Detail_ID, Detail_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblRentPayDetailsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Detail_ID
			{
				get
				{
					return new SqlParameter("@Detail_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Detail_Date
			{
				get
				{
					return new SqlParameter("@Detail_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Detail_Money
			{
				get
				{
					return new SqlParameter("@Detail_Money", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Detail_Details
			{
				get
				{
					return new SqlParameter("@Detail_Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Detail_Reciver
			{
				get
				{
					return new SqlParameter("@Detail_Reciver", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bank_Id
			{
				get
				{
					return new SqlParameter("@Bank_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Pay_Id
			{
				get
				{
					return new SqlParameter("@Pay_Id", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Detail_ID = "Detail_ID";
            public const string Detail_Date = "Detail_Date";
            public const string Detail_Money = "Detail_Money";
            public const string Detail_Details = "Detail_Details";
            public const string Detail_Reciver = "Detail_Reciver";
            public const string User_Id = "User_Id";
            public const string Bank_Id = "Bank_Id";
            public const string Pay_Id = "Pay_Id";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Detail_ID] = _TblRentPayDetails.PropertyNames.Detail_ID;
					ht[Detail_Date] = _TblRentPayDetails.PropertyNames.Detail_Date;
					ht[Detail_Money] = _TblRentPayDetails.PropertyNames.Detail_Money;
					ht[Detail_Details] = _TblRentPayDetails.PropertyNames.Detail_Details;
					ht[Detail_Reciver] = _TblRentPayDetails.PropertyNames.Detail_Reciver;
					ht[User_Id] = _TblRentPayDetails.PropertyNames.User_Id;
					ht[Bank_Id] = _TblRentPayDetails.PropertyNames.Bank_Id;
					ht[Pay_Id] = _TblRentPayDetails.PropertyNames.Pay_Id;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Detail_ID = "Detail_ID";
            public const string Detail_Date = "Detail_Date";
            public const string Detail_Money = "Detail_Money";
            public const string Detail_Details = "Detail_Details";
            public const string Detail_Reciver = "Detail_Reciver";
            public const string User_Id = "User_Id";
            public const string Bank_Id = "Bank_Id";
            public const string Pay_Id = "Pay_Id";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Detail_ID] = _TblRentPayDetails.ColumnNames.Detail_ID;
					ht[Detail_Date] = _TblRentPayDetails.ColumnNames.Detail_Date;
					ht[Detail_Money] = _TblRentPayDetails.ColumnNames.Detail_Money;
					ht[Detail_Details] = _TblRentPayDetails.ColumnNames.Detail_Details;
					ht[Detail_Reciver] = _TblRentPayDetails.ColumnNames.Detail_Reciver;
					ht[User_Id] = _TblRentPayDetails.ColumnNames.User_Id;
					ht[Bank_Id] = _TblRentPayDetails.ColumnNames.Bank_Id;
					ht[Pay_Id] = _TblRentPayDetails.ColumnNames.Pay_Id;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Detail_ID = "s_Detail_ID";
            public const string Detail_Date = "s_Detail_Date";
            public const string Detail_Money = "s_Detail_Money";
            public const string Detail_Details = "s_Detail_Details";
            public const string Detail_Reciver = "s_Detail_Reciver";
            public const string User_Id = "s_User_Id";
            public const string Bank_Id = "s_Bank_Id";
            public const string Pay_Id = "s_Pay_Id";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Detail_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Detail_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Detail_ID, value);
			}
		}

		public virtual DateTime Detail_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Detail_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Detail_Date, value);
			}
		}

		public virtual double Detail_Money
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Detail_Money);
			}
			set
	        {
				base.Setdouble(ColumnNames.Detail_Money, value);
			}
		}

		public virtual string Detail_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Detail_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Detail_Details, value);
			}
		}

		public virtual string Detail_Reciver
	    {
			get
	        {
				return base.Getstring(ColumnNames.Detail_Reciver);
			}
			set
	        {
				base.Setstring(ColumnNames.Detail_Reciver, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual int Bank_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Bank_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Bank_Id, value);
			}
		}

		public virtual int Pay_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Pay_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Pay_Id, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Detail_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_ID) ? string.Empty : base.GetintAsString(ColumnNames.Detail_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_ID);
				else
					this.Detail_ID = base.SetintAsString(ColumnNames.Detail_ID, value);
			}
		}

		public virtual string s_Detail_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Detail_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Date);
				else
					this.Detail_Date = base.SetDateTimeAsString(ColumnNames.Detail_Date, value);
			}
		}

		public virtual string s_Detail_Money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Money) ? string.Empty : base.GetdoubleAsString(ColumnNames.Detail_Money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Money);
				else
					this.Detail_Money = base.SetdoubleAsString(ColumnNames.Detail_Money, value);
			}
		}

		public virtual string s_Detail_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Detail_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Details);
				else
					this.Detail_Details = base.SetstringAsString(ColumnNames.Detail_Details, value);
			}
		}

		public virtual string s_Detail_Reciver
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Reciver) ? string.Empty : base.GetstringAsString(ColumnNames.Detail_Reciver);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Reciver);
				else
					this.Detail_Reciver = base.SetstringAsString(ColumnNames.Detail_Reciver, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Bank_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bank_Id) ? string.Empty : base.GetintAsString(ColumnNames.Bank_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bank_Id);
				else
					this.Bank_Id = base.SetintAsString(ColumnNames.Bank_Id, value);
			}
		}

		public virtual string s_Pay_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Id) ? string.Empty : base.GetintAsString(ColumnNames.Pay_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Id);
				else
					this.Pay_Id = base.SetintAsString(ColumnNames.Pay_Id, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Detail_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_ID, Parameters.Detail_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Date, Parameters.Detail_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Money, Parameters.Detail_Money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Details, Parameters.Detail_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Reciver
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Reciver, Parameters.Detail_Reciver);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bank_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Id, Parameters.Pay_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Detail_ID
		    {
				get
		        {
					if(_Detail_ID_W == null)
	        	    {
						_Detail_ID_W = TearOff.Detail_ID;
					}
					return _Detail_ID_W;
				}
			}

			public WhereParameter Detail_Date
		    {
				get
		        {
					if(_Detail_Date_W == null)
	        	    {
						_Detail_Date_W = TearOff.Detail_Date;
					}
					return _Detail_Date_W;
				}
			}

			public WhereParameter Detail_Money
		    {
				get
		        {
					if(_Detail_Money_W == null)
	        	    {
						_Detail_Money_W = TearOff.Detail_Money;
					}
					return _Detail_Money_W;
				}
			}

			public WhereParameter Detail_Details
		    {
				get
		        {
					if(_Detail_Details_W == null)
	        	    {
						_Detail_Details_W = TearOff.Detail_Details;
					}
					return _Detail_Details_W;
				}
			}

			public WhereParameter Detail_Reciver
		    {
				get
		        {
					if(_Detail_Reciver_W == null)
	        	    {
						_Detail_Reciver_W = TearOff.Detail_Reciver;
					}
					return _Detail_Reciver_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public WhereParameter Pay_Id
		    {
				get
		        {
					if(_Pay_Id_W == null)
	        	    {
						_Pay_Id_W = TearOff.Pay_Id;
					}
					return _Pay_Id_W;
				}
			}

			private WhereParameter _Detail_ID_W = null;
			private WhereParameter _Detail_Date_W = null;
			private WhereParameter _Detail_Money_W = null;
			private WhereParameter _Detail_Details_W = null;
			private WhereParameter _Detail_Reciver_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Bank_Id_W = null;
			private WhereParameter _Pay_Id_W = null;

			public void WhereClauseReset()
			{
				_Detail_ID_W = null;
				_Detail_Date_W = null;
				_Detail_Money_W = null;
				_Detail_Details_W = null;
				_Detail_Reciver_W = null;
				_User_Id_W = null;
				_Bank_Id_W = null;
				_Pay_Id_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Detail_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_ID, Parameters.Detail_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Date, Parameters.Detail_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Money, Parameters.Detail_Money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Details, Parameters.Detail_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Reciver
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Reciver, Parameters.Detail_Reciver);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bank_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Id, Parameters.Pay_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Detail_ID
		    {
				get
		        {
					if(_Detail_ID_W == null)
	        	    {
						_Detail_ID_W = TearOff.Detail_ID;
					}
					return _Detail_ID_W;
				}
			}

			public AggregateParameter Detail_Date
		    {
				get
		        {
					if(_Detail_Date_W == null)
	        	    {
						_Detail_Date_W = TearOff.Detail_Date;
					}
					return _Detail_Date_W;
				}
			}

			public AggregateParameter Detail_Money
		    {
				get
		        {
					if(_Detail_Money_W == null)
	        	    {
						_Detail_Money_W = TearOff.Detail_Money;
					}
					return _Detail_Money_W;
				}
			}

			public AggregateParameter Detail_Details
		    {
				get
		        {
					if(_Detail_Details_W == null)
	        	    {
						_Detail_Details_W = TearOff.Detail_Details;
					}
					return _Detail_Details_W;
				}
			}

			public AggregateParameter Detail_Reciver
		    {
				get
		        {
					if(_Detail_Reciver_W == null)
	        	    {
						_Detail_Reciver_W = TearOff.Detail_Reciver;
					}
					return _Detail_Reciver_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public AggregateParameter Pay_Id
		    {
				get
		        {
					if(_Pay_Id_W == null)
	        	    {
						_Pay_Id_W = TearOff.Pay_Id;
					}
					return _Pay_Id_W;
				}
			}

			private AggregateParameter _Detail_ID_W = null;
			private AggregateParameter _Detail_Date_W = null;
			private AggregateParameter _Detail_Money_W = null;
			private AggregateParameter _Detail_Details_W = null;
			private AggregateParameter _Detail_Reciver_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Bank_Id_W = null;
			private AggregateParameter _Pay_Id_W = null;

			public void AggregateClauseReset()
			{
				_Detail_ID_W = null;
				_Detail_Date_W = null;
				_Detail_Money_W = null;
				_Detail_Details_W = null;
				_Detail_Reciver_W = null;
				_User_Id_W = null;
				_Bank_Id_W = null;
				_Pay_Id_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentPayDetailsInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentPayDetailsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentPayDetailsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Detail_ID);
			p.SourceColumn = ColumnNames.Detail_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Detail_ID);
			p.SourceColumn = ColumnNames.Detail_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Detail_Date);
			p.SourceColumn = ColumnNames.Detail_Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Detail_Money);
			p.SourceColumn = ColumnNames.Detail_Money;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Detail_Details);
			p.SourceColumn = ColumnNames.Detail_Details;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Detail_Reciver);
			p.SourceColumn = ColumnNames.Detail_Reciver;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.User_Id);
			p.SourceColumn = ColumnNames.User_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bank_Id);
			p.SourceColumn = ColumnNames.Bank_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Id);
			p.SourceColumn = ColumnNames.Pay_Id;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
