/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewStoreConvertDetails : SqlClientEntity
	{
		public ViewStoreConvertDetails()
		{
			this.QuerySource = "ViewStoreConvertDetails";
			this.MappingName = "ViewStoreConvertDetails";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Detail_ID
			{
				get
				{
					return new SqlParameter("@Detail_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Barcode_Id
			{
				get
				{
					return new SqlParameter("@Barcode_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Detail_Count
			{
				get
				{
					return new SqlParameter("@Detail_Count", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Convert_Id
			{
				get
				{
					return new SqlParameter("@Convert_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Convert_Date
			{
				get
				{
					return new SqlParameter("@Convert_Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Convert_From
			{
				get
				{
					return new SqlParameter("@Convert_From", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Convert_To
			{
				get
				{
					return new SqlParameter("@Convert_To", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StoreConvertFrom
			{
				get
				{
					return new SqlParameter("@StoreConvertFrom", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Good_TraidName
			{
				get
				{
					return new SqlParameter("@Good_TraidName", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter StoreConvertTo
			{
				get
				{
					return new SqlParameter("@StoreConvertTo", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Unit
			{
				get
				{
					return new SqlParameter("@Barcode_Unit", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_PayPrice
			{
				get
				{
					return new SqlParameter("@Barcode_PayPrice", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Code
			{
				get
				{
					return new SqlParameter("@Barcode_Code", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Count
			{
				get
				{
					return new SqlParameter("@Barcode_Count", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Titel_Id
			{
				get
				{
					return new SqlParameter("@Titel_Id", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Detail_ID = "Detail_ID";
            public const string Barcode_Id = "Barcode_Id";
            public const string Detail_Count = "Detail_Count";
            public const string Convert_Id = "Convert_Id";
            public const string Convert_Date = "Convert_Date";
            public const string Convert_From = "Convert_From";
            public const string Convert_To = "Convert_To";
            public const string StoreConvertFrom = "StoreConvertFrom";
            public const string Good_TraidName = "Good_TraidName";
            public const string StoreConvertTo = "StoreConvertTo";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_Code = "Barcode_Code";
            public const string Barcode_Count = "Barcode_Count";
            public const string Titel_Id = "Titel_Id";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Detail_ID] = ViewStoreConvertDetails.PropertyNames.Detail_ID;
					ht[Barcode_Id] = ViewStoreConvertDetails.PropertyNames.Barcode_Id;
					ht[Detail_Count] = ViewStoreConvertDetails.PropertyNames.Detail_Count;
					ht[Convert_Id] = ViewStoreConvertDetails.PropertyNames.Convert_Id;
					ht[Convert_Date] = ViewStoreConvertDetails.PropertyNames.Convert_Date;
					ht[Convert_From] = ViewStoreConvertDetails.PropertyNames.Convert_From;
					ht[Convert_To] = ViewStoreConvertDetails.PropertyNames.Convert_To;
					ht[StoreConvertFrom] = ViewStoreConvertDetails.PropertyNames.StoreConvertFrom;
					ht[Good_TraidName] = ViewStoreConvertDetails.PropertyNames.Good_TraidName;
					ht[StoreConvertTo] = ViewStoreConvertDetails.PropertyNames.StoreConvertTo;
					ht[Barcode_Unit] = ViewStoreConvertDetails.PropertyNames.Barcode_Unit;
					ht[Barcode_PayPrice] = ViewStoreConvertDetails.PropertyNames.Barcode_PayPrice;
					ht[Barcode_Code] = ViewStoreConvertDetails.PropertyNames.Barcode_Code;
					ht[Barcode_Count] = ViewStoreConvertDetails.PropertyNames.Barcode_Count;
					ht[Titel_Id] = ViewStoreConvertDetails.PropertyNames.Titel_Id;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Detail_ID = "Detail_ID";
            public const string Barcode_Id = "Barcode_Id";
            public const string Detail_Count = "Detail_Count";
            public const string Convert_Id = "Convert_Id";
            public const string Convert_Date = "Convert_Date";
            public const string Convert_From = "Convert_From";
            public const string Convert_To = "Convert_To";
            public const string StoreConvertFrom = "StoreConvertFrom";
            public const string Good_TraidName = "Good_TraidName";
            public const string StoreConvertTo = "StoreConvertTo";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_Code = "Barcode_Code";
            public const string Barcode_Count = "Barcode_Count";
            public const string Titel_Id = "Titel_Id";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Detail_ID] = ViewStoreConvertDetails.ColumnNames.Detail_ID;
					ht[Barcode_Id] = ViewStoreConvertDetails.ColumnNames.Barcode_Id;
					ht[Detail_Count] = ViewStoreConvertDetails.ColumnNames.Detail_Count;
					ht[Convert_Id] = ViewStoreConvertDetails.ColumnNames.Convert_Id;
					ht[Convert_Date] = ViewStoreConvertDetails.ColumnNames.Convert_Date;
					ht[Convert_From] = ViewStoreConvertDetails.ColumnNames.Convert_From;
					ht[Convert_To] = ViewStoreConvertDetails.ColumnNames.Convert_To;
					ht[StoreConvertFrom] = ViewStoreConvertDetails.ColumnNames.StoreConvertFrom;
					ht[Good_TraidName] = ViewStoreConvertDetails.ColumnNames.Good_TraidName;
					ht[StoreConvertTo] = ViewStoreConvertDetails.ColumnNames.StoreConvertTo;
					ht[Barcode_Unit] = ViewStoreConvertDetails.ColumnNames.Barcode_Unit;
					ht[Barcode_PayPrice] = ViewStoreConvertDetails.ColumnNames.Barcode_PayPrice;
					ht[Barcode_Code] = ViewStoreConvertDetails.ColumnNames.Barcode_Code;
					ht[Barcode_Count] = ViewStoreConvertDetails.ColumnNames.Barcode_Count;
					ht[Titel_Id] = ViewStoreConvertDetails.ColumnNames.Titel_Id;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Detail_ID = "s_Detail_ID";
            public const string Barcode_Id = "s_Barcode_Id";
            public const string Detail_Count = "s_Detail_Count";
            public const string Convert_Id = "s_Convert_Id";
            public const string Convert_Date = "s_Convert_Date";
            public const string Convert_From = "s_Convert_From";
            public const string Convert_To = "s_Convert_To";
            public const string StoreConvertFrom = "s_StoreConvertFrom";
            public const string Good_TraidName = "s_Good_TraidName";
            public const string StoreConvertTo = "s_StoreConvertTo";
            public const string Barcode_Unit = "s_Barcode_Unit";
            public const string Barcode_PayPrice = "s_Barcode_PayPrice";
            public const string Barcode_Code = "s_Barcode_Code";
            public const string Barcode_Count = "s_Barcode_Count";
            public const string Titel_Id = "s_Titel_Id";

		}
		#endregion	
		
		#region Properties
			public virtual int Detail_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Detail_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Detail_ID, value);
			}
		}

		public virtual int Barcode_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Barcode_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Barcode_Id, value);
			}
		}

		public virtual double Detail_Count
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Detail_Count);
			}
			set
	        {
				base.Setdouble(ColumnNames.Detail_Count, value);
			}
		}

		public virtual int Convert_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_Id, value);
			}
		}

		public virtual DateTime Convert_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Convert_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Convert_Date, value);
			}
		}

		public virtual int Convert_From
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_From);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_From, value);
			}
		}

		public virtual int Convert_To
	    {
			get
	        {
				return base.Getint(ColumnNames.Convert_To);
			}
			set
	        {
				base.Setint(ColumnNames.Convert_To, value);
			}
		}

		public virtual string StoreConvertFrom
	    {
			get
	        {
				return base.Getstring(ColumnNames.StoreConvertFrom);
			}
			set
	        {
				base.Setstring(ColumnNames.StoreConvertFrom, value);
			}
		}

		public virtual string Good_TraidName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Good_TraidName);
			}
			set
	        {
				base.Setstring(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual string StoreConvertTo
	    {
			get
	        {
				return base.Getstring(ColumnNames.StoreConvertTo);
			}
			set
	        {
				base.Setstring(ColumnNames.StoreConvertTo, value);
			}
		}

		public virtual string Barcode_Unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string Barcode_PayPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string Barcode_Code
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Code);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string Barcode_Count
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Count);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual int Titel_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Titel_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Titel_Id, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Detail_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_ID) ? string.Empty : base.GetintAsString(ColumnNames.Detail_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_ID);
				else
					this.Detail_ID = base.SetintAsString(ColumnNames.Detail_ID, value);
			}
		}

		public virtual string s_Barcode_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Id) ? string.Empty : base.GetintAsString(ColumnNames.Barcode_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Id);
				else
					this.Barcode_Id = base.SetintAsString(ColumnNames.Barcode_Id, value);
			}
		}

		public virtual string s_Detail_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Detail_Count) ? string.Empty : base.GetdoubleAsString(ColumnNames.Detail_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Detail_Count);
				else
					this.Detail_Count = base.SetdoubleAsString(ColumnNames.Detail_Count, value);
			}
		}

		public virtual string s_Convert_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_Id) ? string.Empty : base.GetintAsString(ColumnNames.Convert_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_Id);
				else
					this.Convert_Id = base.SetintAsString(ColumnNames.Convert_Id, value);
			}
		}

		public virtual string s_Convert_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Convert_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_Date);
				else
					this.Convert_Date = base.SetDateTimeAsString(ColumnNames.Convert_Date, value);
			}
		}

		public virtual string s_Convert_From
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_From) ? string.Empty : base.GetintAsString(ColumnNames.Convert_From);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_From);
				else
					this.Convert_From = base.SetintAsString(ColumnNames.Convert_From, value);
			}
		}

		public virtual string s_Convert_To
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Convert_To) ? string.Empty : base.GetintAsString(ColumnNames.Convert_To);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Convert_To);
				else
					this.Convert_To = base.SetintAsString(ColumnNames.Convert_To, value);
			}
		}

		public virtual string s_StoreConvertFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreConvertFrom) ? string.Empty : base.GetstringAsString(ColumnNames.StoreConvertFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreConvertFrom);
				else
					this.StoreConvertFrom = base.SetstringAsString(ColumnNames.StoreConvertFrom, value);
			}
		}

		public virtual string s_Good_TraidName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_TraidName) ? string.Empty : base.GetstringAsString(ColumnNames.Good_TraidName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_TraidName);
				else
					this.Good_TraidName = base.SetstringAsString(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual string s_StoreConvertTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StoreConvertTo) ? string.Empty : base.GetstringAsString(ColumnNames.StoreConvertTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StoreConvertTo);
				else
					this.StoreConvertTo = base.SetstringAsString(ColumnNames.StoreConvertTo, value);
			}
		}

		public virtual string s_Barcode_Unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Unit) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Unit);
				else
					this.Barcode_Unit = base.SetstringAsString(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string s_Barcode_PayPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_PayPrice) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_PayPrice);
				else
					this.Barcode_PayPrice = base.SetstringAsString(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string s_Barcode_Code
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Code) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Code);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Code);
				else
					this.Barcode_Code = base.SetstringAsString(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string s_Barcode_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Count) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Count);
				else
					this.Barcode_Count = base.SetstringAsString(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual string s_Titel_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Titel_Id) ? string.Empty : base.GetintAsString(ColumnNames.Titel_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Titel_Id);
				else
					this.Titel_Id = base.SetintAsString(ColumnNames.Titel_Id, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Detail_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_ID, Parameters.Detail_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Id, Parameters.Barcode_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Detail_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Detail_Count, Parameters.Detail_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_Id, Parameters.Convert_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_Date, Parameters.Convert_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_From
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_From, Parameters.Convert_From);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Convert_To
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Convert_To, Parameters.Convert_To);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreConvertFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreConvertFrom, Parameters.StoreConvertFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_TraidName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StoreConvertTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StoreConvertTo, Parameters.StoreConvertTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_PayPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Code
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Titel_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Detail_ID
		    {
				get
		        {
					if(_Detail_ID_W == null)
	        	    {
						_Detail_ID_W = TearOff.Detail_ID;
					}
					return _Detail_ID_W;
				}
			}

			public WhereParameter Barcode_Id
		    {
				get
		        {
					if(_Barcode_Id_W == null)
	        	    {
						_Barcode_Id_W = TearOff.Barcode_Id;
					}
					return _Barcode_Id_W;
				}
			}

			public WhereParameter Detail_Count
		    {
				get
		        {
					if(_Detail_Count_W == null)
	        	    {
						_Detail_Count_W = TearOff.Detail_Count;
					}
					return _Detail_Count_W;
				}
			}

			public WhereParameter Convert_Id
		    {
				get
		        {
					if(_Convert_Id_W == null)
	        	    {
						_Convert_Id_W = TearOff.Convert_Id;
					}
					return _Convert_Id_W;
				}
			}

			public WhereParameter Convert_Date
		    {
				get
		        {
					if(_Convert_Date_W == null)
	        	    {
						_Convert_Date_W = TearOff.Convert_Date;
					}
					return _Convert_Date_W;
				}
			}

			public WhereParameter Convert_From
		    {
				get
		        {
					if(_Convert_From_W == null)
	        	    {
						_Convert_From_W = TearOff.Convert_From;
					}
					return _Convert_From_W;
				}
			}

			public WhereParameter Convert_To
		    {
				get
		        {
					if(_Convert_To_W == null)
	        	    {
						_Convert_To_W = TearOff.Convert_To;
					}
					return _Convert_To_W;
				}
			}

			public WhereParameter StoreConvertFrom
		    {
				get
		        {
					if(_StoreConvertFrom_W == null)
	        	    {
						_StoreConvertFrom_W = TearOff.StoreConvertFrom;
					}
					return _StoreConvertFrom_W;
				}
			}

			public WhereParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public WhereParameter StoreConvertTo
		    {
				get
		        {
					if(_StoreConvertTo_W == null)
	        	    {
						_StoreConvertTo_W = TearOff.StoreConvertTo;
					}
					return _StoreConvertTo_W;
				}
			}

			public WhereParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public WhereParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public WhereParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public WhereParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public WhereParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			private WhereParameter _Detail_ID_W = null;
			private WhereParameter _Barcode_Id_W = null;
			private WhereParameter _Detail_Count_W = null;
			private WhereParameter _Convert_Id_W = null;
			private WhereParameter _Convert_Date_W = null;
			private WhereParameter _Convert_From_W = null;
			private WhereParameter _Convert_To_W = null;
			private WhereParameter _StoreConvertFrom_W = null;
			private WhereParameter _Good_TraidName_W = null;
			private WhereParameter _StoreConvertTo_W = null;
			private WhereParameter _Barcode_Unit_W = null;
			private WhereParameter _Barcode_PayPrice_W = null;
			private WhereParameter _Barcode_Code_W = null;
			private WhereParameter _Barcode_Count_W = null;
			private WhereParameter _Titel_Id_W = null;

			public void WhereClauseReset()
			{
				_Detail_ID_W = null;
				_Barcode_Id_W = null;
				_Detail_Count_W = null;
				_Convert_Id_W = null;
				_Convert_Date_W = null;
				_Convert_From_W = null;
				_Convert_To_W = null;
				_StoreConvertFrom_W = null;
				_Good_TraidName_W = null;
				_StoreConvertTo_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_Code_W = null;
				_Barcode_Count_W = null;
				_Titel_Id_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Detail_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_ID, Parameters.Detail_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Id, Parameters.Barcode_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Detail_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Detail_Count, Parameters.Detail_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_Id, Parameters.Convert_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_Date, Parameters.Convert_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_From
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_From, Parameters.Convert_From);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Convert_To
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Convert_To, Parameters.Convert_To);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreConvertFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreConvertFrom, Parameters.StoreConvertFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_TraidName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StoreConvertTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StoreConvertTo, Parameters.StoreConvertTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_PayPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Code
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Titel_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Detail_ID
		    {
				get
		        {
					if(_Detail_ID_W == null)
	        	    {
						_Detail_ID_W = TearOff.Detail_ID;
					}
					return _Detail_ID_W;
				}
			}

			public AggregateParameter Barcode_Id
		    {
				get
		        {
					if(_Barcode_Id_W == null)
	        	    {
						_Barcode_Id_W = TearOff.Barcode_Id;
					}
					return _Barcode_Id_W;
				}
			}

			public AggregateParameter Detail_Count
		    {
				get
		        {
					if(_Detail_Count_W == null)
	        	    {
						_Detail_Count_W = TearOff.Detail_Count;
					}
					return _Detail_Count_W;
				}
			}

			public AggregateParameter Convert_Id
		    {
				get
		        {
					if(_Convert_Id_W == null)
	        	    {
						_Convert_Id_W = TearOff.Convert_Id;
					}
					return _Convert_Id_W;
				}
			}

			public AggregateParameter Convert_Date
		    {
				get
		        {
					if(_Convert_Date_W == null)
	        	    {
						_Convert_Date_W = TearOff.Convert_Date;
					}
					return _Convert_Date_W;
				}
			}

			public AggregateParameter Convert_From
		    {
				get
		        {
					if(_Convert_From_W == null)
	        	    {
						_Convert_From_W = TearOff.Convert_From;
					}
					return _Convert_From_W;
				}
			}

			public AggregateParameter Convert_To
		    {
				get
		        {
					if(_Convert_To_W == null)
	        	    {
						_Convert_To_W = TearOff.Convert_To;
					}
					return _Convert_To_W;
				}
			}

			public AggregateParameter StoreConvertFrom
		    {
				get
		        {
					if(_StoreConvertFrom_W == null)
	        	    {
						_StoreConvertFrom_W = TearOff.StoreConvertFrom;
					}
					return _StoreConvertFrom_W;
				}
			}

			public AggregateParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public AggregateParameter StoreConvertTo
		    {
				get
		        {
					if(_StoreConvertTo_W == null)
	        	    {
						_StoreConvertTo_W = TearOff.StoreConvertTo;
					}
					return _StoreConvertTo_W;
				}
			}

			public AggregateParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public AggregateParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public AggregateParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public AggregateParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public AggregateParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			private AggregateParameter _Detail_ID_W = null;
			private AggregateParameter _Barcode_Id_W = null;
			private AggregateParameter _Detail_Count_W = null;
			private AggregateParameter _Convert_Id_W = null;
			private AggregateParameter _Convert_Date_W = null;
			private AggregateParameter _Convert_From_W = null;
			private AggregateParameter _Convert_To_W = null;
			private AggregateParameter _StoreConvertFrom_W = null;
			private AggregateParameter _Good_TraidName_W = null;
			private AggregateParameter _StoreConvertTo_W = null;
			private AggregateParameter _Barcode_Unit_W = null;
			private AggregateParameter _Barcode_PayPrice_W = null;
			private AggregateParameter _Barcode_Code_W = null;
			private AggregateParameter _Barcode_Count_W = null;
			private AggregateParameter _Titel_Id_W = null;

			public void AggregateClauseReset()
			{
				_Detail_ID_W = null;
				_Barcode_Id_W = null;
				_Detail_Count_W = null;
				_Convert_Id_W = null;
				_Convert_Date_W = null;
				_Convert_From_W = null;
				_Convert_To_W = null;
				_StoreConvertFrom_W = null;
				_Good_TraidName_W = null;
				_StoreConvertTo_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_Code_W = null;
				_Barcode_Count_W = null;
				_Titel_Id_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
