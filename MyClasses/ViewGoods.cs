/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewGoods : SqlClientEntity
	{
		public ViewGoods()
		{
			this.QuerySource = "ViewGoods";
			this.MappingName = "ViewGoods";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Barcode_ID
			{
				get
				{
					return new SqlParameter("@Barcode_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Titel_Id
			{
				get
				{
					return new SqlParameter("@Titel_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Barcode_Unit
			{
				get
				{
					return new SqlParameter("@Barcode_Unit", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_PayPrice
			{
				get
				{
					return new SqlParameter("@Barcode_PayPrice", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_BuyPrice
			{
				get
				{
					return new SqlParameter("@Barcode_BuyPrice", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Count
			{
				get
				{
					return new SqlParameter("@Barcode_Count", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Code
			{
				get
				{
					return new SqlParameter("@Barcode_Code", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Good_TraidName
			{
				get
				{
					return new SqlParameter("@Good_TraidName", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Category_Id
			{
				get
				{
					return new SqlParameter("@Category_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Good_MinimumCount
			{
				get
				{
					return new SqlParameter("@Good_MinimumCount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Category_Name
			{
				get
				{
					return new SqlParameter("@Category_Name", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Good_CurrentCount
			{
				get
				{
					return new SqlParameter("@Good_CurrentCount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Barcode_PaySpecial
			{
				get
				{
					return new SqlParameter("@Barcode_PaySpecial", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Good_FirstDate
			{
				get
				{
					return new SqlParameter("@Good_FirstDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount0
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount0", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount1
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount1", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount2
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount2", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Good_RequiredCount
			{
				get
				{
					return new SqlParameter("@Good_RequiredCount", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Titel_Id = "Titel_Id";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_BuyPrice = "Barcode_BuyPrice";
            public const string Barcode_Count = "Barcode_Count";
            public const string Barcode_Code = "Barcode_Code";
            public const string Good_TraidName = "Good_TraidName";
            public const string Category_Id = "Category_Id";
            public const string Good_MinimumCount = "Good_MinimumCount";
            public const string Category_Name = "Category_Name";
            public const string Good_CurrentCount = "Good_CurrentCount";
            public const string Barcode_PaySpecial = "Barcode_PaySpecial";
            public const string Good_FirstDate = "Good_FirstDate";
            public const string FirstStore_Amount0 = "FirstStore_Amount0";
            public const string FirstStore_Amount1 = "FirstStore_Amount1";
            public const string FirstStore_Amount2 = "FirstStore_Amount2";
            public const string Good_RequiredCount = "Good_RequiredCount";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = ViewGoods.PropertyNames.Barcode_ID;
					ht[Titel_Id] = ViewGoods.PropertyNames.Titel_Id;
					ht[Barcode_Unit] = ViewGoods.PropertyNames.Barcode_Unit;
					ht[Barcode_PayPrice] = ViewGoods.PropertyNames.Barcode_PayPrice;
					ht[Barcode_BuyPrice] = ViewGoods.PropertyNames.Barcode_BuyPrice;
					ht[Barcode_Count] = ViewGoods.PropertyNames.Barcode_Count;
					ht[Barcode_Code] = ViewGoods.PropertyNames.Barcode_Code;
					ht[Good_TraidName] = ViewGoods.PropertyNames.Good_TraidName;
					ht[Category_Id] = ViewGoods.PropertyNames.Category_Id;
					ht[Good_MinimumCount] = ViewGoods.PropertyNames.Good_MinimumCount;
					ht[Category_Name] = ViewGoods.PropertyNames.Category_Name;
					ht[Good_CurrentCount] = ViewGoods.PropertyNames.Good_CurrentCount;
					ht[Barcode_PaySpecial] = ViewGoods.PropertyNames.Barcode_PaySpecial;
					ht[Good_FirstDate] = ViewGoods.PropertyNames.Good_FirstDate;
					ht[FirstStore_Amount0] = ViewGoods.PropertyNames.FirstStore_Amount0;
					ht[FirstStore_Amount1] = ViewGoods.PropertyNames.FirstStore_Amount1;
					ht[FirstStore_Amount2] = ViewGoods.PropertyNames.FirstStore_Amount2;
					ht[Good_RequiredCount] = ViewGoods.PropertyNames.Good_RequiredCount;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Titel_Id = "Titel_Id";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_BuyPrice = "Barcode_BuyPrice";
            public const string Barcode_Count = "Barcode_Count";
            public const string Barcode_Code = "Barcode_Code";
            public const string Good_TraidName = "Good_TraidName";
            public const string Category_Id = "Category_Id";
            public const string Good_MinimumCount = "Good_MinimumCount";
            public const string Category_Name = "Category_Name";
            public const string Good_CurrentCount = "Good_CurrentCount";
            public const string Barcode_PaySpecial = "Barcode_PaySpecial";
            public const string Good_FirstDate = "Good_FirstDate";
            public const string FirstStore_Amount0 = "FirstStore_Amount0";
            public const string FirstStore_Amount1 = "FirstStore_Amount1";
            public const string FirstStore_Amount2 = "FirstStore_Amount2";
            public const string Good_RequiredCount = "Good_RequiredCount";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = ViewGoods.ColumnNames.Barcode_ID;
					ht[Titel_Id] = ViewGoods.ColumnNames.Titel_Id;
					ht[Barcode_Unit] = ViewGoods.ColumnNames.Barcode_Unit;
					ht[Barcode_PayPrice] = ViewGoods.ColumnNames.Barcode_PayPrice;
					ht[Barcode_BuyPrice] = ViewGoods.ColumnNames.Barcode_BuyPrice;
					ht[Barcode_Count] = ViewGoods.ColumnNames.Barcode_Count;
					ht[Barcode_Code] = ViewGoods.ColumnNames.Barcode_Code;
					ht[Good_TraidName] = ViewGoods.ColumnNames.Good_TraidName;
					ht[Category_Id] = ViewGoods.ColumnNames.Category_Id;
					ht[Good_MinimumCount] = ViewGoods.ColumnNames.Good_MinimumCount;
					ht[Category_Name] = ViewGoods.ColumnNames.Category_Name;
					ht[Good_CurrentCount] = ViewGoods.ColumnNames.Good_CurrentCount;
					ht[Barcode_PaySpecial] = ViewGoods.ColumnNames.Barcode_PaySpecial;
					ht[Good_FirstDate] = ViewGoods.ColumnNames.Good_FirstDate;
					ht[FirstStore_Amount0] = ViewGoods.ColumnNames.FirstStore_Amount0;
					ht[FirstStore_Amount1] = ViewGoods.ColumnNames.FirstStore_Amount1;
					ht[FirstStore_Amount2] = ViewGoods.ColumnNames.FirstStore_Amount2;
					ht[Good_RequiredCount] = ViewGoods.ColumnNames.Good_RequiredCount;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Barcode_ID = "s_Barcode_ID";
            public const string Titel_Id = "s_Titel_Id";
            public const string Barcode_Unit = "s_Barcode_Unit";
            public const string Barcode_PayPrice = "s_Barcode_PayPrice";
            public const string Barcode_BuyPrice = "s_Barcode_BuyPrice";
            public const string Barcode_Count = "s_Barcode_Count";
            public const string Barcode_Code = "s_Barcode_Code";
            public const string Good_TraidName = "s_Good_TraidName";
            public const string Category_Id = "s_Category_Id";
            public const string Good_MinimumCount = "s_Good_MinimumCount";
            public const string Category_Name = "s_Category_Name";
            public const string Good_CurrentCount = "s_Good_CurrentCount";
            public const string Barcode_PaySpecial = "s_Barcode_PaySpecial";
            public const string Good_FirstDate = "s_Good_FirstDate";
            public const string FirstStore_Amount0 = "s_FirstStore_Amount0";
            public const string FirstStore_Amount1 = "s_FirstStore_Amount1";
            public const string FirstStore_Amount2 = "s_FirstStore_Amount2";
            public const string Good_RequiredCount = "s_Good_RequiredCount";

		}
		#endregion	
		
		#region Properties
			public virtual int Barcode_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Barcode_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual int Titel_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Titel_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Titel_Id, value);
			}
		}

		public virtual string Barcode_Unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string Barcode_PayPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string Barcode_BuyPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_BuyPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_BuyPrice, value);
			}
		}

		public virtual string Barcode_Count
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Count);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual string Barcode_Code
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Code);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string Good_TraidName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Good_TraidName);
			}
			set
	        {
				base.Setstring(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual int Category_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Category_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Category_Id, value);
			}
		}

		public virtual double Good_MinimumCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_MinimumCount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Good_MinimumCount, value);
			}
		}

		public virtual string Category_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Category_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Category_Name, value);
			}
		}

		public virtual double Good_CurrentCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_CurrentCount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Good_CurrentCount, value);
			}
		}

		public virtual string Barcode_PaySpecial
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_PaySpecial);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_PaySpecial, value);
			}
		}

		public virtual DateTime Good_FirstDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Good_FirstDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Good_FirstDate, value);
			}
		}

		public virtual double FirstStore_Amount0
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount0);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount0, value);
			}
		}

		public virtual double FirstStore_Amount1
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount1);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount1, value);
			}
		}

		public virtual double FirstStore_Amount2
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount2);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount2, value);
			}
		}

		public virtual double Good_RequiredCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_RequiredCount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Good_RequiredCount, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Barcode_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_ID) ? string.Empty : base.GetintAsString(ColumnNames.Barcode_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_ID);
				else
					this.Barcode_ID = base.SetintAsString(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual string s_Titel_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Titel_Id) ? string.Empty : base.GetintAsString(ColumnNames.Titel_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Titel_Id);
				else
					this.Titel_Id = base.SetintAsString(ColumnNames.Titel_Id, value);
			}
		}

		public virtual string s_Barcode_Unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Unit) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Unit);
				else
					this.Barcode_Unit = base.SetstringAsString(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string s_Barcode_PayPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_PayPrice) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_PayPrice);
				else
					this.Barcode_PayPrice = base.SetstringAsString(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string s_Barcode_BuyPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_BuyPrice) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_BuyPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_BuyPrice);
				else
					this.Barcode_BuyPrice = base.SetstringAsString(ColumnNames.Barcode_BuyPrice, value);
			}
		}

		public virtual string s_Barcode_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Count) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Count);
				else
					this.Barcode_Count = base.SetstringAsString(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual string s_Barcode_Code
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Code) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Code);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Code);
				else
					this.Barcode_Code = base.SetstringAsString(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string s_Good_TraidName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_TraidName) ? string.Empty : base.GetstringAsString(ColumnNames.Good_TraidName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_TraidName);
				else
					this.Good_TraidName = base.SetstringAsString(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual string s_Category_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Category_Id) ? string.Empty : base.GetintAsString(ColumnNames.Category_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Category_Id);
				else
					this.Category_Id = base.SetintAsString(ColumnNames.Category_Id, value);
			}
		}

		public virtual string s_Good_MinimumCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_MinimumCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_MinimumCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_MinimumCount);
				else
					this.Good_MinimumCount = base.SetdoubleAsString(ColumnNames.Good_MinimumCount, value);
			}
		}

		public virtual string s_Category_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Category_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Category_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Category_Name);
				else
					this.Category_Name = base.SetstringAsString(ColumnNames.Category_Name, value);
			}
		}

		public virtual string s_Good_CurrentCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_CurrentCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_CurrentCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_CurrentCount);
				else
					this.Good_CurrentCount = base.SetdoubleAsString(ColumnNames.Good_CurrentCount, value);
			}
		}

		public virtual string s_Barcode_PaySpecial
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_PaySpecial) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_PaySpecial);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_PaySpecial);
				else
					this.Barcode_PaySpecial = base.SetstringAsString(ColumnNames.Barcode_PaySpecial, value);
			}
		}

		public virtual string s_Good_FirstDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_FirstDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Good_FirstDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_FirstDate);
				else
					this.Good_FirstDate = base.SetDateTimeAsString(ColumnNames.Good_FirstDate, value);
			}
		}

		public virtual string s_FirstStore_Amount0
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount0) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount0);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount0);
				else
					this.FirstStore_Amount0 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount0, value);
			}
		}

		public virtual string s_FirstStore_Amount1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount1) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount1);
				else
					this.FirstStore_Amount1 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount1, value);
			}
		}

		public virtual string s_FirstStore_Amount2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount2) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount2);
				else
					this.FirstStore_Amount2 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount2, value);
			}
		}

		public virtual string s_Good_RequiredCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_RequiredCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_RequiredCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_RequiredCount);
				else
					this.Good_RequiredCount = base.SetdoubleAsString(ColumnNames.Good_RequiredCount, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Barcode_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Titel_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_PayPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_BuyPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_BuyPrice, Parameters.Barcode_BuyPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Code
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_TraidName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Category_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Category_Id, Parameters.Category_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_MinimumCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_MinimumCount, Parameters.Good_MinimumCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Category_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Category_Name, Parameters.Category_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_CurrentCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_CurrentCount, Parameters.Good_CurrentCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_PaySpecial
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_PaySpecial, Parameters.Barcode_PaySpecial);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_FirstDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_FirstDate, Parameters.Good_FirstDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount0
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount0, Parameters.FirstStore_Amount0);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount1, Parameters.FirstStore_Amount1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount2, Parameters.FirstStore_Amount2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_RequiredCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_RequiredCount, Parameters.Good_RequiredCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public WhereParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			public WhereParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public WhereParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public WhereParameter Barcode_BuyPrice
		    {
				get
		        {
					if(_Barcode_BuyPrice_W == null)
	        	    {
						_Barcode_BuyPrice_W = TearOff.Barcode_BuyPrice;
					}
					return _Barcode_BuyPrice_W;
				}
			}

			public WhereParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public WhereParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public WhereParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public WhereParameter Category_Id
		    {
				get
		        {
					if(_Category_Id_W == null)
	        	    {
						_Category_Id_W = TearOff.Category_Id;
					}
					return _Category_Id_W;
				}
			}

			public WhereParameter Good_MinimumCount
		    {
				get
		        {
					if(_Good_MinimumCount_W == null)
	        	    {
						_Good_MinimumCount_W = TearOff.Good_MinimumCount;
					}
					return _Good_MinimumCount_W;
				}
			}

			public WhereParameter Category_Name
		    {
				get
		        {
					if(_Category_Name_W == null)
	        	    {
						_Category_Name_W = TearOff.Category_Name;
					}
					return _Category_Name_W;
				}
			}

			public WhereParameter Good_CurrentCount
		    {
				get
		        {
					if(_Good_CurrentCount_W == null)
	        	    {
						_Good_CurrentCount_W = TearOff.Good_CurrentCount;
					}
					return _Good_CurrentCount_W;
				}
			}

			public WhereParameter Barcode_PaySpecial
		    {
				get
		        {
					if(_Barcode_PaySpecial_W == null)
	        	    {
						_Barcode_PaySpecial_W = TearOff.Barcode_PaySpecial;
					}
					return _Barcode_PaySpecial_W;
				}
			}

			public WhereParameter Good_FirstDate
		    {
				get
		        {
					if(_Good_FirstDate_W == null)
	        	    {
						_Good_FirstDate_W = TearOff.Good_FirstDate;
					}
					return _Good_FirstDate_W;
				}
			}

			public WhereParameter FirstStore_Amount0
		    {
				get
		        {
					if(_FirstStore_Amount0_W == null)
	        	    {
						_FirstStore_Amount0_W = TearOff.FirstStore_Amount0;
					}
					return _FirstStore_Amount0_W;
				}
			}

			public WhereParameter FirstStore_Amount1
		    {
				get
		        {
					if(_FirstStore_Amount1_W == null)
	        	    {
						_FirstStore_Amount1_W = TearOff.FirstStore_Amount1;
					}
					return _FirstStore_Amount1_W;
				}
			}

			public WhereParameter FirstStore_Amount2
		    {
				get
		        {
					if(_FirstStore_Amount2_W == null)
	        	    {
						_FirstStore_Amount2_W = TearOff.FirstStore_Amount2;
					}
					return _FirstStore_Amount2_W;
				}
			}

			public WhereParameter Good_RequiredCount
		    {
				get
		        {
					if(_Good_RequiredCount_W == null)
	        	    {
						_Good_RequiredCount_W = TearOff.Good_RequiredCount;
					}
					return _Good_RequiredCount_W;
				}
			}

			private WhereParameter _Barcode_ID_W = null;
			private WhereParameter _Titel_Id_W = null;
			private WhereParameter _Barcode_Unit_W = null;
			private WhereParameter _Barcode_PayPrice_W = null;
			private WhereParameter _Barcode_BuyPrice_W = null;
			private WhereParameter _Barcode_Count_W = null;
			private WhereParameter _Barcode_Code_W = null;
			private WhereParameter _Good_TraidName_W = null;
			private WhereParameter _Category_Id_W = null;
			private WhereParameter _Good_MinimumCount_W = null;
			private WhereParameter _Category_Name_W = null;
			private WhereParameter _Good_CurrentCount_W = null;
			private WhereParameter _Barcode_PaySpecial_W = null;
			private WhereParameter _Good_FirstDate_W = null;
			private WhereParameter _FirstStore_Amount0_W = null;
			private WhereParameter _FirstStore_Amount1_W = null;
			private WhereParameter _FirstStore_Amount2_W = null;
			private WhereParameter _Good_RequiredCount_W = null;

			public void WhereClauseReset()
			{
				_Barcode_ID_W = null;
				_Titel_Id_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_BuyPrice_W = null;
				_Barcode_Count_W = null;
				_Barcode_Code_W = null;
				_Good_TraidName_W = null;
				_Category_Id_W = null;
				_Good_MinimumCount_W = null;
				_Category_Name_W = null;
				_Good_CurrentCount_W = null;
				_Barcode_PaySpecial_W = null;
				_Good_FirstDate_W = null;
				_FirstStore_Amount0_W = null;
				_FirstStore_Amount1_W = null;
				_FirstStore_Amount2_W = null;
				_Good_RequiredCount_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Barcode_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Titel_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_PayPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_BuyPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_BuyPrice, Parameters.Barcode_BuyPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Code
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_TraidName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Category_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Category_Id, Parameters.Category_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_MinimumCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_MinimumCount, Parameters.Good_MinimumCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Category_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Category_Name, Parameters.Category_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_CurrentCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_CurrentCount, Parameters.Good_CurrentCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_PaySpecial
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_PaySpecial, Parameters.Barcode_PaySpecial);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_FirstDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_FirstDate, Parameters.Good_FirstDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount0
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount0, Parameters.FirstStore_Amount0);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount1, Parameters.FirstStore_Amount1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount2, Parameters.FirstStore_Amount2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_RequiredCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_RequiredCount, Parameters.Good_RequiredCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public AggregateParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			public AggregateParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public AggregateParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public AggregateParameter Barcode_BuyPrice
		    {
				get
		        {
					if(_Barcode_BuyPrice_W == null)
	        	    {
						_Barcode_BuyPrice_W = TearOff.Barcode_BuyPrice;
					}
					return _Barcode_BuyPrice_W;
				}
			}

			public AggregateParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public AggregateParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public AggregateParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public AggregateParameter Category_Id
		    {
				get
		        {
					if(_Category_Id_W == null)
	        	    {
						_Category_Id_W = TearOff.Category_Id;
					}
					return _Category_Id_W;
				}
			}

			public AggregateParameter Good_MinimumCount
		    {
				get
		        {
					if(_Good_MinimumCount_W == null)
	        	    {
						_Good_MinimumCount_W = TearOff.Good_MinimumCount;
					}
					return _Good_MinimumCount_W;
				}
			}

			public AggregateParameter Category_Name
		    {
				get
		        {
					if(_Category_Name_W == null)
	        	    {
						_Category_Name_W = TearOff.Category_Name;
					}
					return _Category_Name_W;
				}
			}

			public AggregateParameter Good_CurrentCount
		    {
				get
		        {
					if(_Good_CurrentCount_W == null)
	        	    {
						_Good_CurrentCount_W = TearOff.Good_CurrentCount;
					}
					return _Good_CurrentCount_W;
				}
			}

			public AggregateParameter Barcode_PaySpecial
		    {
				get
		        {
					if(_Barcode_PaySpecial_W == null)
	        	    {
						_Barcode_PaySpecial_W = TearOff.Barcode_PaySpecial;
					}
					return _Barcode_PaySpecial_W;
				}
			}

			public AggregateParameter Good_FirstDate
		    {
				get
		        {
					if(_Good_FirstDate_W == null)
	        	    {
						_Good_FirstDate_W = TearOff.Good_FirstDate;
					}
					return _Good_FirstDate_W;
				}
			}

			public AggregateParameter FirstStore_Amount0
		    {
				get
		        {
					if(_FirstStore_Amount0_W == null)
	        	    {
						_FirstStore_Amount0_W = TearOff.FirstStore_Amount0;
					}
					return _FirstStore_Amount0_W;
				}
			}

			public AggregateParameter FirstStore_Amount1
		    {
				get
		        {
					if(_FirstStore_Amount1_W == null)
	        	    {
						_FirstStore_Amount1_W = TearOff.FirstStore_Amount1;
					}
					return _FirstStore_Amount1_W;
				}
			}

			public AggregateParameter FirstStore_Amount2
		    {
				get
		        {
					if(_FirstStore_Amount2_W == null)
	        	    {
						_FirstStore_Amount2_W = TearOff.FirstStore_Amount2;
					}
					return _FirstStore_Amount2_W;
				}
			}

			public AggregateParameter Good_RequiredCount
		    {
				get
		        {
					if(_Good_RequiredCount_W == null)
	        	    {
						_Good_RequiredCount_W = TearOff.Good_RequiredCount;
					}
					return _Good_RequiredCount_W;
				}
			}

			private AggregateParameter _Barcode_ID_W = null;
			private AggregateParameter _Titel_Id_W = null;
			private AggregateParameter _Barcode_Unit_W = null;
			private AggregateParameter _Barcode_PayPrice_W = null;
			private AggregateParameter _Barcode_BuyPrice_W = null;
			private AggregateParameter _Barcode_Count_W = null;
			private AggregateParameter _Barcode_Code_W = null;
			private AggregateParameter _Good_TraidName_W = null;
			private AggregateParameter _Category_Id_W = null;
			private AggregateParameter _Good_MinimumCount_W = null;
			private AggregateParameter _Category_Name_W = null;
			private AggregateParameter _Good_CurrentCount_W = null;
			private AggregateParameter _Barcode_PaySpecial_W = null;
			private AggregateParameter _Good_FirstDate_W = null;
			private AggregateParameter _FirstStore_Amount0_W = null;
			private AggregateParameter _FirstStore_Amount1_W = null;
			private AggregateParameter _FirstStore_Amount2_W = null;
			private AggregateParameter _Good_RequiredCount_W = null;

			public void AggregateClauseReset()
			{
				_Barcode_ID_W = null;
				_Titel_Id_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_BuyPrice_W = null;
				_Barcode_Count_W = null;
				_Barcode_Code_W = null;
				_Good_TraidName_W = null;
				_Category_Id_W = null;
				_Good_MinimumCount_W = null;
				_Category_Name_W = null;
				_Good_CurrentCount_W = null;
				_Barcode_PaySpecial_W = null;
				_Good_FirstDate_W = null;
				_FirstStore_Amount0_W = null;
				_FirstStore_Amount1_W = null;
				_FirstStore_Amount2_W = null;
				_Good_RequiredCount_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
