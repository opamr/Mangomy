
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblRents : SqlClientEntity
	{
		public _TblRents()
		{
			this.QuerySource = "TblRents";
			this.MappingName = "TblRents";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblRentsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Rent_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Rent_ID, Rent_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblRentsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Rent_ID
			{
				get
				{
					return new SqlParameter("@Rent_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Rent_YearMoney
			{
				get
				{
					return new SqlParameter("@Rent_YearMoney", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Rent_PayEveryMonth
			{
				get
				{
					return new SqlParameter("@Rent_PayEveryMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Rent_PayTimeMoney
			{
				get
				{
					return new SqlParameter("@Rent_PayTimeMoney", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Rent_StartDate
			{
				get
				{
					return new SqlParameter("@Rent_StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Rent_OwnerName
			{
				get
				{
					return new SqlParameter("@Rent_OwnerName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_OwnerMobile
			{
				get
				{
					return new SqlParameter("@Rent_OwnerMobile", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_BankNumber
			{
				get
				{
					return new SqlParameter("@Rent_BankNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_BankName
			{
				get
				{
					return new SqlParameter("@Rent_BankName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_BuildName
			{
				get
				{
					return new SqlParameter("@Rent_BuildName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_ContractStartDate
			{
				get
				{
					return new SqlParameter("@Rent_ContractStartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Rent_ContractEndDate
			{
				get
				{
					return new SqlParameter("@Rent_ContractEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Rent_Archive
			{
				get
				{
					return new SqlParameter("@Rent_Archive", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Rent_PayType
			{
				get
				{
					return new SqlParameter("@Rent_PayType", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Rent_ID = "Rent_ID";
            public const string Rent_YearMoney = "Rent_YearMoney";
            public const string Rent_PayEveryMonth = "Rent_PayEveryMonth";
            public const string Rent_PayTimeMoney = "Rent_PayTimeMoney";
            public const string Rent_StartDate = "Rent_StartDate";
            public const string Rent_OwnerName = "Rent_OwnerName";
            public const string Rent_OwnerMobile = "Rent_OwnerMobile";
            public const string Rent_BankNumber = "Rent_BankNumber";
            public const string Rent_BankName = "Rent_BankName";
            public const string Rent_BuildName = "Rent_BuildName";
            public const string Rent_ContractStartDate = "Rent_ContractStartDate";
            public const string Rent_ContractEndDate = "Rent_ContractEndDate";
            public const string Rent_Archive = "Rent_Archive";
            public const string Rent_PayType = "Rent_PayType";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Rent_ID] = _TblRents.PropertyNames.Rent_ID;
					ht[Rent_YearMoney] = _TblRents.PropertyNames.Rent_YearMoney;
					ht[Rent_PayEveryMonth] = _TblRents.PropertyNames.Rent_PayEveryMonth;
					ht[Rent_PayTimeMoney] = _TblRents.PropertyNames.Rent_PayTimeMoney;
					ht[Rent_StartDate] = _TblRents.PropertyNames.Rent_StartDate;
					ht[Rent_OwnerName] = _TblRents.PropertyNames.Rent_OwnerName;
					ht[Rent_OwnerMobile] = _TblRents.PropertyNames.Rent_OwnerMobile;
					ht[Rent_BankNumber] = _TblRents.PropertyNames.Rent_BankNumber;
					ht[Rent_BankName] = _TblRents.PropertyNames.Rent_BankName;
					ht[Rent_BuildName] = _TblRents.PropertyNames.Rent_BuildName;
					ht[Rent_ContractStartDate] = _TblRents.PropertyNames.Rent_ContractStartDate;
					ht[Rent_ContractEndDate] = _TblRents.PropertyNames.Rent_ContractEndDate;
					ht[Rent_Archive] = _TblRents.PropertyNames.Rent_Archive;
					ht[Rent_PayType] = _TblRents.PropertyNames.Rent_PayType;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Rent_ID = "Rent_ID";
            public const string Rent_YearMoney = "Rent_YearMoney";
            public const string Rent_PayEveryMonth = "Rent_PayEveryMonth";
            public const string Rent_PayTimeMoney = "Rent_PayTimeMoney";
            public const string Rent_StartDate = "Rent_StartDate";
            public const string Rent_OwnerName = "Rent_OwnerName";
            public const string Rent_OwnerMobile = "Rent_OwnerMobile";
            public const string Rent_BankNumber = "Rent_BankNumber";
            public const string Rent_BankName = "Rent_BankName";
            public const string Rent_BuildName = "Rent_BuildName";
            public const string Rent_ContractStartDate = "Rent_ContractStartDate";
            public const string Rent_ContractEndDate = "Rent_ContractEndDate";
            public const string Rent_Archive = "Rent_Archive";
            public const string Rent_PayType = "Rent_PayType";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Rent_ID] = _TblRents.ColumnNames.Rent_ID;
					ht[Rent_YearMoney] = _TblRents.ColumnNames.Rent_YearMoney;
					ht[Rent_PayEveryMonth] = _TblRents.ColumnNames.Rent_PayEveryMonth;
					ht[Rent_PayTimeMoney] = _TblRents.ColumnNames.Rent_PayTimeMoney;
					ht[Rent_StartDate] = _TblRents.ColumnNames.Rent_StartDate;
					ht[Rent_OwnerName] = _TblRents.ColumnNames.Rent_OwnerName;
					ht[Rent_OwnerMobile] = _TblRents.ColumnNames.Rent_OwnerMobile;
					ht[Rent_BankNumber] = _TblRents.ColumnNames.Rent_BankNumber;
					ht[Rent_BankName] = _TblRents.ColumnNames.Rent_BankName;
					ht[Rent_BuildName] = _TblRents.ColumnNames.Rent_BuildName;
					ht[Rent_ContractStartDate] = _TblRents.ColumnNames.Rent_ContractStartDate;
					ht[Rent_ContractEndDate] = _TblRents.ColumnNames.Rent_ContractEndDate;
					ht[Rent_Archive] = _TblRents.ColumnNames.Rent_Archive;
					ht[Rent_PayType] = _TblRents.ColumnNames.Rent_PayType;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Rent_ID = "s_Rent_ID";
            public const string Rent_YearMoney = "s_Rent_YearMoney";
            public const string Rent_PayEveryMonth = "s_Rent_PayEveryMonth";
            public const string Rent_PayTimeMoney = "s_Rent_PayTimeMoney";
            public const string Rent_StartDate = "s_Rent_StartDate";
            public const string Rent_OwnerName = "s_Rent_OwnerName";
            public const string Rent_OwnerMobile = "s_Rent_OwnerMobile";
            public const string Rent_BankNumber = "s_Rent_BankNumber";
            public const string Rent_BankName = "s_Rent_BankName";
            public const string Rent_BuildName = "s_Rent_BuildName";
            public const string Rent_ContractStartDate = "s_Rent_ContractStartDate";
            public const string Rent_ContractEndDate = "s_Rent_ContractEndDate";
            public const string Rent_Archive = "s_Rent_Archive";
            public const string Rent_PayType = "s_Rent_PayType";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Rent_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Rent_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Rent_ID, value);
			}
		}

		public virtual double Rent_YearMoney
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Rent_YearMoney);
			}
			set
	        {
				base.Setdouble(ColumnNames.Rent_YearMoney, value);
			}
		}

		public virtual int Rent_PayEveryMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.Rent_PayEveryMonth);
			}
			set
	        {
				base.Setint(ColumnNames.Rent_PayEveryMonth, value);
			}
		}

		public virtual double Rent_PayTimeMoney
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Rent_PayTimeMoney);
			}
			set
	        {
				base.Setdouble(ColumnNames.Rent_PayTimeMoney, value);
			}
		}

		public virtual DateTime Rent_StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Rent_StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Rent_StartDate, value);
			}
		}

		public virtual string Rent_OwnerName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_OwnerName);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_OwnerName, value);
			}
		}

		public virtual string Rent_OwnerMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_OwnerMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_OwnerMobile, value);
			}
		}

		public virtual string Rent_BankNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_BankNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_BankNumber, value);
			}
		}

		public virtual string Rent_BankName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_BankName);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_BankName, value);
			}
		}

		public virtual string Rent_BuildName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_BuildName);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_BuildName, value);
			}
		}

		public virtual DateTime Rent_ContractStartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Rent_ContractStartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Rent_ContractStartDate, value);
			}
		}

		public virtual DateTime Rent_ContractEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Rent_ContractEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Rent_ContractEndDate, value);
			}
		}

		public virtual string Rent_Archive
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_Archive);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_Archive, value);
			}
		}

		public virtual string Rent_PayType
	    {
			get
	        {
				return base.Getstring(ColumnNames.Rent_PayType);
			}
			set
	        {
				base.Setstring(ColumnNames.Rent_PayType, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Rent_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_ID) ? string.Empty : base.GetintAsString(ColumnNames.Rent_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_ID);
				else
					this.Rent_ID = base.SetintAsString(ColumnNames.Rent_ID, value);
			}
		}

		public virtual string s_Rent_YearMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_YearMoney) ? string.Empty : base.GetdoubleAsString(ColumnNames.Rent_YearMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_YearMoney);
				else
					this.Rent_YearMoney = base.SetdoubleAsString(ColumnNames.Rent_YearMoney, value);
			}
		}

		public virtual string s_Rent_PayEveryMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_PayEveryMonth) ? string.Empty : base.GetintAsString(ColumnNames.Rent_PayEveryMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_PayEveryMonth);
				else
					this.Rent_PayEveryMonth = base.SetintAsString(ColumnNames.Rent_PayEveryMonth, value);
			}
		}

		public virtual string s_Rent_PayTimeMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_PayTimeMoney) ? string.Empty : base.GetdoubleAsString(ColumnNames.Rent_PayTimeMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_PayTimeMoney);
				else
					this.Rent_PayTimeMoney = base.SetdoubleAsString(ColumnNames.Rent_PayTimeMoney, value);
			}
		}

		public virtual string s_Rent_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Rent_StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_StartDate);
				else
					this.Rent_StartDate = base.SetDateTimeAsString(ColumnNames.Rent_StartDate, value);
			}
		}

		public virtual string s_Rent_OwnerName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_OwnerName) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_OwnerName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_OwnerName);
				else
					this.Rent_OwnerName = base.SetstringAsString(ColumnNames.Rent_OwnerName, value);
			}
		}

		public virtual string s_Rent_OwnerMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_OwnerMobile) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_OwnerMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_OwnerMobile);
				else
					this.Rent_OwnerMobile = base.SetstringAsString(ColumnNames.Rent_OwnerMobile, value);
			}
		}

		public virtual string s_Rent_BankNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_BankNumber) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_BankNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_BankNumber);
				else
					this.Rent_BankNumber = base.SetstringAsString(ColumnNames.Rent_BankNumber, value);
			}
		}

		public virtual string s_Rent_BankName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_BankName) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_BankName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_BankName);
				else
					this.Rent_BankName = base.SetstringAsString(ColumnNames.Rent_BankName, value);
			}
		}

		public virtual string s_Rent_BuildName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_BuildName) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_BuildName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_BuildName);
				else
					this.Rent_BuildName = base.SetstringAsString(ColumnNames.Rent_BuildName, value);
			}
		}

		public virtual string s_Rent_ContractStartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_ContractStartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Rent_ContractStartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_ContractStartDate);
				else
					this.Rent_ContractStartDate = base.SetDateTimeAsString(ColumnNames.Rent_ContractStartDate, value);
			}
		}

		public virtual string s_Rent_ContractEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_ContractEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Rent_ContractEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_ContractEndDate);
				else
					this.Rent_ContractEndDate = base.SetDateTimeAsString(ColumnNames.Rent_ContractEndDate, value);
			}
		}

		public virtual string s_Rent_Archive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_Archive) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_Archive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_Archive);
				else
					this.Rent_Archive = base.SetstringAsString(ColumnNames.Rent_Archive, value);
			}
		}

		public virtual string s_Rent_PayType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Rent_PayType) ? string.Empty : base.GetstringAsString(ColumnNames.Rent_PayType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Rent_PayType);
				else
					this.Rent_PayType = base.SetstringAsString(ColumnNames.Rent_PayType, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Rent_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_ID, Parameters.Rent_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_YearMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_YearMoney, Parameters.Rent_YearMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_PayEveryMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_PayEveryMonth, Parameters.Rent_PayEveryMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_PayTimeMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_PayTimeMoney, Parameters.Rent_PayTimeMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_StartDate, Parameters.Rent_StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_OwnerName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_OwnerName, Parameters.Rent_OwnerName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_OwnerMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_OwnerMobile, Parameters.Rent_OwnerMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_BankNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_BankNumber, Parameters.Rent_BankNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_BankName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_BankName, Parameters.Rent_BankName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_BuildName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_BuildName, Parameters.Rent_BuildName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_ContractStartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_ContractStartDate, Parameters.Rent_ContractStartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_ContractEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_ContractEndDate, Parameters.Rent_ContractEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_Archive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_Archive, Parameters.Rent_Archive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Rent_PayType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Rent_PayType, Parameters.Rent_PayType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Rent_ID
		    {
				get
		        {
					if(_Rent_ID_W == null)
	        	    {
						_Rent_ID_W = TearOff.Rent_ID;
					}
					return _Rent_ID_W;
				}
			}

			public WhereParameter Rent_YearMoney
		    {
				get
		        {
					if(_Rent_YearMoney_W == null)
	        	    {
						_Rent_YearMoney_W = TearOff.Rent_YearMoney;
					}
					return _Rent_YearMoney_W;
				}
			}

			public WhereParameter Rent_PayEveryMonth
		    {
				get
		        {
					if(_Rent_PayEveryMonth_W == null)
	        	    {
						_Rent_PayEveryMonth_W = TearOff.Rent_PayEveryMonth;
					}
					return _Rent_PayEveryMonth_W;
				}
			}

			public WhereParameter Rent_PayTimeMoney
		    {
				get
		        {
					if(_Rent_PayTimeMoney_W == null)
	        	    {
						_Rent_PayTimeMoney_W = TearOff.Rent_PayTimeMoney;
					}
					return _Rent_PayTimeMoney_W;
				}
			}

			public WhereParameter Rent_StartDate
		    {
				get
		        {
					if(_Rent_StartDate_W == null)
	        	    {
						_Rent_StartDate_W = TearOff.Rent_StartDate;
					}
					return _Rent_StartDate_W;
				}
			}

			public WhereParameter Rent_OwnerName
		    {
				get
		        {
					if(_Rent_OwnerName_W == null)
	        	    {
						_Rent_OwnerName_W = TearOff.Rent_OwnerName;
					}
					return _Rent_OwnerName_W;
				}
			}

			public WhereParameter Rent_OwnerMobile
		    {
				get
		        {
					if(_Rent_OwnerMobile_W == null)
	        	    {
						_Rent_OwnerMobile_W = TearOff.Rent_OwnerMobile;
					}
					return _Rent_OwnerMobile_W;
				}
			}

			public WhereParameter Rent_BankNumber
		    {
				get
		        {
					if(_Rent_BankNumber_W == null)
	        	    {
						_Rent_BankNumber_W = TearOff.Rent_BankNumber;
					}
					return _Rent_BankNumber_W;
				}
			}

			public WhereParameter Rent_BankName
		    {
				get
		        {
					if(_Rent_BankName_W == null)
	        	    {
						_Rent_BankName_W = TearOff.Rent_BankName;
					}
					return _Rent_BankName_W;
				}
			}

			public WhereParameter Rent_BuildName
		    {
				get
		        {
					if(_Rent_BuildName_W == null)
	        	    {
						_Rent_BuildName_W = TearOff.Rent_BuildName;
					}
					return _Rent_BuildName_W;
				}
			}

			public WhereParameter Rent_ContractStartDate
		    {
				get
		        {
					if(_Rent_ContractStartDate_W == null)
	        	    {
						_Rent_ContractStartDate_W = TearOff.Rent_ContractStartDate;
					}
					return _Rent_ContractStartDate_W;
				}
			}

			public WhereParameter Rent_ContractEndDate
		    {
				get
		        {
					if(_Rent_ContractEndDate_W == null)
	        	    {
						_Rent_ContractEndDate_W = TearOff.Rent_ContractEndDate;
					}
					return _Rent_ContractEndDate_W;
				}
			}

			public WhereParameter Rent_Archive
		    {
				get
		        {
					if(_Rent_Archive_W == null)
	        	    {
						_Rent_Archive_W = TearOff.Rent_Archive;
					}
					return _Rent_Archive_W;
				}
			}

			public WhereParameter Rent_PayType
		    {
				get
		        {
					if(_Rent_PayType_W == null)
	        	    {
						_Rent_PayType_W = TearOff.Rent_PayType;
					}
					return _Rent_PayType_W;
				}
			}

			private WhereParameter _Rent_ID_W = null;
			private WhereParameter _Rent_YearMoney_W = null;
			private WhereParameter _Rent_PayEveryMonth_W = null;
			private WhereParameter _Rent_PayTimeMoney_W = null;
			private WhereParameter _Rent_StartDate_W = null;
			private WhereParameter _Rent_OwnerName_W = null;
			private WhereParameter _Rent_OwnerMobile_W = null;
			private WhereParameter _Rent_BankNumber_W = null;
			private WhereParameter _Rent_BankName_W = null;
			private WhereParameter _Rent_BuildName_W = null;
			private WhereParameter _Rent_ContractStartDate_W = null;
			private WhereParameter _Rent_ContractEndDate_W = null;
			private WhereParameter _Rent_Archive_W = null;
			private WhereParameter _Rent_PayType_W = null;

			public void WhereClauseReset()
			{
				_Rent_ID_W = null;
				_Rent_YearMoney_W = null;
				_Rent_PayEveryMonth_W = null;
				_Rent_PayTimeMoney_W = null;
				_Rent_StartDate_W = null;
				_Rent_OwnerName_W = null;
				_Rent_OwnerMobile_W = null;
				_Rent_BankNumber_W = null;
				_Rent_BankName_W = null;
				_Rent_BuildName_W = null;
				_Rent_ContractStartDate_W = null;
				_Rent_ContractEndDate_W = null;
				_Rent_Archive_W = null;
				_Rent_PayType_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Rent_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_ID, Parameters.Rent_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_YearMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_YearMoney, Parameters.Rent_YearMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_PayEveryMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_PayEveryMonth, Parameters.Rent_PayEveryMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_PayTimeMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_PayTimeMoney, Parameters.Rent_PayTimeMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_StartDate, Parameters.Rent_StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_OwnerName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_OwnerName, Parameters.Rent_OwnerName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_OwnerMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_OwnerMobile, Parameters.Rent_OwnerMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_BankNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_BankNumber, Parameters.Rent_BankNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_BankName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_BankName, Parameters.Rent_BankName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_BuildName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_BuildName, Parameters.Rent_BuildName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_ContractStartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_ContractStartDate, Parameters.Rent_ContractStartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_ContractEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_ContractEndDate, Parameters.Rent_ContractEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_Archive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_Archive, Parameters.Rent_Archive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Rent_PayType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Rent_PayType, Parameters.Rent_PayType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Rent_ID
		    {
				get
		        {
					if(_Rent_ID_W == null)
	        	    {
						_Rent_ID_W = TearOff.Rent_ID;
					}
					return _Rent_ID_W;
				}
			}

			public AggregateParameter Rent_YearMoney
		    {
				get
		        {
					if(_Rent_YearMoney_W == null)
	        	    {
						_Rent_YearMoney_W = TearOff.Rent_YearMoney;
					}
					return _Rent_YearMoney_W;
				}
			}

			public AggregateParameter Rent_PayEveryMonth
		    {
				get
		        {
					if(_Rent_PayEveryMonth_W == null)
	        	    {
						_Rent_PayEveryMonth_W = TearOff.Rent_PayEveryMonth;
					}
					return _Rent_PayEveryMonth_W;
				}
			}

			public AggregateParameter Rent_PayTimeMoney
		    {
				get
		        {
					if(_Rent_PayTimeMoney_W == null)
	        	    {
						_Rent_PayTimeMoney_W = TearOff.Rent_PayTimeMoney;
					}
					return _Rent_PayTimeMoney_W;
				}
			}

			public AggregateParameter Rent_StartDate
		    {
				get
		        {
					if(_Rent_StartDate_W == null)
	        	    {
						_Rent_StartDate_W = TearOff.Rent_StartDate;
					}
					return _Rent_StartDate_W;
				}
			}

			public AggregateParameter Rent_OwnerName
		    {
				get
		        {
					if(_Rent_OwnerName_W == null)
	        	    {
						_Rent_OwnerName_W = TearOff.Rent_OwnerName;
					}
					return _Rent_OwnerName_W;
				}
			}

			public AggregateParameter Rent_OwnerMobile
		    {
				get
		        {
					if(_Rent_OwnerMobile_W == null)
	        	    {
						_Rent_OwnerMobile_W = TearOff.Rent_OwnerMobile;
					}
					return _Rent_OwnerMobile_W;
				}
			}

			public AggregateParameter Rent_BankNumber
		    {
				get
		        {
					if(_Rent_BankNumber_W == null)
	        	    {
						_Rent_BankNumber_W = TearOff.Rent_BankNumber;
					}
					return _Rent_BankNumber_W;
				}
			}

			public AggregateParameter Rent_BankName
		    {
				get
		        {
					if(_Rent_BankName_W == null)
	        	    {
						_Rent_BankName_W = TearOff.Rent_BankName;
					}
					return _Rent_BankName_W;
				}
			}

			public AggregateParameter Rent_BuildName
		    {
				get
		        {
					if(_Rent_BuildName_W == null)
	        	    {
						_Rent_BuildName_W = TearOff.Rent_BuildName;
					}
					return _Rent_BuildName_W;
				}
			}

			public AggregateParameter Rent_ContractStartDate
		    {
				get
		        {
					if(_Rent_ContractStartDate_W == null)
	        	    {
						_Rent_ContractStartDate_W = TearOff.Rent_ContractStartDate;
					}
					return _Rent_ContractStartDate_W;
				}
			}

			public AggregateParameter Rent_ContractEndDate
		    {
				get
		        {
					if(_Rent_ContractEndDate_W == null)
	        	    {
						_Rent_ContractEndDate_W = TearOff.Rent_ContractEndDate;
					}
					return _Rent_ContractEndDate_W;
				}
			}

			public AggregateParameter Rent_Archive
		    {
				get
		        {
					if(_Rent_Archive_W == null)
	        	    {
						_Rent_Archive_W = TearOff.Rent_Archive;
					}
					return _Rent_Archive_W;
				}
			}

			public AggregateParameter Rent_PayType
		    {
				get
		        {
					if(_Rent_PayType_W == null)
	        	    {
						_Rent_PayType_W = TearOff.Rent_PayType;
					}
					return _Rent_PayType_W;
				}
			}

			private AggregateParameter _Rent_ID_W = null;
			private AggregateParameter _Rent_YearMoney_W = null;
			private AggregateParameter _Rent_PayEveryMonth_W = null;
			private AggregateParameter _Rent_PayTimeMoney_W = null;
			private AggregateParameter _Rent_StartDate_W = null;
			private AggregateParameter _Rent_OwnerName_W = null;
			private AggregateParameter _Rent_OwnerMobile_W = null;
			private AggregateParameter _Rent_BankNumber_W = null;
			private AggregateParameter _Rent_BankName_W = null;
			private AggregateParameter _Rent_BuildName_W = null;
			private AggregateParameter _Rent_ContractStartDate_W = null;
			private AggregateParameter _Rent_ContractEndDate_W = null;
			private AggregateParameter _Rent_Archive_W = null;
			private AggregateParameter _Rent_PayType_W = null;

			public void AggregateClauseReset()
			{
				_Rent_ID_W = null;
				_Rent_YearMoney_W = null;
				_Rent_PayEveryMonth_W = null;
				_Rent_PayTimeMoney_W = null;
				_Rent_StartDate_W = null;
				_Rent_OwnerName_W = null;
				_Rent_OwnerMobile_W = null;
				_Rent_BankNumber_W = null;
				_Rent_BankName_W = null;
				_Rent_BuildName_W = null;
				_Rent_ContractStartDate_W = null;
				_Rent_ContractEndDate_W = null;
				_Rent_Archive_W = null;
				_Rent_PayType_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Rent_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblRentsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Rent_ID);
			p.SourceColumn = ColumnNames.Rent_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Rent_ID);
			p.SourceColumn = ColumnNames.Rent_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_YearMoney);
			p.SourceColumn = ColumnNames.Rent_YearMoney;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_PayEveryMonth);
			p.SourceColumn = ColumnNames.Rent_PayEveryMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_PayTimeMoney);
			p.SourceColumn = ColumnNames.Rent_PayTimeMoney;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_StartDate);
			p.SourceColumn = ColumnNames.Rent_StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_OwnerName);
			p.SourceColumn = ColumnNames.Rent_OwnerName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_OwnerMobile);
			p.SourceColumn = ColumnNames.Rent_OwnerMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_BankNumber);
			p.SourceColumn = ColumnNames.Rent_BankNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_BankName);
			p.SourceColumn = ColumnNames.Rent_BankName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_BuildName);
			p.SourceColumn = ColumnNames.Rent_BuildName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_ContractStartDate);
			p.SourceColumn = ColumnNames.Rent_ContractStartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_ContractEndDate);
			p.SourceColumn = ColumnNames.Rent_ContractEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_Archive);
			p.SourceColumn = ColumnNames.Rent_Archive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Rent_PayType);
			p.SourceColumn = ColumnNames.Rent_PayType;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
