
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblVendorsData : SqlClientEntity
	{
		public _TblVendorsData()
		{
			this.QuerySource = "TblVendorsData";
			this.MappingName = "TblVendorsData";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblVendorsDataLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Vendor_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Vendor_ID, Vendor_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblVendorsDataLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Vendor_ID
			{
				get
				{
					return new SqlParameter("@Vendor_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Vendor_Name
			{
				get
				{
					return new SqlParameter("@Vendor_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_Phone
			{
				get
				{
					return new SqlParameter("@Vendor_Phone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_Fax
			{
				get
				{
					return new SqlParameter("@Vendor_Fax", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_Address
			{
				get
				{
					return new SqlParameter("@Vendor_Address", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Vendor_BankNumber
			{
				get
				{
					return new SqlParameter("@Vendor_BankNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_BankType
			{
				get
				{
					return new SqlParameter("@Vendor_BankType", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_Email
			{
				get
				{
					return new SqlParameter("@Vendor_Email", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_SenderName
			{
				get
				{
					return new SqlParameter("@Vendor_SenderName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_SenderMobile
			{
				get
				{
					return new SqlParameter("@Vendor_SenderMobile", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Vendor_RecentMoney
			{
				get
				{
					return new SqlParameter("@Vendor_RecentMoney", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Vendor_RecentDate
			{
				get
				{
					return new SqlParameter("@Vendor_RecentDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Vendor_Details
			{
				get
				{
					return new SqlParameter("@Vendor_Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Vendor_ID = "Vendor_ID";
            public const string Vendor_Name = "Vendor_Name";
            public const string Vendor_Phone = "Vendor_Phone";
            public const string Vendor_Fax = "Vendor_Fax";
            public const string Vendor_Address = "Vendor_Address";
            public const string Vendor_BankNumber = "Vendor_BankNumber";
            public const string Vendor_BankType = "Vendor_BankType";
            public const string Vendor_Email = "Vendor_Email";
            public const string Vendor_SenderName = "Vendor_SenderName";
            public const string Vendor_SenderMobile = "Vendor_SenderMobile";
            public const string Vendor_RecentMoney = "Vendor_RecentMoney";
            public const string Vendor_RecentDate = "Vendor_RecentDate";
            public const string Vendor_Details = "Vendor_Details";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Vendor_ID] = _TblVendorsData.PropertyNames.Vendor_ID;
					ht[Vendor_Name] = _TblVendorsData.PropertyNames.Vendor_Name;
					ht[Vendor_Phone] = _TblVendorsData.PropertyNames.Vendor_Phone;
					ht[Vendor_Fax] = _TblVendorsData.PropertyNames.Vendor_Fax;
					ht[Vendor_Address] = _TblVendorsData.PropertyNames.Vendor_Address;
					ht[Vendor_BankNumber] = _TblVendorsData.PropertyNames.Vendor_BankNumber;
					ht[Vendor_BankType] = _TblVendorsData.PropertyNames.Vendor_BankType;
					ht[Vendor_Email] = _TblVendorsData.PropertyNames.Vendor_Email;
					ht[Vendor_SenderName] = _TblVendorsData.PropertyNames.Vendor_SenderName;
					ht[Vendor_SenderMobile] = _TblVendorsData.PropertyNames.Vendor_SenderMobile;
					ht[Vendor_RecentMoney] = _TblVendorsData.PropertyNames.Vendor_RecentMoney;
					ht[Vendor_RecentDate] = _TblVendorsData.PropertyNames.Vendor_RecentDate;
					ht[Vendor_Details] = _TblVendorsData.PropertyNames.Vendor_Details;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Vendor_ID = "Vendor_ID";
            public const string Vendor_Name = "Vendor_Name";
            public const string Vendor_Phone = "Vendor_Phone";
            public const string Vendor_Fax = "Vendor_Fax";
            public const string Vendor_Address = "Vendor_Address";
            public const string Vendor_BankNumber = "Vendor_BankNumber";
            public const string Vendor_BankType = "Vendor_BankType";
            public const string Vendor_Email = "Vendor_Email";
            public const string Vendor_SenderName = "Vendor_SenderName";
            public const string Vendor_SenderMobile = "Vendor_SenderMobile";
            public const string Vendor_RecentMoney = "Vendor_RecentMoney";
            public const string Vendor_RecentDate = "Vendor_RecentDate";
            public const string Vendor_Details = "Vendor_Details";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Vendor_ID] = _TblVendorsData.ColumnNames.Vendor_ID;
					ht[Vendor_Name] = _TblVendorsData.ColumnNames.Vendor_Name;
					ht[Vendor_Phone] = _TblVendorsData.ColumnNames.Vendor_Phone;
					ht[Vendor_Fax] = _TblVendorsData.ColumnNames.Vendor_Fax;
					ht[Vendor_Address] = _TblVendorsData.ColumnNames.Vendor_Address;
					ht[Vendor_BankNumber] = _TblVendorsData.ColumnNames.Vendor_BankNumber;
					ht[Vendor_BankType] = _TblVendorsData.ColumnNames.Vendor_BankType;
					ht[Vendor_Email] = _TblVendorsData.ColumnNames.Vendor_Email;
					ht[Vendor_SenderName] = _TblVendorsData.ColumnNames.Vendor_SenderName;
					ht[Vendor_SenderMobile] = _TblVendorsData.ColumnNames.Vendor_SenderMobile;
					ht[Vendor_RecentMoney] = _TblVendorsData.ColumnNames.Vendor_RecentMoney;
					ht[Vendor_RecentDate] = _TblVendorsData.ColumnNames.Vendor_RecentDate;
					ht[Vendor_Details] = _TblVendorsData.ColumnNames.Vendor_Details;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Vendor_ID = "s_Vendor_ID";
            public const string Vendor_Name = "s_Vendor_Name";
            public const string Vendor_Phone = "s_Vendor_Phone";
            public const string Vendor_Fax = "s_Vendor_Fax";
            public const string Vendor_Address = "s_Vendor_Address";
            public const string Vendor_BankNumber = "s_Vendor_BankNumber";
            public const string Vendor_BankType = "s_Vendor_BankType";
            public const string Vendor_Email = "s_Vendor_Email";
            public const string Vendor_SenderName = "s_Vendor_SenderName";
            public const string Vendor_SenderMobile = "s_Vendor_SenderMobile";
            public const string Vendor_RecentMoney = "s_Vendor_RecentMoney";
            public const string Vendor_RecentDate = "s_Vendor_RecentDate";
            public const string Vendor_Details = "s_Vendor_Details";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Vendor_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Vendor_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Vendor_ID, value);
			}
		}

		public virtual string Vendor_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Name, value);
			}
		}

		public virtual string Vendor_Phone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Phone);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Phone, value);
			}
		}

		public virtual string Vendor_Fax
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Fax);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Fax, value);
			}
		}

		public virtual string Vendor_Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Address, value);
			}
		}

		public virtual string Vendor_BankNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_BankNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_BankNumber, value);
			}
		}

		public virtual string Vendor_BankType
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_BankType);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_BankType, value);
			}
		}

		public virtual string Vendor_Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Email, value);
			}
		}

		public virtual string Vendor_SenderName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_SenderName);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_SenderName, value);
			}
		}

		public virtual string Vendor_SenderMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_SenderMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_SenderMobile, value);
			}
		}

		public virtual double Vendor_RecentMoney
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Vendor_RecentMoney);
			}
			set
	        {
				base.Setdouble(ColumnNames.Vendor_RecentMoney, value);
			}
		}

		public virtual DateTime Vendor_RecentDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Vendor_RecentDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Vendor_RecentDate, value);
			}
		}

		public virtual string Vendor_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Details, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Vendor_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_ID) ? string.Empty : base.GetintAsString(ColumnNames.Vendor_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_ID);
				else
					this.Vendor_ID = base.SetintAsString(ColumnNames.Vendor_ID, value);
			}
		}

		public virtual string s_Vendor_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Name);
				else
					this.Vendor_Name = base.SetstringAsString(ColumnNames.Vendor_Name, value);
			}
		}

		public virtual string s_Vendor_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Phone) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Phone);
				else
					this.Vendor_Phone = base.SetstringAsString(ColumnNames.Vendor_Phone, value);
			}
		}

		public virtual string s_Vendor_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Fax) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Fax);
				else
					this.Vendor_Fax = base.SetstringAsString(ColumnNames.Vendor_Fax, value);
			}
		}

		public virtual string s_Vendor_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Address) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Address);
				else
					this.Vendor_Address = base.SetstringAsString(ColumnNames.Vendor_Address, value);
			}
		}

		public virtual string s_Vendor_BankNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_BankNumber) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_BankNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_BankNumber);
				else
					this.Vendor_BankNumber = base.SetstringAsString(ColumnNames.Vendor_BankNumber, value);
			}
		}

		public virtual string s_Vendor_BankType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_BankType) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_BankType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_BankType);
				else
					this.Vendor_BankType = base.SetstringAsString(ColumnNames.Vendor_BankType, value);
			}
		}

		public virtual string s_Vendor_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Email) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Email);
				else
					this.Vendor_Email = base.SetstringAsString(ColumnNames.Vendor_Email, value);
			}
		}

		public virtual string s_Vendor_SenderName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_SenderName) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_SenderName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_SenderName);
				else
					this.Vendor_SenderName = base.SetstringAsString(ColumnNames.Vendor_SenderName, value);
			}
		}

		public virtual string s_Vendor_SenderMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_SenderMobile) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_SenderMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_SenderMobile);
				else
					this.Vendor_SenderMobile = base.SetstringAsString(ColumnNames.Vendor_SenderMobile, value);
			}
		}

		public virtual string s_Vendor_RecentMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_RecentMoney) ? string.Empty : base.GetdoubleAsString(ColumnNames.Vendor_RecentMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_RecentMoney);
				else
					this.Vendor_RecentMoney = base.SetdoubleAsString(ColumnNames.Vendor_RecentMoney, value);
			}
		}

		public virtual string s_Vendor_RecentDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_RecentDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Vendor_RecentDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_RecentDate);
				else
					this.Vendor_RecentDate = base.SetDateTimeAsString(ColumnNames.Vendor_RecentDate, value);
			}
		}

		public virtual string s_Vendor_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Details);
				else
					this.Vendor_Details = base.SetstringAsString(ColumnNames.Vendor_Details, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Vendor_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_ID, Parameters.Vendor_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Name, Parameters.Vendor_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Phone, Parameters.Vendor_Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Fax, Parameters.Vendor_Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Address, Parameters.Vendor_Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_BankNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_BankNumber, Parameters.Vendor_BankNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_BankType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_BankType, Parameters.Vendor_BankType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Email, Parameters.Vendor_Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_SenderName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_SenderName, Parameters.Vendor_SenderName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_SenderMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_SenderMobile, Parameters.Vendor_SenderMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_RecentMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_RecentMoney, Parameters.Vendor_RecentMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_RecentDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_RecentDate, Parameters.Vendor_RecentDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Details, Parameters.Vendor_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Vendor_ID
		    {
				get
		        {
					if(_Vendor_ID_W == null)
	        	    {
						_Vendor_ID_W = TearOff.Vendor_ID;
					}
					return _Vendor_ID_W;
				}
			}

			public WhereParameter Vendor_Name
		    {
				get
		        {
					if(_Vendor_Name_W == null)
	        	    {
						_Vendor_Name_W = TearOff.Vendor_Name;
					}
					return _Vendor_Name_W;
				}
			}

			public WhereParameter Vendor_Phone
		    {
				get
		        {
					if(_Vendor_Phone_W == null)
	        	    {
						_Vendor_Phone_W = TearOff.Vendor_Phone;
					}
					return _Vendor_Phone_W;
				}
			}

			public WhereParameter Vendor_Fax
		    {
				get
		        {
					if(_Vendor_Fax_W == null)
	        	    {
						_Vendor_Fax_W = TearOff.Vendor_Fax;
					}
					return _Vendor_Fax_W;
				}
			}

			public WhereParameter Vendor_Address
		    {
				get
		        {
					if(_Vendor_Address_W == null)
	        	    {
						_Vendor_Address_W = TearOff.Vendor_Address;
					}
					return _Vendor_Address_W;
				}
			}

			public WhereParameter Vendor_BankNumber
		    {
				get
		        {
					if(_Vendor_BankNumber_W == null)
	        	    {
						_Vendor_BankNumber_W = TearOff.Vendor_BankNumber;
					}
					return _Vendor_BankNumber_W;
				}
			}

			public WhereParameter Vendor_BankType
		    {
				get
		        {
					if(_Vendor_BankType_W == null)
	        	    {
						_Vendor_BankType_W = TearOff.Vendor_BankType;
					}
					return _Vendor_BankType_W;
				}
			}

			public WhereParameter Vendor_Email
		    {
				get
		        {
					if(_Vendor_Email_W == null)
	        	    {
						_Vendor_Email_W = TearOff.Vendor_Email;
					}
					return _Vendor_Email_W;
				}
			}

			public WhereParameter Vendor_SenderName
		    {
				get
		        {
					if(_Vendor_SenderName_W == null)
	        	    {
						_Vendor_SenderName_W = TearOff.Vendor_SenderName;
					}
					return _Vendor_SenderName_W;
				}
			}

			public WhereParameter Vendor_SenderMobile
		    {
				get
		        {
					if(_Vendor_SenderMobile_W == null)
	        	    {
						_Vendor_SenderMobile_W = TearOff.Vendor_SenderMobile;
					}
					return _Vendor_SenderMobile_W;
				}
			}

			public WhereParameter Vendor_RecentMoney
		    {
				get
		        {
					if(_Vendor_RecentMoney_W == null)
	        	    {
						_Vendor_RecentMoney_W = TearOff.Vendor_RecentMoney;
					}
					return _Vendor_RecentMoney_W;
				}
			}

			public WhereParameter Vendor_RecentDate
		    {
				get
		        {
					if(_Vendor_RecentDate_W == null)
	        	    {
						_Vendor_RecentDate_W = TearOff.Vendor_RecentDate;
					}
					return _Vendor_RecentDate_W;
				}
			}

			public WhereParameter Vendor_Details
		    {
				get
		        {
					if(_Vendor_Details_W == null)
	        	    {
						_Vendor_Details_W = TearOff.Vendor_Details;
					}
					return _Vendor_Details_W;
				}
			}

			private WhereParameter _Vendor_ID_W = null;
			private WhereParameter _Vendor_Name_W = null;
			private WhereParameter _Vendor_Phone_W = null;
			private WhereParameter _Vendor_Fax_W = null;
			private WhereParameter _Vendor_Address_W = null;
			private WhereParameter _Vendor_BankNumber_W = null;
			private WhereParameter _Vendor_BankType_W = null;
			private WhereParameter _Vendor_Email_W = null;
			private WhereParameter _Vendor_SenderName_W = null;
			private WhereParameter _Vendor_SenderMobile_W = null;
			private WhereParameter _Vendor_RecentMoney_W = null;
			private WhereParameter _Vendor_RecentDate_W = null;
			private WhereParameter _Vendor_Details_W = null;

			public void WhereClauseReset()
			{
				_Vendor_ID_W = null;
				_Vendor_Name_W = null;
				_Vendor_Phone_W = null;
				_Vendor_Fax_W = null;
				_Vendor_Address_W = null;
				_Vendor_BankNumber_W = null;
				_Vendor_BankType_W = null;
				_Vendor_Email_W = null;
				_Vendor_SenderName_W = null;
				_Vendor_SenderMobile_W = null;
				_Vendor_RecentMoney_W = null;
				_Vendor_RecentDate_W = null;
				_Vendor_Details_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Vendor_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_ID, Parameters.Vendor_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Name, Parameters.Vendor_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Phone, Parameters.Vendor_Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Fax, Parameters.Vendor_Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Address, Parameters.Vendor_Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_BankNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_BankNumber, Parameters.Vendor_BankNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_BankType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_BankType, Parameters.Vendor_BankType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Email, Parameters.Vendor_Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_SenderName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_SenderName, Parameters.Vendor_SenderName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_SenderMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_SenderMobile, Parameters.Vendor_SenderMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_RecentMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_RecentMoney, Parameters.Vendor_RecentMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_RecentDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_RecentDate, Parameters.Vendor_RecentDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Details, Parameters.Vendor_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Vendor_ID
		    {
				get
		        {
					if(_Vendor_ID_W == null)
	        	    {
						_Vendor_ID_W = TearOff.Vendor_ID;
					}
					return _Vendor_ID_W;
				}
			}

			public AggregateParameter Vendor_Name
		    {
				get
		        {
					if(_Vendor_Name_W == null)
	        	    {
						_Vendor_Name_W = TearOff.Vendor_Name;
					}
					return _Vendor_Name_W;
				}
			}

			public AggregateParameter Vendor_Phone
		    {
				get
		        {
					if(_Vendor_Phone_W == null)
	        	    {
						_Vendor_Phone_W = TearOff.Vendor_Phone;
					}
					return _Vendor_Phone_W;
				}
			}

			public AggregateParameter Vendor_Fax
		    {
				get
		        {
					if(_Vendor_Fax_W == null)
	        	    {
						_Vendor_Fax_W = TearOff.Vendor_Fax;
					}
					return _Vendor_Fax_W;
				}
			}

			public AggregateParameter Vendor_Address
		    {
				get
		        {
					if(_Vendor_Address_W == null)
	        	    {
						_Vendor_Address_W = TearOff.Vendor_Address;
					}
					return _Vendor_Address_W;
				}
			}

			public AggregateParameter Vendor_BankNumber
		    {
				get
		        {
					if(_Vendor_BankNumber_W == null)
	        	    {
						_Vendor_BankNumber_W = TearOff.Vendor_BankNumber;
					}
					return _Vendor_BankNumber_W;
				}
			}

			public AggregateParameter Vendor_BankType
		    {
				get
		        {
					if(_Vendor_BankType_W == null)
	        	    {
						_Vendor_BankType_W = TearOff.Vendor_BankType;
					}
					return _Vendor_BankType_W;
				}
			}

			public AggregateParameter Vendor_Email
		    {
				get
		        {
					if(_Vendor_Email_W == null)
	        	    {
						_Vendor_Email_W = TearOff.Vendor_Email;
					}
					return _Vendor_Email_W;
				}
			}

			public AggregateParameter Vendor_SenderName
		    {
				get
		        {
					if(_Vendor_SenderName_W == null)
	        	    {
						_Vendor_SenderName_W = TearOff.Vendor_SenderName;
					}
					return _Vendor_SenderName_W;
				}
			}

			public AggregateParameter Vendor_SenderMobile
		    {
				get
		        {
					if(_Vendor_SenderMobile_W == null)
	        	    {
						_Vendor_SenderMobile_W = TearOff.Vendor_SenderMobile;
					}
					return _Vendor_SenderMobile_W;
				}
			}

			public AggregateParameter Vendor_RecentMoney
		    {
				get
		        {
					if(_Vendor_RecentMoney_W == null)
	        	    {
						_Vendor_RecentMoney_W = TearOff.Vendor_RecentMoney;
					}
					return _Vendor_RecentMoney_W;
				}
			}

			public AggregateParameter Vendor_RecentDate
		    {
				get
		        {
					if(_Vendor_RecentDate_W == null)
	        	    {
						_Vendor_RecentDate_W = TearOff.Vendor_RecentDate;
					}
					return _Vendor_RecentDate_W;
				}
			}

			public AggregateParameter Vendor_Details
		    {
				get
		        {
					if(_Vendor_Details_W == null)
	        	    {
						_Vendor_Details_W = TearOff.Vendor_Details;
					}
					return _Vendor_Details_W;
				}
			}

			private AggregateParameter _Vendor_ID_W = null;
			private AggregateParameter _Vendor_Name_W = null;
			private AggregateParameter _Vendor_Phone_W = null;
			private AggregateParameter _Vendor_Fax_W = null;
			private AggregateParameter _Vendor_Address_W = null;
			private AggregateParameter _Vendor_BankNumber_W = null;
			private AggregateParameter _Vendor_BankType_W = null;
			private AggregateParameter _Vendor_Email_W = null;
			private AggregateParameter _Vendor_SenderName_W = null;
			private AggregateParameter _Vendor_SenderMobile_W = null;
			private AggregateParameter _Vendor_RecentMoney_W = null;
			private AggregateParameter _Vendor_RecentDate_W = null;
			private AggregateParameter _Vendor_Details_W = null;

			public void AggregateClauseReset()
			{
				_Vendor_ID_W = null;
				_Vendor_Name_W = null;
				_Vendor_Phone_W = null;
				_Vendor_Fax_W = null;
				_Vendor_Address_W = null;
				_Vendor_BankNumber_W = null;
				_Vendor_BankType_W = null;
				_Vendor_Email_W = null;
				_Vendor_SenderName_W = null;
				_Vendor_SenderMobile_W = null;
				_Vendor_RecentMoney_W = null;
				_Vendor_RecentDate_W = null;
				_Vendor_Details_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblVendorsDataInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Vendor_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblVendorsDataUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblVendorsDataDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Vendor_ID);
			p.SourceColumn = ColumnNames.Vendor_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Vendor_ID);
			p.SourceColumn = ColumnNames.Vendor_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Name);
			p.SourceColumn = ColumnNames.Vendor_Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Phone);
			p.SourceColumn = ColumnNames.Vendor_Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Fax);
			p.SourceColumn = ColumnNames.Vendor_Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Address);
			p.SourceColumn = ColumnNames.Vendor_Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_BankNumber);
			p.SourceColumn = ColumnNames.Vendor_BankNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_BankType);
			p.SourceColumn = ColumnNames.Vendor_BankType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Email);
			p.SourceColumn = ColumnNames.Vendor_Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_SenderName);
			p.SourceColumn = ColumnNames.Vendor_SenderName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_SenderMobile);
			p.SourceColumn = ColumnNames.Vendor_SenderMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_RecentMoney);
			p.SourceColumn = ColumnNames.Vendor_RecentMoney;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_RecentDate);
			p.SourceColumn = ColumnNames.Vendor_RecentDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Vendor_Details);
			p.SourceColumn = ColumnNames.Vendor_Details;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
