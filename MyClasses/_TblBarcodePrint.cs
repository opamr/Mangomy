
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblBarcodePrint : SqlClientEntity
	{
		public _TblBarcodePrint()
		{
			this.QuerySource = "TblBarcodePrint";
			this.MappingName = "TblBarcodePrint";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblBarcodePrintLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Barcode_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Barcode_ID, Barcode_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblBarcodePrintLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Barcode_ID
			{
				get
				{
					return new SqlParameter("@Barcode_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Title_ID
			{
				get
				{
					return new SqlParameter("@Title_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Count
			{
				get
				{
					return new SqlParameter("@Count", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pay_Price
			{
				get
				{
					return new SqlParameter("@Pay_Price", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter BarCode
			{
				get
				{
					return new SqlParameter("@BarCode", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Title_ID = "Title_ID";
            public const string Count = "Count";
            public const string Pay_Price = "Pay_Price";
            public const string BarCode = "BarCode";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = _TblBarcodePrint.PropertyNames.Barcode_ID;
					ht[Title_ID] = _TblBarcodePrint.PropertyNames.Title_ID;
					ht[Count] = _TblBarcodePrint.PropertyNames.Count;
					ht[Pay_Price] = _TblBarcodePrint.PropertyNames.Pay_Price;
					ht[BarCode] = _TblBarcodePrint.PropertyNames.BarCode;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Title_ID = "Title_ID";
            public const string Count = "Count";
            public const string Pay_Price = "Pay_Price";
            public const string BarCode = "BarCode";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = _TblBarcodePrint.ColumnNames.Barcode_ID;
					ht[Title_ID] = _TblBarcodePrint.ColumnNames.Title_ID;
					ht[Count] = _TblBarcodePrint.ColumnNames.Count;
					ht[Pay_Price] = _TblBarcodePrint.ColumnNames.Pay_Price;
					ht[BarCode] = _TblBarcodePrint.ColumnNames.BarCode;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Barcode_ID = "s_Barcode_ID";
            public const string Title_ID = "s_Title_ID";
            public const string Count = "s_Count";
            public const string Pay_Price = "s_Pay_Price";
            public const string BarCode = "s_BarCode";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Barcode_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Barcode_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual int Title_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Title_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Title_ID, value);
			}
		}

		public virtual string Count
	    {
			get
	        {
				return base.Getstring(ColumnNames.Count);
			}
			set
	        {
				base.Setstring(ColumnNames.Count, value);
			}
		}

		public virtual string Pay_Price
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pay_Price);
			}
			set
	        {
				base.Setstring(ColumnNames.Pay_Price, value);
			}
		}

		public virtual string BarCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.BarCode);
			}
			set
	        {
				base.Setstring(ColumnNames.BarCode, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Barcode_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_ID) ? string.Empty : base.GetintAsString(ColumnNames.Barcode_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_ID);
				else
					this.Barcode_ID = base.SetintAsString(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual string s_Title_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title_ID) ? string.Empty : base.GetintAsString(ColumnNames.Title_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title_ID);
				else
					this.Title_ID = base.SetintAsString(ColumnNames.Title_ID, value);
			}
		}

		public virtual string s_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Count) ? string.Empty : base.GetstringAsString(ColumnNames.Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Count);
				else
					this.Count = base.SetstringAsString(ColumnNames.Count, value);
			}
		}

		public virtual string s_Pay_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Price) ? string.Empty : base.GetstringAsString(ColumnNames.Pay_Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Price);
				else
					this.Pay_Price = base.SetstringAsString(ColumnNames.Pay_Price, value);
			}
		}

		public virtual string s_BarCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BarCode) ? string.Empty : base.GetstringAsString(ColumnNames.BarCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BarCode);
				else
					this.BarCode = base.SetstringAsString(ColumnNames.BarCode, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Barcode_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Title_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title_ID, Parameters.Title_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Count, Parameters.Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Price, Parameters.Pay_Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BarCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BarCode, Parameters.BarCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public WhereParameter Title_ID
		    {
				get
		        {
					if(_Title_ID_W == null)
	        	    {
						_Title_ID_W = TearOff.Title_ID;
					}
					return _Title_ID_W;
				}
			}

			public WhereParameter Count
		    {
				get
		        {
					if(_Count_W == null)
	        	    {
						_Count_W = TearOff.Count;
					}
					return _Count_W;
				}
			}

			public WhereParameter Pay_Price
		    {
				get
		        {
					if(_Pay_Price_W == null)
	        	    {
						_Pay_Price_W = TearOff.Pay_Price;
					}
					return _Pay_Price_W;
				}
			}

			public WhereParameter BarCode
		    {
				get
		        {
					if(_BarCode_W == null)
	        	    {
						_BarCode_W = TearOff.BarCode;
					}
					return _BarCode_W;
				}
			}

			private WhereParameter _Barcode_ID_W = null;
			private WhereParameter _Title_ID_W = null;
			private WhereParameter _Count_W = null;
			private WhereParameter _Pay_Price_W = null;
			private WhereParameter _BarCode_W = null;

			public void WhereClauseReset()
			{
				_Barcode_ID_W = null;
				_Title_ID_W = null;
				_Count_W = null;
				_Pay_Price_W = null;
				_BarCode_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Barcode_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Title_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title_ID, Parameters.Title_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Count, Parameters.Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Price, Parameters.Pay_Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BarCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BarCode, Parameters.BarCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public AggregateParameter Title_ID
		    {
				get
		        {
					if(_Title_ID_W == null)
	        	    {
						_Title_ID_W = TearOff.Title_ID;
					}
					return _Title_ID_W;
				}
			}

			public AggregateParameter Count
		    {
				get
		        {
					if(_Count_W == null)
	        	    {
						_Count_W = TearOff.Count;
					}
					return _Count_W;
				}
			}

			public AggregateParameter Pay_Price
		    {
				get
		        {
					if(_Pay_Price_W == null)
	        	    {
						_Pay_Price_W = TearOff.Pay_Price;
					}
					return _Pay_Price_W;
				}
			}

			public AggregateParameter BarCode
		    {
				get
		        {
					if(_BarCode_W == null)
	        	    {
						_BarCode_W = TearOff.BarCode;
					}
					return _BarCode_W;
				}
			}

			private AggregateParameter _Barcode_ID_W = null;
			private AggregateParameter _Title_ID_W = null;
			private AggregateParameter _Count_W = null;
			private AggregateParameter _Pay_Price_W = null;
			private AggregateParameter _BarCode_W = null;

			public void AggregateClauseReset()
			{
				_Barcode_ID_W = null;
				_Title_ID_W = null;
				_Count_W = null;
				_Pay_Price_W = null;
				_BarCode_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblBarcodePrintInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Barcode_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblBarcodePrintUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblBarcodePrintDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Barcode_ID);
			p.SourceColumn = ColumnNames.Barcode_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Barcode_ID);
			p.SourceColumn = ColumnNames.Barcode_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Title_ID);
			p.SourceColumn = ColumnNames.Title_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Count);
			p.SourceColumn = ColumnNames.Count;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pay_Price);
			p.SourceColumn = ColumnNames.Pay_Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BarCode);
			p.SourceColumn = ColumnNames.BarCode;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
