
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblEmployeesSalary : SqlClientEntity
	{
		public _TblEmployeesSalary()
		{
			this.QuerySource = "TblEmployeesSalary";
			this.MappingName = "TblEmployeesSalary";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblEmployeesSalaryLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Salary_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Salary_ID, Salary_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblEmployeesSalaryLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Salary_ID
			{
				get
				{
					return new SqlParameter("@Salary_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Salary_Month
			{
				get
				{
					return new SqlParameter("@Salary_Month", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Salary_Year
			{
				get
				{
					return new SqlParameter("@Salary_Year", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Emp_Id
			{
				get
				{
					return new SqlParameter("@Emp_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Salary_Money
			{
				get
				{
					return new SqlParameter("@Salary_Money", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Salary_House
			{
				get
				{
					return new SqlParameter("@Salary_House", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Salary_Details
			{
				get
				{
					return new SqlParameter("@Salary_Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Salary_Date
			{
				get
				{
					return new SqlParameter("@Salary_Date", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Salary_ID = "Salary_ID";
            public const string Salary_Month = "Salary_Month";
            public const string Salary_Year = "Salary_Year";
            public const string Emp_Id = "Emp_Id";
            public const string User_Id = "User_Id";
            public const string Salary_Money = "Salary_Money";
            public const string Salary_House = "Salary_House";
            public const string Salary_Details = "Salary_Details";
            public const string Salary_Date = "Salary_Date";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Salary_ID] = _TblEmployeesSalary.PropertyNames.Salary_ID;
					ht[Salary_Month] = _TblEmployeesSalary.PropertyNames.Salary_Month;
					ht[Salary_Year] = _TblEmployeesSalary.PropertyNames.Salary_Year;
					ht[Emp_Id] = _TblEmployeesSalary.PropertyNames.Emp_Id;
					ht[User_Id] = _TblEmployeesSalary.PropertyNames.User_Id;
					ht[Salary_Money] = _TblEmployeesSalary.PropertyNames.Salary_Money;
					ht[Salary_House] = _TblEmployeesSalary.PropertyNames.Salary_House;
					ht[Salary_Details] = _TblEmployeesSalary.PropertyNames.Salary_Details;
					ht[Salary_Date] = _TblEmployeesSalary.PropertyNames.Salary_Date;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Salary_ID = "Salary_ID";
            public const string Salary_Month = "Salary_Month";
            public const string Salary_Year = "Salary_Year";
            public const string Emp_Id = "Emp_Id";
            public const string User_Id = "User_Id";
            public const string Salary_Money = "Salary_Money";
            public const string Salary_House = "Salary_House";
            public const string Salary_Details = "Salary_Details";
            public const string Salary_Date = "Salary_Date";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Salary_ID] = _TblEmployeesSalary.ColumnNames.Salary_ID;
					ht[Salary_Month] = _TblEmployeesSalary.ColumnNames.Salary_Month;
					ht[Salary_Year] = _TblEmployeesSalary.ColumnNames.Salary_Year;
					ht[Emp_Id] = _TblEmployeesSalary.ColumnNames.Emp_Id;
					ht[User_Id] = _TblEmployeesSalary.ColumnNames.User_Id;
					ht[Salary_Money] = _TblEmployeesSalary.ColumnNames.Salary_Money;
					ht[Salary_House] = _TblEmployeesSalary.ColumnNames.Salary_House;
					ht[Salary_Details] = _TblEmployeesSalary.ColumnNames.Salary_Details;
					ht[Salary_Date] = _TblEmployeesSalary.ColumnNames.Salary_Date;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Salary_ID = "s_Salary_ID";
            public const string Salary_Month = "s_Salary_Month";
            public const string Salary_Year = "s_Salary_Year";
            public const string Emp_Id = "s_Emp_Id";
            public const string User_Id = "s_User_Id";
            public const string Salary_Money = "s_Salary_Money";
            public const string Salary_House = "s_Salary_House";
            public const string Salary_Details = "s_Salary_Details";
            public const string Salary_Date = "s_Salary_Date";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Salary_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Salary_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Salary_ID, value);
			}
		}

		public virtual int Salary_Month
	    {
			get
	        {
				return base.Getint(ColumnNames.Salary_Month);
			}
			set
	        {
				base.Setint(ColumnNames.Salary_Month, value);
			}
		}

		public virtual int Salary_Year
	    {
			get
	        {
				return base.Getint(ColumnNames.Salary_Year);
			}
			set
	        {
				base.Setint(ColumnNames.Salary_Year, value);
			}
		}

		public virtual int Emp_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Emp_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Emp_Id, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual double Salary_Money
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Salary_Money);
			}
			set
	        {
				base.Setdouble(ColumnNames.Salary_Money, value);
			}
		}

		public virtual double Salary_House
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Salary_House);
			}
			set
	        {
				base.Setdouble(ColumnNames.Salary_House, value);
			}
		}

		public virtual string Salary_Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Salary_Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Salary_Details, value);
			}
		}

		public virtual DateTime Salary_Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Salary_Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Salary_Date, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Salary_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_ID) ? string.Empty : base.GetintAsString(ColumnNames.Salary_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_ID);
				else
					this.Salary_ID = base.SetintAsString(ColumnNames.Salary_ID, value);
			}
		}

		public virtual string s_Salary_Month
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_Month) ? string.Empty : base.GetintAsString(ColumnNames.Salary_Month);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_Month);
				else
					this.Salary_Month = base.SetintAsString(ColumnNames.Salary_Month, value);
			}
		}

		public virtual string s_Salary_Year
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_Year) ? string.Empty : base.GetintAsString(ColumnNames.Salary_Year);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_Year);
				else
					this.Salary_Year = base.SetintAsString(ColumnNames.Salary_Year, value);
			}
		}

		public virtual string s_Emp_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Emp_Id) ? string.Empty : base.GetintAsString(ColumnNames.Emp_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Emp_Id);
				else
					this.Emp_Id = base.SetintAsString(ColumnNames.Emp_Id, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Salary_Money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_Money) ? string.Empty : base.GetdoubleAsString(ColumnNames.Salary_Money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_Money);
				else
					this.Salary_Money = base.SetdoubleAsString(ColumnNames.Salary_Money, value);
			}
		}

		public virtual string s_Salary_House
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_House) ? string.Empty : base.GetdoubleAsString(ColumnNames.Salary_House);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_House);
				else
					this.Salary_House = base.SetdoubleAsString(ColumnNames.Salary_House, value);
			}
		}

		public virtual string s_Salary_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_Details) ? string.Empty : base.GetstringAsString(ColumnNames.Salary_Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_Details);
				else
					this.Salary_Details = base.SetstringAsString(ColumnNames.Salary_Details, value);
			}
		}

		public virtual string s_Salary_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary_Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Salary_Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary_Date);
				else
					this.Salary_Date = base.SetDateTimeAsString(ColumnNames.Salary_Date, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Salary_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_ID, Parameters.Salary_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_Month
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_Month, Parameters.Salary_Month);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_Year
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_Year, Parameters.Salary_Year);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Emp_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Emp_Id, Parameters.Emp_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_Money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_Money, Parameters.Salary_Money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_House
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_House, Parameters.Salary_House);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_Details, Parameters.Salary_Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary_Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary_Date, Parameters.Salary_Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Salary_ID
		    {
				get
		        {
					if(_Salary_ID_W == null)
	        	    {
						_Salary_ID_W = TearOff.Salary_ID;
					}
					return _Salary_ID_W;
				}
			}

			public WhereParameter Salary_Month
		    {
				get
		        {
					if(_Salary_Month_W == null)
	        	    {
						_Salary_Month_W = TearOff.Salary_Month;
					}
					return _Salary_Month_W;
				}
			}

			public WhereParameter Salary_Year
		    {
				get
		        {
					if(_Salary_Year_W == null)
	        	    {
						_Salary_Year_W = TearOff.Salary_Year;
					}
					return _Salary_Year_W;
				}
			}

			public WhereParameter Emp_Id
		    {
				get
		        {
					if(_Emp_Id_W == null)
	        	    {
						_Emp_Id_W = TearOff.Emp_Id;
					}
					return _Emp_Id_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Salary_Money
		    {
				get
		        {
					if(_Salary_Money_W == null)
	        	    {
						_Salary_Money_W = TearOff.Salary_Money;
					}
					return _Salary_Money_W;
				}
			}

			public WhereParameter Salary_House
		    {
				get
		        {
					if(_Salary_House_W == null)
	        	    {
						_Salary_House_W = TearOff.Salary_House;
					}
					return _Salary_House_W;
				}
			}

			public WhereParameter Salary_Details
		    {
				get
		        {
					if(_Salary_Details_W == null)
	        	    {
						_Salary_Details_W = TearOff.Salary_Details;
					}
					return _Salary_Details_W;
				}
			}

			public WhereParameter Salary_Date
		    {
				get
		        {
					if(_Salary_Date_W == null)
	        	    {
						_Salary_Date_W = TearOff.Salary_Date;
					}
					return _Salary_Date_W;
				}
			}

			private WhereParameter _Salary_ID_W = null;
			private WhereParameter _Salary_Month_W = null;
			private WhereParameter _Salary_Year_W = null;
			private WhereParameter _Emp_Id_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Salary_Money_W = null;
			private WhereParameter _Salary_House_W = null;
			private WhereParameter _Salary_Details_W = null;
			private WhereParameter _Salary_Date_W = null;

			public void WhereClauseReset()
			{
				_Salary_ID_W = null;
				_Salary_Month_W = null;
				_Salary_Year_W = null;
				_Emp_Id_W = null;
				_User_Id_W = null;
				_Salary_Money_W = null;
				_Salary_House_W = null;
				_Salary_Details_W = null;
				_Salary_Date_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Salary_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_ID, Parameters.Salary_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_Month
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_Month, Parameters.Salary_Month);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_Year
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_Year, Parameters.Salary_Year);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Emp_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Emp_Id, Parameters.Emp_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_Money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_Money, Parameters.Salary_Money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_House
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_House, Parameters.Salary_House);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_Details, Parameters.Salary_Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary_Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary_Date, Parameters.Salary_Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Salary_ID
		    {
				get
		        {
					if(_Salary_ID_W == null)
	        	    {
						_Salary_ID_W = TearOff.Salary_ID;
					}
					return _Salary_ID_W;
				}
			}

			public AggregateParameter Salary_Month
		    {
				get
		        {
					if(_Salary_Month_W == null)
	        	    {
						_Salary_Month_W = TearOff.Salary_Month;
					}
					return _Salary_Month_W;
				}
			}

			public AggregateParameter Salary_Year
		    {
				get
		        {
					if(_Salary_Year_W == null)
	        	    {
						_Salary_Year_W = TearOff.Salary_Year;
					}
					return _Salary_Year_W;
				}
			}

			public AggregateParameter Emp_Id
		    {
				get
		        {
					if(_Emp_Id_W == null)
	        	    {
						_Emp_Id_W = TearOff.Emp_Id;
					}
					return _Emp_Id_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Salary_Money
		    {
				get
		        {
					if(_Salary_Money_W == null)
	        	    {
						_Salary_Money_W = TearOff.Salary_Money;
					}
					return _Salary_Money_W;
				}
			}

			public AggregateParameter Salary_House
		    {
				get
		        {
					if(_Salary_House_W == null)
	        	    {
						_Salary_House_W = TearOff.Salary_House;
					}
					return _Salary_House_W;
				}
			}

			public AggregateParameter Salary_Details
		    {
				get
		        {
					if(_Salary_Details_W == null)
	        	    {
						_Salary_Details_W = TearOff.Salary_Details;
					}
					return _Salary_Details_W;
				}
			}

			public AggregateParameter Salary_Date
		    {
				get
		        {
					if(_Salary_Date_W == null)
	        	    {
						_Salary_Date_W = TearOff.Salary_Date;
					}
					return _Salary_Date_W;
				}
			}

			private AggregateParameter _Salary_ID_W = null;
			private AggregateParameter _Salary_Month_W = null;
			private AggregateParameter _Salary_Year_W = null;
			private AggregateParameter _Emp_Id_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Salary_Money_W = null;
			private AggregateParameter _Salary_House_W = null;
			private AggregateParameter _Salary_Details_W = null;
			private AggregateParameter _Salary_Date_W = null;

			public void AggregateClauseReset()
			{
				_Salary_ID_W = null;
				_Salary_Month_W = null;
				_Salary_Year_W = null;
				_Emp_Id_W = null;
				_User_Id_W = null;
				_Salary_Money_W = null;
				_Salary_House_W = null;
				_Salary_Details_W = null;
				_Salary_Date_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblEmployeesSalaryInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Salary_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblEmployeesSalaryUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblEmployeesSalaryDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Salary_ID);
			p.SourceColumn = ColumnNames.Salary_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Salary_ID);
			p.SourceColumn = ColumnNames.Salary_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_Month);
			p.SourceColumn = ColumnNames.Salary_Month;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_Year);
			p.SourceColumn = ColumnNames.Salary_Year;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Emp_Id);
			p.SourceColumn = ColumnNames.Emp_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.User_Id);
			p.SourceColumn = ColumnNames.User_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_Money);
			p.SourceColumn = ColumnNames.Salary_Money;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_House);
			p.SourceColumn = ColumnNames.Salary_House;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_Details);
			p.SourceColumn = ColumnNames.Salary_Details;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Salary_Date);
			p.SourceColumn = ColumnNames.Salary_Date;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
