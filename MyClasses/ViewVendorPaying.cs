/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public class ViewVendorPaying : SqlClientEntity
	{
		public ViewVendorPaying()
		{
			this.QuerySource = "ViewVendorPaying";
			this.MappingName = "ViewVendorPaying";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Ven_PayID
			{
				get
				{
					return new SqlParameter("@Ven_PayID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Ven_PayDate
			{
				get
				{
					return new SqlParameter("@Ven_PayDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Ven_PayMoney
			{
				get
				{
					return new SqlParameter("@Ven_PayMoney", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Ven_PayDetails
			{
				get
				{
					return new SqlParameter("@Ven_PayDetails", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Vendor_Sendor
			{
				get
				{
					return new SqlParameter("@Vendor_Sendor", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter User_Id
			{
				get
				{
					return new SqlParameter("@User_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Vendor_Id
			{
				get
				{
					return new SqlParameter("@Vendor_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bill_Id
			{
				get
				{
					return new SqlParameter("@Bill_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bank_Id
			{
				get
				{
					return new SqlParameter("@Bank_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Vendor_Name
			{
				get
				{
					return new SqlParameter("@Vendor_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter User_Name
			{
				get
				{
					return new SqlParameter("@User_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Bank_Name
			{
				get
				{
					return new SqlParameter("@Bank_Name", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pay_Wasl
			{
				get
				{
					return new SqlParameter("@Pay_Wasl", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pay_Nots
			{
				get
				{
					return new SqlParameter("@Pay_Nots", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Ven_PayID = "Ven_PayID";
            public const string Ven_PayDate = "Ven_PayDate";
            public const string Ven_PayMoney = "Ven_PayMoney";
            public const string Ven_PayDetails = "Ven_PayDetails";
            public const string Vendor_Sendor = "Vendor_Sendor";
            public const string User_Id = "User_Id";
            public const string Vendor_Id = "Vendor_Id";
            public const string Bill_Id = "Bill_Id";
            public const string Bank_Id = "Bank_Id";
            public const string Vendor_Name = "Vendor_Name";
            public const string User_Name = "User_Name";
            public const string Bank_Name = "Bank_Name";
            public const string Pay_Wasl = "Pay_Wasl";
            public const string Pay_Nots = "Pay_Nots";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Ven_PayID] = ViewVendorPaying.PropertyNames.Ven_PayID;
					ht[Ven_PayDate] = ViewVendorPaying.PropertyNames.Ven_PayDate;
					ht[Ven_PayMoney] = ViewVendorPaying.PropertyNames.Ven_PayMoney;
					ht[Ven_PayDetails] = ViewVendorPaying.PropertyNames.Ven_PayDetails;
					ht[Vendor_Sendor] = ViewVendorPaying.PropertyNames.Vendor_Sendor;
					ht[User_Id] = ViewVendorPaying.PropertyNames.User_Id;
					ht[Vendor_Id] = ViewVendorPaying.PropertyNames.Vendor_Id;
					ht[Bill_Id] = ViewVendorPaying.PropertyNames.Bill_Id;
					ht[Bank_Id] = ViewVendorPaying.PropertyNames.Bank_Id;
					ht[Vendor_Name] = ViewVendorPaying.PropertyNames.Vendor_Name;
					ht[User_Name] = ViewVendorPaying.PropertyNames.User_Name;
					ht[Bank_Name] = ViewVendorPaying.PropertyNames.Bank_Name;
					ht[Pay_Wasl] = ViewVendorPaying.PropertyNames.Pay_Wasl;
					ht[Pay_Nots] = ViewVendorPaying.PropertyNames.Pay_Nots;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Ven_PayID = "Ven_PayID";
            public const string Ven_PayDate = "Ven_PayDate";
            public const string Ven_PayMoney = "Ven_PayMoney";
            public const string Ven_PayDetails = "Ven_PayDetails";
            public const string Vendor_Sendor = "Vendor_Sendor";
            public const string User_Id = "User_Id";
            public const string Vendor_Id = "Vendor_Id";
            public const string Bill_Id = "Bill_Id";
            public const string Bank_Id = "Bank_Id";
            public const string Vendor_Name = "Vendor_Name";
            public const string User_Name = "User_Name";
            public const string Bank_Name = "Bank_Name";
            public const string Pay_Wasl = "Pay_Wasl";
            public const string Pay_Nots = "Pay_Nots";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Ven_PayID] = ViewVendorPaying.ColumnNames.Ven_PayID;
					ht[Ven_PayDate] = ViewVendorPaying.ColumnNames.Ven_PayDate;
					ht[Ven_PayMoney] = ViewVendorPaying.ColumnNames.Ven_PayMoney;
					ht[Ven_PayDetails] = ViewVendorPaying.ColumnNames.Ven_PayDetails;
					ht[Vendor_Sendor] = ViewVendorPaying.ColumnNames.Vendor_Sendor;
					ht[User_Id] = ViewVendorPaying.ColumnNames.User_Id;
					ht[Vendor_Id] = ViewVendorPaying.ColumnNames.Vendor_Id;
					ht[Bill_Id] = ViewVendorPaying.ColumnNames.Bill_Id;
					ht[Bank_Id] = ViewVendorPaying.ColumnNames.Bank_Id;
					ht[Vendor_Name] = ViewVendorPaying.ColumnNames.Vendor_Name;
					ht[User_Name] = ViewVendorPaying.ColumnNames.User_Name;
					ht[Bank_Name] = ViewVendorPaying.ColumnNames.Bank_Name;
					ht[Pay_Wasl] = ViewVendorPaying.ColumnNames.Pay_Wasl;
					ht[Pay_Nots] = ViewVendorPaying.ColumnNames.Pay_Nots;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Ven_PayID = "s_Ven_PayID";
            public const string Ven_PayDate = "s_Ven_PayDate";
            public const string Ven_PayMoney = "s_Ven_PayMoney";
            public const string Ven_PayDetails = "s_Ven_PayDetails";
            public const string Vendor_Sendor = "s_Vendor_Sendor";
            public const string User_Id = "s_User_Id";
            public const string Vendor_Id = "s_Vendor_Id";
            public const string Bill_Id = "s_Bill_Id";
            public const string Bank_Id = "s_Bank_Id";
            public const string Vendor_Name = "s_Vendor_Name";
            public const string User_Name = "s_User_Name";
            public const string Bank_Name = "s_Bank_Name";
            public const string Pay_Wasl = "s_Pay_Wasl";
            public const string Pay_Nots = "s_Pay_Nots";

		}
		#endregion	
		
		#region Properties
			public virtual int Ven_PayID
	    {
			get
	        {
				return base.Getint(ColumnNames.Ven_PayID);
			}
			set
	        {
				base.Setint(ColumnNames.Ven_PayID, value);
			}
		}

		public virtual DateTime Ven_PayDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Ven_PayDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Ven_PayDate, value);
			}
		}

		public virtual double Ven_PayMoney
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Ven_PayMoney);
			}
			set
	        {
				base.Setdouble(ColumnNames.Ven_PayMoney, value);
			}
		}

		public virtual string Ven_PayDetails
	    {
			get
	        {
				return base.Getstring(ColumnNames.Ven_PayDetails);
			}
			set
	        {
				base.Setstring(ColumnNames.Ven_PayDetails, value);
			}
		}

		public virtual string Vendor_Sendor
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Sendor);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Sendor, value);
			}
		}

		public virtual int User_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.User_Id);
			}
			set
	        {
				base.Setint(ColumnNames.User_Id, value);
			}
		}

		public virtual int Vendor_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Vendor_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Vendor_Id, value);
			}
		}

		public virtual int Bill_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Bill_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Bill_Id, value);
			}
		}

		public virtual int Bank_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Bank_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Bank_Id, value);
			}
		}

		public virtual string Vendor_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Vendor_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Vendor_Name, value);
			}
		}

		public virtual string User_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.User_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.User_Name, value);
			}
		}

		public virtual string Bank_Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bank_Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Bank_Name, value);
			}
		}

		public virtual string Pay_Wasl
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pay_Wasl);
			}
			set
	        {
				base.Setstring(ColumnNames.Pay_Wasl, value);
			}
		}

		public virtual string Pay_Nots
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pay_Nots);
			}
			set
	        {
				base.Setstring(ColumnNames.Pay_Nots, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Ven_PayID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ven_PayID) ? string.Empty : base.GetintAsString(ColumnNames.Ven_PayID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ven_PayID);
				else
					this.Ven_PayID = base.SetintAsString(ColumnNames.Ven_PayID, value);
			}
		}

		public virtual string s_Ven_PayDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ven_PayDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Ven_PayDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ven_PayDate);
				else
					this.Ven_PayDate = base.SetDateTimeAsString(ColumnNames.Ven_PayDate, value);
			}
		}

		public virtual string s_Ven_PayMoney
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ven_PayMoney) ? string.Empty : base.GetdoubleAsString(ColumnNames.Ven_PayMoney);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ven_PayMoney);
				else
					this.Ven_PayMoney = base.SetdoubleAsString(ColumnNames.Ven_PayMoney, value);
			}
		}

		public virtual string s_Ven_PayDetails
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Ven_PayDetails) ? string.Empty : base.GetstringAsString(ColumnNames.Ven_PayDetails);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Ven_PayDetails);
				else
					this.Ven_PayDetails = base.SetstringAsString(ColumnNames.Ven_PayDetails, value);
			}
		}

		public virtual string s_Vendor_Sendor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Sendor) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Sendor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Sendor);
				else
					this.Vendor_Sendor = base.SetstringAsString(ColumnNames.Vendor_Sendor, value);
			}
		}

		public virtual string s_User_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Id) ? string.Empty : base.GetintAsString(ColumnNames.User_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Id);
				else
					this.User_Id = base.SetintAsString(ColumnNames.User_Id, value);
			}
		}

		public virtual string s_Vendor_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Id) ? string.Empty : base.GetintAsString(ColumnNames.Vendor_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Id);
				else
					this.Vendor_Id = base.SetintAsString(ColumnNames.Vendor_Id, value);
			}
		}

		public virtual string s_Bill_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bill_Id) ? string.Empty : base.GetintAsString(ColumnNames.Bill_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bill_Id);
				else
					this.Bill_Id = base.SetintAsString(ColumnNames.Bill_Id, value);
			}
		}

		public virtual string s_Bank_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bank_Id) ? string.Empty : base.GetintAsString(ColumnNames.Bank_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bank_Id);
				else
					this.Bank_Id = base.SetintAsString(ColumnNames.Bank_Id, value);
			}
		}

		public virtual string s_Vendor_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Vendor_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Vendor_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Vendor_Name);
				else
					this.Vendor_Name = base.SetstringAsString(ColumnNames.Vendor_Name, value);
			}
		}

		public virtual string s_User_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.User_Name) ? string.Empty : base.GetstringAsString(ColumnNames.User_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.User_Name);
				else
					this.User_Name = base.SetstringAsString(ColumnNames.User_Name, value);
			}
		}

		public virtual string s_Bank_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bank_Name) ? string.Empty : base.GetstringAsString(ColumnNames.Bank_Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bank_Name);
				else
					this.Bank_Name = base.SetstringAsString(ColumnNames.Bank_Name, value);
			}
		}

		public virtual string s_Pay_Wasl
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Wasl) ? string.Empty : base.GetstringAsString(ColumnNames.Pay_Wasl);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Wasl);
				else
					this.Pay_Wasl = base.SetstringAsString(ColumnNames.Pay_Wasl, value);
			}
		}

		public virtual string s_Pay_Nots
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pay_Nots) ? string.Empty : base.GetstringAsString(ColumnNames.Pay_Nots);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pay_Nots);
				else
					this.Pay_Nots = base.SetstringAsString(ColumnNames.Pay_Nots, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Ven_PayID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ven_PayID, Parameters.Ven_PayID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ven_PayDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ven_PayDate, Parameters.Ven_PayDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ven_PayMoney
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ven_PayMoney, Parameters.Ven_PayMoney);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Ven_PayDetails
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Ven_PayDetails, Parameters.Ven_PayDetails);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Sendor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Sendor, Parameters.Vendor_Sendor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Id, Parameters.Vendor_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bill_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bill_Id, Parameters.Bill_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bank_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Vendor_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Vendor_Name, Parameters.Vendor_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter User_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bank_Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bank_Name, Parameters.Bank_Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Wasl
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Wasl, Parameters.Pay_Wasl);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pay_Nots
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pay_Nots, Parameters.Pay_Nots);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Ven_PayID
		    {
				get
		        {
					if(_Ven_PayID_W == null)
	        	    {
						_Ven_PayID_W = TearOff.Ven_PayID;
					}
					return _Ven_PayID_W;
				}
			}

			public WhereParameter Ven_PayDate
		    {
				get
		        {
					if(_Ven_PayDate_W == null)
	        	    {
						_Ven_PayDate_W = TearOff.Ven_PayDate;
					}
					return _Ven_PayDate_W;
				}
			}

			public WhereParameter Ven_PayMoney
		    {
				get
		        {
					if(_Ven_PayMoney_W == null)
	        	    {
						_Ven_PayMoney_W = TearOff.Ven_PayMoney;
					}
					return _Ven_PayMoney_W;
				}
			}

			public WhereParameter Ven_PayDetails
		    {
				get
		        {
					if(_Ven_PayDetails_W == null)
	        	    {
						_Ven_PayDetails_W = TearOff.Ven_PayDetails;
					}
					return _Ven_PayDetails_W;
				}
			}

			public WhereParameter Vendor_Sendor
		    {
				get
		        {
					if(_Vendor_Sendor_W == null)
	        	    {
						_Vendor_Sendor_W = TearOff.Vendor_Sendor;
					}
					return _Vendor_Sendor_W;
				}
			}

			public WhereParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public WhereParameter Vendor_Id
		    {
				get
		        {
					if(_Vendor_Id_W == null)
	        	    {
						_Vendor_Id_W = TearOff.Vendor_Id;
					}
					return _Vendor_Id_W;
				}
			}

			public WhereParameter Bill_Id
		    {
				get
		        {
					if(_Bill_Id_W == null)
	        	    {
						_Bill_Id_W = TearOff.Bill_Id;
					}
					return _Bill_Id_W;
				}
			}

			public WhereParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public WhereParameter Vendor_Name
		    {
				get
		        {
					if(_Vendor_Name_W == null)
	        	    {
						_Vendor_Name_W = TearOff.Vendor_Name;
					}
					return _Vendor_Name_W;
				}
			}

			public WhereParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			public WhereParameter Bank_Name
		    {
				get
		        {
					if(_Bank_Name_W == null)
	        	    {
						_Bank_Name_W = TearOff.Bank_Name;
					}
					return _Bank_Name_W;
				}
			}

			public WhereParameter Pay_Wasl
		    {
				get
		        {
					if(_Pay_Wasl_W == null)
	        	    {
						_Pay_Wasl_W = TearOff.Pay_Wasl;
					}
					return _Pay_Wasl_W;
				}
			}

			public WhereParameter Pay_Nots
		    {
				get
		        {
					if(_Pay_Nots_W == null)
	        	    {
						_Pay_Nots_W = TearOff.Pay_Nots;
					}
					return _Pay_Nots_W;
				}
			}

			private WhereParameter _Ven_PayID_W = null;
			private WhereParameter _Ven_PayDate_W = null;
			private WhereParameter _Ven_PayMoney_W = null;
			private WhereParameter _Ven_PayDetails_W = null;
			private WhereParameter _Vendor_Sendor_W = null;
			private WhereParameter _User_Id_W = null;
			private WhereParameter _Vendor_Id_W = null;
			private WhereParameter _Bill_Id_W = null;
			private WhereParameter _Bank_Id_W = null;
			private WhereParameter _Vendor_Name_W = null;
			private WhereParameter _User_Name_W = null;
			private WhereParameter _Bank_Name_W = null;
			private WhereParameter _Pay_Wasl_W = null;
			private WhereParameter _Pay_Nots_W = null;

			public void WhereClauseReset()
			{
				_Ven_PayID_W = null;
				_Ven_PayDate_W = null;
				_Ven_PayMoney_W = null;
				_Ven_PayDetails_W = null;
				_Vendor_Sendor_W = null;
				_User_Id_W = null;
				_Vendor_Id_W = null;
				_Bill_Id_W = null;
				_Bank_Id_W = null;
				_Vendor_Name_W = null;
				_User_Name_W = null;
				_Bank_Name_W = null;
				_Pay_Wasl_W = null;
				_Pay_Nots_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Ven_PayID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ven_PayID, Parameters.Ven_PayID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ven_PayDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ven_PayDate, Parameters.Ven_PayDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ven_PayMoney
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ven_PayMoney, Parameters.Ven_PayMoney);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Ven_PayDetails
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Ven_PayDetails, Parameters.Ven_PayDetails);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Sendor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Sendor, Parameters.Vendor_Sendor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Id, Parameters.User_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Id, Parameters.Vendor_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bill_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bill_Id, Parameters.Bill_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bank_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bank_Id, Parameters.Bank_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Vendor_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Vendor_Name, Parameters.Vendor_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter User_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.User_Name, Parameters.User_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bank_Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bank_Name, Parameters.Bank_Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Wasl
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Wasl, Parameters.Pay_Wasl);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pay_Nots
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pay_Nots, Parameters.Pay_Nots);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Ven_PayID
		    {
				get
		        {
					if(_Ven_PayID_W == null)
	        	    {
						_Ven_PayID_W = TearOff.Ven_PayID;
					}
					return _Ven_PayID_W;
				}
			}

			public AggregateParameter Ven_PayDate
		    {
				get
		        {
					if(_Ven_PayDate_W == null)
	        	    {
						_Ven_PayDate_W = TearOff.Ven_PayDate;
					}
					return _Ven_PayDate_W;
				}
			}

			public AggregateParameter Ven_PayMoney
		    {
				get
		        {
					if(_Ven_PayMoney_W == null)
	        	    {
						_Ven_PayMoney_W = TearOff.Ven_PayMoney;
					}
					return _Ven_PayMoney_W;
				}
			}

			public AggregateParameter Ven_PayDetails
		    {
				get
		        {
					if(_Ven_PayDetails_W == null)
	        	    {
						_Ven_PayDetails_W = TearOff.Ven_PayDetails;
					}
					return _Ven_PayDetails_W;
				}
			}

			public AggregateParameter Vendor_Sendor
		    {
				get
		        {
					if(_Vendor_Sendor_W == null)
	        	    {
						_Vendor_Sendor_W = TearOff.Vendor_Sendor;
					}
					return _Vendor_Sendor_W;
				}
			}

			public AggregateParameter User_Id
		    {
				get
		        {
					if(_User_Id_W == null)
	        	    {
						_User_Id_W = TearOff.User_Id;
					}
					return _User_Id_W;
				}
			}

			public AggregateParameter Vendor_Id
		    {
				get
		        {
					if(_Vendor_Id_W == null)
	        	    {
						_Vendor_Id_W = TearOff.Vendor_Id;
					}
					return _Vendor_Id_W;
				}
			}

			public AggregateParameter Bill_Id
		    {
				get
		        {
					if(_Bill_Id_W == null)
	        	    {
						_Bill_Id_W = TearOff.Bill_Id;
					}
					return _Bill_Id_W;
				}
			}

			public AggregateParameter Bank_Id
		    {
				get
		        {
					if(_Bank_Id_W == null)
	        	    {
						_Bank_Id_W = TearOff.Bank_Id;
					}
					return _Bank_Id_W;
				}
			}

			public AggregateParameter Vendor_Name
		    {
				get
		        {
					if(_Vendor_Name_W == null)
	        	    {
						_Vendor_Name_W = TearOff.Vendor_Name;
					}
					return _Vendor_Name_W;
				}
			}

			public AggregateParameter User_Name
		    {
				get
		        {
					if(_User_Name_W == null)
	        	    {
						_User_Name_W = TearOff.User_Name;
					}
					return _User_Name_W;
				}
			}

			public AggregateParameter Bank_Name
		    {
				get
		        {
					if(_Bank_Name_W == null)
	        	    {
						_Bank_Name_W = TearOff.Bank_Name;
					}
					return _Bank_Name_W;
				}
			}

			public AggregateParameter Pay_Wasl
		    {
				get
		        {
					if(_Pay_Wasl_W == null)
	        	    {
						_Pay_Wasl_W = TearOff.Pay_Wasl;
					}
					return _Pay_Wasl_W;
				}
			}

			public AggregateParameter Pay_Nots
		    {
				get
		        {
					if(_Pay_Nots_W == null)
	        	    {
						_Pay_Nots_W = TearOff.Pay_Nots;
					}
					return _Pay_Nots_W;
				}
			}

			private AggregateParameter _Ven_PayID_W = null;
			private AggregateParameter _Ven_PayDate_W = null;
			private AggregateParameter _Ven_PayMoney_W = null;
			private AggregateParameter _Ven_PayDetails_W = null;
			private AggregateParameter _Vendor_Sendor_W = null;
			private AggregateParameter _User_Id_W = null;
			private AggregateParameter _Vendor_Id_W = null;
			private AggregateParameter _Bill_Id_W = null;
			private AggregateParameter _Bank_Id_W = null;
			private AggregateParameter _Vendor_Name_W = null;
			private AggregateParameter _User_Name_W = null;
			private AggregateParameter _Bank_Name_W = null;
			private AggregateParameter _Pay_Wasl_W = null;
			private AggregateParameter _Pay_Nots_W = null;

			public void AggregateClauseReset()
			{
				_Ven_PayID_W = null;
				_Ven_PayDate_W = null;
				_Ven_PayMoney_W = null;
				_Ven_PayDetails_W = null;
				_Vendor_Sendor_W = null;
				_User_Id_W = null;
				_Vendor_Id_W = null;
				_Bill_Id_W = null;
				_Bank_Id_W = null;
				_Vendor_Name_W = null;
				_User_Name_W = null;
				_Bank_Name_W = null;
				_Pay_Wasl_W = null;
				_Pay_Nots_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
