
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblGoodsTitles : SqlClientEntity
	{
		public _TblGoodsTitles()
		{
			this.QuerySource = "TblGoodsTitles";
			this.MappingName = "TblGoodsTitles";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblGoodsTitlesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Title_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Title_ID, Title_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblGoodsTitlesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Title_ID
			{
				get
				{
					return new SqlParameter("@Title_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Good_TraidName
			{
				get
				{
					return new SqlParameter("@Good_TraidName", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Category_Id
			{
				get
				{
					return new SqlParameter("@Category_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Good_MinimumCount
			{
				get
				{
					return new SqlParameter("@Good_MinimumCount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount0
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount0", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount1
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount1", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter FirstStore_Amount2
			{
				get
				{
					return new SqlParameter("@FirstStore_Amount2", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Good_FirstDate
			{
				get
				{
					return new SqlParameter("@Good_FirstDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Good_CurrentCount
			{
				get
				{
					return new SqlParameter("@Good_CurrentCount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Good_RequiredCount
			{
				get
				{
					return new SqlParameter("@Good_RequiredCount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Good_ImagePath
			{
				get
				{
					return new SqlParameter("@Good_ImagePath", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Title_ID = "Title_ID";
            public const string Good_TraidName = "Good_TraidName";
            public const string Category_Id = "Category_Id";
            public const string Good_MinimumCount = "Good_MinimumCount";
            public const string FirstStore_Amount0 = "FirstStore_Amount0";
            public const string FirstStore_Amount1 = "FirstStore_Amount1";
            public const string FirstStore_Amount2 = "FirstStore_Amount2";
            public const string Good_FirstDate = "Good_FirstDate";
            public const string Good_CurrentCount = "Good_CurrentCount";
            public const string Good_RequiredCount = "Good_RequiredCount";
            public const string Good_ImagePath = "Good_ImagePath";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Title_ID] = _TblGoodsTitles.PropertyNames.Title_ID;
					ht[Good_TraidName] = _TblGoodsTitles.PropertyNames.Good_TraidName;
					ht[Category_Id] = _TblGoodsTitles.PropertyNames.Category_Id;
					ht[Good_MinimumCount] = _TblGoodsTitles.PropertyNames.Good_MinimumCount;
					ht[FirstStore_Amount0] = _TblGoodsTitles.PropertyNames.FirstStore_Amount0;
					ht[FirstStore_Amount1] = _TblGoodsTitles.PropertyNames.FirstStore_Amount1;
					ht[FirstStore_Amount2] = _TblGoodsTitles.PropertyNames.FirstStore_Amount2;
					ht[Good_FirstDate] = _TblGoodsTitles.PropertyNames.Good_FirstDate;
					ht[Good_CurrentCount] = _TblGoodsTitles.PropertyNames.Good_CurrentCount;
					ht[Good_RequiredCount] = _TblGoodsTitles.PropertyNames.Good_RequiredCount;
					ht[Good_ImagePath] = _TblGoodsTitles.PropertyNames.Good_ImagePath;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Title_ID = "Title_ID";
            public const string Good_TraidName = "Good_TraidName";
            public const string Category_Id = "Category_Id";
            public const string Good_MinimumCount = "Good_MinimumCount";
            public const string FirstStore_Amount0 = "FirstStore_Amount0";
            public const string FirstStore_Amount1 = "FirstStore_Amount1";
            public const string FirstStore_Amount2 = "FirstStore_Amount2";
            public const string Good_FirstDate = "Good_FirstDate";
            public const string Good_CurrentCount = "Good_CurrentCount";
            public const string Good_RequiredCount = "Good_RequiredCount";
            public const string Good_ImagePath = "Good_ImagePath";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Title_ID] = _TblGoodsTitles.ColumnNames.Title_ID;
					ht[Good_TraidName] = _TblGoodsTitles.ColumnNames.Good_TraidName;
					ht[Category_Id] = _TblGoodsTitles.ColumnNames.Category_Id;
					ht[Good_MinimumCount] = _TblGoodsTitles.ColumnNames.Good_MinimumCount;
					ht[FirstStore_Amount0] = _TblGoodsTitles.ColumnNames.FirstStore_Amount0;
					ht[FirstStore_Amount1] = _TblGoodsTitles.ColumnNames.FirstStore_Amount1;
					ht[FirstStore_Amount2] = _TblGoodsTitles.ColumnNames.FirstStore_Amount2;
					ht[Good_FirstDate] = _TblGoodsTitles.ColumnNames.Good_FirstDate;
					ht[Good_CurrentCount] = _TblGoodsTitles.ColumnNames.Good_CurrentCount;
					ht[Good_RequiredCount] = _TblGoodsTitles.ColumnNames.Good_RequiredCount;
					ht[Good_ImagePath] = _TblGoodsTitles.ColumnNames.Good_ImagePath;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Title_ID = "s_Title_ID";
            public const string Good_TraidName = "s_Good_TraidName";
            public const string Category_Id = "s_Category_Id";
            public const string Good_MinimumCount = "s_Good_MinimumCount";
            public const string FirstStore_Amount0 = "s_FirstStore_Amount0";
            public const string FirstStore_Amount1 = "s_FirstStore_Amount1";
            public const string FirstStore_Amount2 = "s_FirstStore_Amount2";
            public const string Good_FirstDate = "s_Good_FirstDate";
            public const string Good_CurrentCount = "s_Good_CurrentCount";
            public const string Good_RequiredCount = "s_Good_RequiredCount";
            public const string Good_ImagePath = "s_Good_ImagePath";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Title_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Title_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Title_ID, value);
			}
		}

		public virtual string Good_TraidName
	    {
			get
	        {
				return base.Getstring(ColumnNames.Good_TraidName);
			}
			set
	        {
				base.Setstring(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual int Category_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Category_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Category_Id, value);
			}
		}

		public virtual double Good_MinimumCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_MinimumCount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Good_MinimumCount, value);
			}
		}

		public virtual double FirstStore_Amount0
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount0);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount0, value);
			}
		}

		public virtual double FirstStore_Amount1
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount1);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount1, value);
			}
		}

		public virtual double FirstStore_Amount2
	    {
			get
	        {
				return base.Getdouble(ColumnNames.FirstStore_Amount2);
			}
			set
	        {
				base.Setdouble(ColumnNames.FirstStore_Amount2, value);
			}
		}

		public virtual DateTime Good_FirstDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Good_FirstDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Good_FirstDate, value);
			}
		}

		public virtual double Good_CurrentCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_CurrentCount);
			}
			set
	        {
				base.Setdouble(ColumnNames.Good_CurrentCount, value);
			}
		}

		public virtual double Good_RequiredCount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Good_RequiredCount);
			}
		}

		public virtual string Good_ImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.Good_ImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.Good_ImagePath, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Title_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title_ID) ? string.Empty : base.GetintAsString(ColumnNames.Title_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title_ID);
				else
					this.Title_ID = base.SetintAsString(ColumnNames.Title_ID, value);
			}
		}

		public virtual string s_Good_TraidName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_TraidName) ? string.Empty : base.GetstringAsString(ColumnNames.Good_TraidName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_TraidName);
				else
					this.Good_TraidName = base.SetstringAsString(ColumnNames.Good_TraidName, value);
			}
		}

		public virtual string s_Category_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Category_Id) ? string.Empty : base.GetintAsString(ColumnNames.Category_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Category_Id);
				else
					this.Category_Id = base.SetintAsString(ColumnNames.Category_Id, value);
			}
		}

		public virtual string s_Good_MinimumCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_MinimumCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_MinimumCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_MinimumCount);
				else
					this.Good_MinimumCount = base.SetdoubleAsString(ColumnNames.Good_MinimumCount, value);
			}
		}

		public virtual string s_FirstStore_Amount0
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount0) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount0);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount0);
				else
					this.FirstStore_Amount0 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount0, value);
			}
		}

		public virtual string s_FirstStore_Amount1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount1) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount1);
				else
					this.FirstStore_Amount1 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount1, value);
			}
		}

		public virtual string s_FirstStore_Amount2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstStore_Amount2) ? string.Empty : base.GetdoubleAsString(ColumnNames.FirstStore_Amount2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstStore_Amount2);
				else
					this.FirstStore_Amount2 = base.SetdoubleAsString(ColumnNames.FirstStore_Amount2, value);
			}
		}

		public virtual string s_Good_FirstDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_FirstDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Good_FirstDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_FirstDate);
				else
					this.Good_FirstDate = base.SetDateTimeAsString(ColumnNames.Good_FirstDate, value);
			}
		}

		public virtual string s_Good_CurrentCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_CurrentCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_CurrentCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_CurrentCount);
				else
					this.Good_CurrentCount = base.SetdoubleAsString(ColumnNames.Good_CurrentCount, value);
			}
		}

		public virtual string s_Good_RequiredCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_RequiredCount) ? string.Empty : base.GetdoubleAsString(ColumnNames.Good_RequiredCount);
			}
		}

		public virtual string s_Good_ImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Good_ImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.Good_ImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Good_ImagePath);
				else
					this.Good_ImagePath = base.SetstringAsString(ColumnNames.Good_ImagePath, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Title_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title_ID, Parameters.Title_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_TraidName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Category_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Category_Id, Parameters.Category_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_MinimumCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_MinimumCount, Parameters.Good_MinimumCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount0
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount0, Parameters.FirstStore_Amount0);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount1, Parameters.FirstStore_Amount1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstStore_Amount2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstStore_Amount2, Parameters.FirstStore_Amount2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_FirstDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_FirstDate, Parameters.Good_FirstDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_CurrentCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_CurrentCount, Parameters.Good_CurrentCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_RequiredCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_RequiredCount, Parameters.Good_RequiredCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Good_ImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Good_ImagePath, Parameters.Good_ImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Title_ID
		    {
				get
		        {
					if(_Title_ID_W == null)
	        	    {
						_Title_ID_W = TearOff.Title_ID;
					}
					return _Title_ID_W;
				}
			}

			public WhereParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public WhereParameter Category_Id
		    {
				get
		        {
					if(_Category_Id_W == null)
	        	    {
						_Category_Id_W = TearOff.Category_Id;
					}
					return _Category_Id_W;
				}
			}

			public WhereParameter Good_MinimumCount
		    {
				get
		        {
					if(_Good_MinimumCount_W == null)
	        	    {
						_Good_MinimumCount_W = TearOff.Good_MinimumCount;
					}
					return _Good_MinimumCount_W;
				}
			}

			public WhereParameter FirstStore_Amount0
		    {
				get
		        {
					if(_FirstStore_Amount0_W == null)
	        	    {
						_FirstStore_Amount0_W = TearOff.FirstStore_Amount0;
					}
					return _FirstStore_Amount0_W;
				}
			}

			public WhereParameter FirstStore_Amount1
		    {
				get
		        {
					if(_FirstStore_Amount1_W == null)
	        	    {
						_FirstStore_Amount1_W = TearOff.FirstStore_Amount1;
					}
					return _FirstStore_Amount1_W;
				}
			}

			public WhereParameter FirstStore_Amount2
		    {
				get
		        {
					if(_FirstStore_Amount2_W == null)
	        	    {
						_FirstStore_Amount2_W = TearOff.FirstStore_Amount2;
					}
					return _FirstStore_Amount2_W;
				}
			}

			public WhereParameter Good_FirstDate
		    {
				get
		        {
					if(_Good_FirstDate_W == null)
	        	    {
						_Good_FirstDate_W = TearOff.Good_FirstDate;
					}
					return _Good_FirstDate_W;
				}
			}

			public WhereParameter Good_CurrentCount
		    {
				get
		        {
					if(_Good_CurrentCount_W == null)
	        	    {
						_Good_CurrentCount_W = TearOff.Good_CurrentCount;
					}
					return _Good_CurrentCount_W;
				}
			}

			public WhereParameter Good_RequiredCount
		    {
				get
		        {
					if(_Good_RequiredCount_W == null)
	        	    {
						_Good_RequiredCount_W = TearOff.Good_RequiredCount;
					}
					return _Good_RequiredCount_W;
				}
			}

			public WhereParameter Good_ImagePath
		    {
				get
		        {
					if(_Good_ImagePath_W == null)
	        	    {
						_Good_ImagePath_W = TearOff.Good_ImagePath;
					}
					return _Good_ImagePath_W;
				}
			}

			private WhereParameter _Title_ID_W = null;
			private WhereParameter _Good_TraidName_W = null;
			private WhereParameter _Category_Id_W = null;
			private WhereParameter _Good_MinimumCount_W = null;
			private WhereParameter _FirstStore_Amount0_W = null;
			private WhereParameter _FirstStore_Amount1_W = null;
			private WhereParameter _FirstStore_Amount2_W = null;
			private WhereParameter _Good_FirstDate_W = null;
			private WhereParameter _Good_CurrentCount_W = null;
			private WhereParameter _Good_RequiredCount_W = null;
			private WhereParameter _Good_ImagePath_W = null;

			public void WhereClauseReset()
			{
				_Title_ID_W = null;
				_Good_TraidName_W = null;
				_Category_Id_W = null;
				_Good_MinimumCount_W = null;
				_FirstStore_Amount0_W = null;
				_FirstStore_Amount1_W = null;
				_FirstStore_Amount2_W = null;
				_Good_FirstDate_W = null;
				_Good_CurrentCount_W = null;
				_Good_RequiredCount_W = null;
				_Good_ImagePath_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Title_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title_ID, Parameters.Title_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_TraidName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_TraidName, Parameters.Good_TraidName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Category_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Category_Id, Parameters.Category_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_MinimumCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_MinimumCount, Parameters.Good_MinimumCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount0
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount0, Parameters.FirstStore_Amount0);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount1, Parameters.FirstStore_Amount1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstStore_Amount2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstStore_Amount2, Parameters.FirstStore_Amount2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_FirstDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_FirstDate, Parameters.Good_FirstDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_CurrentCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_CurrentCount, Parameters.Good_CurrentCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_RequiredCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_RequiredCount, Parameters.Good_RequiredCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Good_ImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Good_ImagePath, Parameters.Good_ImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Title_ID
		    {
				get
		        {
					if(_Title_ID_W == null)
	        	    {
						_Title_ID_W = TearOff.Title_ID;
					}
					return _Title_ID_W;
				}
			}

			public AggregateParameter Good_TraidName
		    {
				get
		        {
					if(_Good_TraidName_W == null)
	        	    {
						_Good_TraidName_W = TearOff.Good_TraidName;
					}
					return _Good_TraidName_W;
				}
			}

			public AggregateParameter Category_Id
		    {
				get
		        {
					if(_Category_Id_W == null)
	        	    {
						_Category_Id_W = TearOff.Category_Id;
					}
					return _Category_Id_W;
				}
			}

			public AggregateParameter Good_MinimumCount
		    {
				get
		        {
					if(_Good_MinimumCount_W == null)
	        	    {
						_Good_MinimumCount_W = TearOff.Good_MinimumCount;
					}
					return _Good_MinimumCount_W;
				}
			}

			public AggregateParameter FirstStore_Amount0
		    {
				get
		        {
					if(_FirstStore_Amount0_W == null)
	        	    {
						_FirstStore_Amount0_W = TearOff.FirstStore_Amount0;
					}
					return _FirstStore_Amount0_W;
				}
			}

			public AggregateParameter FirstStore_Amount1
		    {
				get
		        {
					if(_FirstStore_Amount1_W == null)
	        	    {
						_FirstStore_Amount1_W = TearOff.FirstStore_Amount1;
					}
					return _FirstStore_Amount1_W;
				}
			}

			public AggregateParameter FirstStore_Amount2
		    {
				get
		        {
					if(_FirstStore_Amount2_W == null)
	        	    {
						_FirstStore_Amount2_W = TearOff.FirstStore_Amount2;
					}
					return _FirstStore_Amount2_W;
				}
			}

			public AggregateParameter Good_FirstDate
		    {
				get
		        {
					if(_Good_FirstDate_W == null)
	        	    {
						_Good_FirstDate_W = TearOff.Good_FirstDate;
					}
					return _Good_FirstDate_W;
				}
			}

			public AggregateParameter Good_CurrentCount
		    {
				get
		        {
					if(_Good_CurrentCount_W == null)
	        	    {
						_Good_CurrentCount_W = TearOff.Good_CurrentCount;
					}
					return _Good_CurrentCount_W;
				}
			}

			public AggregateParameter Good_RequiredCount
		    {
				get
		        {
					if(_Good_RequiredCount_W == null)
	        	    {
						_Good_RequiredCount_W = TearOff.Good_RequiredCount;
					}
					return _Good_RequiredCount_W;
				}
			}

			public AggregateParameter Good_ImagePath
		    {
				get
		        {
					if(_Good_ImagePath_W == null)
	        	    {
						_Good_ImagePath_W = TearOff.Good_ImagePath;
					}
					return _Good_ImagePath_W;
				}
			}

			private AggregateParameter _Title_ID_W = null;
			private AggregateParameter _Good_TraidName_W = null;
			private AggregateParameter _Category_Id_W = null;
			private AggregateParameter _Good_MinimumCount_W = null;
			private AggregateParameter _FirstStore_Amount0_W = null;
			private AggregateParameter _FirstStore_Amount1_W = null;
			private AggregateParameter _FirstStore_Amount2_W = null;
			private AggregateParameter _Good_FirstDate_W = null;
			private AggregateParameter _Good_CurrentCount_W = null;
			private AggregateParameter _Good_RequiredCount_W = null;
			private AggregateParameter _Good_ImagePath_W = null;

			public void AggregateClauseReset()
			{
				_Title_ID_W = null;
				_Good_TraidName_W = null;
				_Category_Id_W = null;
				_Good_MinimumCount_W = null;
				_FirstStore_Amount0_W = null;
				_FirstStore_Amount1_W = null;
				_FirstStore_Amount2_W = null;
				_Good_FirstDate_W = null;
				_Good_CurrentCount_W = null;
				_Good_RequiredCount_W = null;
				_Good_ImagePath_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsTitlesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Title_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
			p = cmd.Parameters[Parameters.Good_RequiredCount.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsTitlesUpdate]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Good_RequiredCount.ParameterName];
			p.Direction = ParameterDirection.Output;
      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsTitlesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Title_ID);
			p.SourceColumn = ColumnNames.Title_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Title_ID);
			p.SourceColumn = ColumnNames.Title_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_TraidName);
			p.SourceColumn = ColumnNames.Good_TraidName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Category_Id);
			p.SourceColumn = ColumnNames.Category_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_MinimumCount);
			p.SourceColumn = ColumnNames.Good_MinimumCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstStore_Amount0);
			p.SourceColumn = ColumnNames.FirstStore_Amount0;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstStore_Amount1);
			p.SourceColumn = ColumnNames.FirstStore_Amount1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstStore_Amount2);
			p.SourceColumn = ColumnNames.FirstStore_Amount2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_FirstDate);
			p.SourceColumn = ColumnNames.Good_FirstDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_CurrentCount);
			p.SourceColumn = ColumnNames.Good_CurrentCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_RequiredCount);
			p.SourceColumn = ColumnNames.Good_RequiredCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Good_ImagePath);
			p.SourceColumn = ColumnNames.Good_ImagePath;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
