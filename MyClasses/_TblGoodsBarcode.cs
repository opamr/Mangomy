
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyPro
{
	public abstract class _TblGoodsBarcode : SqlClientEntity
	{
		public _TblGoodsBarcode()
		{
			this.QuerySource = "TblGoodsBarcode";
			this.MappingName = "TblGoodsBarcode";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblGoodsBarcodeLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Barcode_ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Barcode_ID, Barcode_ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TblGoodsBarcodeLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Barcode_ID
			{
				get
				{
					return new SqlParameter("@Barcode_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Titel_Id
			{
				get
				{
					return new SqlParameter("@Titel_Id", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Barcode_Unit
			{
				get
				{
					return new SqlParameter("@Barcode_Unit", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_PayPrice
			{
				get
				{
					return new SqlParameter("@Barcode_PayPrice", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_BuyPrice
			{
				get
				{
					return new SqlParameter("@Barcode_BuyPrice", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Count
			{
				get
				{
					return new SqlParameter("@Barcode_Count", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_Code
			{
				get
				{
					return new SqlParameter("@Barcode_Code", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Barcode_PaySpecial
			{
				get
				{
					return new SqlParameter("@Barcode_PaySpecial", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Titel_Id = "Titel_Id";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_BuyPrice = "Barcode_BuyPrice";
            public const string Barcode_Count = "Barcode_Count";
            public const string Barcode_Code = "Barcode_Code";
            public const string Barcode_PaySpecial = "Barcode_PaySpecial";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = _TblGoodsBarcode.PropertyNames.Barcode_ID;
					ht[Titel_Id] = _TblGoodsBarcode.PropertyNames.Titel_Id;
					ht[Barcode_Unit] = _TblGoodsBarcode.PropertyNames.Barcode_Unit;
					ht[Barcode_PayPrice] = _TblGoodsBarcode.PropertyNames.Barcode_PayPrice;
					ht[Barcode_BuyPrice] = _TblGoodsBarcode.PropertyNames.Barcode_BuyPrice;
					ht[Barcode_Count] = _TblGoodsBarcode.PropertyNames.Barcode_Count;
					ht[Barcode_Code] = _TblGoodsBarcode.PropertyNames.Barcode_Code;
					ht[Barcode_PaySpecial] = _TblGoodsBarcode.PropertyNames.Barcode_PaySpecial;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Barcode_ID = "Barcode_ID";
            public const string Titel_Id = "Titel_Id";
            public const string Barcode_Unit = "Barcode_Unit";
            public const string Barcode_PayPrice = "Barcode_PayPrice";
            public const string Barcode_BuyPrice = "Barcode_BuyPrice";
            public const string Barcode_Count = "Barcode_Count";
            public const string Barcode_Code = "Barcode_Code";
            public const string Barcode_PaySpecial = "Barcode_PaySpecial";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Barcode_ID] = _TblGoodsBarcode.ColumnNames.Barcode_ID;
					ht[Titel_Id] = _TblGoodsBarcode.ColumnNames.Titel_Id;
					ht[Barcode_Unit] = _TblGoodsBarcode.ColumnNames.Barcode_Unit;
					ht[Barcode_PayPrice] = _TblGoodsBarcode.ColumnNames.Barcode_PayPrice;
					ht[Barcode_BuyPrice] = _TblGoodsBarcode.ColumnNames.Barcode_BuyPrice;
					ht[Barcode_Count] = _TblGoodsBarcode.ColumnNames.Barcode_Count;
					ht[Barcode_Code] = _TblGoodsBarcode.ColumnNames.Barcode_Code;
					ht[Barcode_PaySpecial] = _TblGoodsBarcode.ColumnNames.Barcode_PaySpecial;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Barcode_ID = "s_Barcode_ID";
            public const string Titel_Id = "s_Titel_Id";
            public const string Barcode_Unit = "s_Barcode_Unit";
            public const string Barcode_PayPrice = "s_Barcode_PayPrice";
            public const string Barcode_BuyPrice = "s_Barcode_BuyPrice";
            public const string Barcode_Count = "s_Barcode_Count";
            public const string Barcode_Code = "s_Barcode_Code";
            public const string Barcode_PaySpecial = "s_Barcode_PaySpecial";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Barcode_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Barcode_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual int Titel_Id
	    {
			get
	        {
				return base.Getint(ColumnNames.Titel_Id);
			}
			set
	        {
				base.Setint(ColumnNames.Titel_Id, value);
			}
		}

		public virtual string Barcode_Unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string Barcode_PayPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string Barcode_BuyPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_BuyPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_BuyPrice, value);
			}
		}

		public virtual string Barcode_Count
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Count);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual string Barcode_Code
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_Code);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string Barcode_PaySpecial
	    {
			get
	        {
				return base.Getstring(ColumnNames.Barcode_PaySpecial);
			}
			set
	        {
				base.Setstring(ColumnNames.Barcode_PaySpecial, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Barcode_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_ID) ? string.Empty : base.GetintAsString(ColumnNames.Barcode_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_ID);
				else
					this.Barcode_ID = base.SetintAsString(ColumnNames.Barcode_ID, value);
			}
		}

		public virtual string s_Titel_Id
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Titel_Id) ? string.Empty : base.GetintAsString(ColumnNames.Titel_Id);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Titel_Id);
				else
					this.Titel_Id = base.SetintAsString(ColumnNames.Titel_Id, value);
			}
		}

		public virtual string s_Barcode_Unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Unit) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Unit);
				else
					this.Barcode_Unit = base.SetstringAsString(ColumnNames.Barcode_Unit, value);
			}
		}

		public virtual string s_Barcode_PayPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_PayPrice) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_PayPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_PayPrice);
				else
					this.Barcode_PayPrice = base.SetstringAsString(ColumnNames.Barcode_PayPrice, value);
			}
		}

		public virtual string s_Barcode_BuyPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_BuyPrice) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_BuyPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_BuyPrice);
				else
					this.Barcode_BuyPrice = base.SetstringAsString(ColumnNames.Barcode_BuyPrice, value);
			}
		}

		public virtual string s_Barcode_Count
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Count) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Count);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Count);
				else
					this.Barcode_Count = base.SetstringAsString(ColumnNames.Barcode_Count, value);
			}
		}

		public virtual string s_Barcode_Code
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_Code) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_Code);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_Code);
				else
					this.Barcode_Code = base.SetstringAsString(ColumnNames.Barcode_Code, value);
			}
		}

		public virtual string s_Barcode_PaySpecial
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Barcode_PaySpecial) ? string.Empty : base.GetstringAsString(ColumnNames.Barcode_PaySpecial);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Barcode_PaySpecial);
				else
					this.Barcode_PaySpecial = base.SetstringAsString(ColumnNames.Barcode_PaySpecial, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Barcode_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Titel_Id
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_PayPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_BuyPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_BuyPrice, Parameters.Barcode_BuyPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Count
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_Code
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Barcode_PaySpecial
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Barcode_PaySpecial, Parameters.Barcode_PaySpecial);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public WhereParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			public WhereParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public WhereParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public WhereParameter Barcode_BuyPrice
		    {
				get
		        {
					if(_Barcode_BuyPrice_W == null)
	        	    {
						_Barcode_BuyPrice_W = TearOff.Barcode_BuyPrice;
					}
					return _Barcode_BuyPrice_W;
				}
			}

			public WhereParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public WhereParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public WhereParameter Barcode_PaySpecial
		    {
				get
		        {
					if(_Barcode_PaySpecial_W == null)
	        	    {
						_Barcode_PaySpecial_W = TearOff.Barcode_PaySpecial;
					}
					return _Barcode_PaySpecial_W;
				}
			}

			private WhereParameter _Barcode_ID_W = null;
			private WhereParameter _Titel_Id_W = null;
			private WhereParameter _Barcode_Unit_W = null;
			private WhereParameter _Barcode_PayPrice_W = null;
			private WhereParameter _Barcode_BuyPrice_W = null;
			private WhereParameter _Barcode_Count_W = null;
			private WhereParameter _Barcode_Code_W = null;
			private WhereParameter _Barcode_PaySpecial_W = null;

			public void WhereClauseReset()
			{
				_Barcode_ID_W = null;
				_Titel_Id_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_BuyPrice_W = null;
				_Barcode_Count_W = null;
				_Barcode_Code_W = null;
				_Barcode_PaySpecial_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Barcode_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_ID, Parameters.Barcode_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Titel_Id
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Titel_Id, Parameters.Titel_Id);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Unit, Parameters.Barcode_Unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_PayPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_PayPrice, Parameters.Barcode_PayPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_BuyPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_BuyPrice, Parameters.Barcode_BuyPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Count
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Count, Parameters.Barcode_Count);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_Code
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_Code, Parameters.Barcode_Code);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Barcode_PaySpecial
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Barcode_PaySpecial, Parameters.Barcode_PaySpecial);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Barcode_ID
		    {
				get
		        {
					if(_Barcode_ID_W == null)
	        	    {
						_Barcode_ID_W = TearOff.Barcode_ID;
					}
					return _Barcode_ID_W;
				}
			}

			public AggregateParameter Titel_Id
		    {
				get
		        {
					if(_Titel_Id_W == null)
	        	    {
						_Titel_Id_W = TearOff.Titel_Id;
					}
					return _Titel_Id_W;
				}
			}

			public AggregateParameter Barcode_Unit
		    {
				get
		        {
					if(_Barcode_Unit_W == null)
	        	    {
						_Barcode_Unit_W = TearOff.Barcode_Unit;
					}
					return _Barcode_Unit_W;
				}
			}

			public AggregateParameter Barcode_PayPrice
		    {
				get
		        {
					if(_Barcode_PayPrice_W == null)
	        	    {
						_Barcode_PayPrice_W = TearOff.Barcode_PayPrice;
					}
					return _Barcode_PayPrice_W;
				}
			}

			public AggregateParameter Barcode_BuyPrice
		    {
				get
		        {
					if(_Barcode_BuyPrice_W == null)
	        	    {
						_Barcode_BuyPrice_W = TearOff.Barcode_BuyPrice;
					}
					return _Barcode_BuyPrice_W;
				}
			}

			public AggregateParameter Barcode_Count
		    {
				get
		        {
					if(_Barcode_Count_W == null)
	        	    {
						_Barcode_Count_W = TearOff.Barcode_Count;
					}
					return _Barcode_Count_W;
				}
			}

			public AggregateParameter Barcode_Code
		    {
				get
		        {
					if(_Barcode_Code_W == null)
	        	    {
						_Barcode_Code_W = TearOff.Barcode_Code;
					}
					return _Barcode_Code_W;
				}
			}

			public AggregateParameter Barcode_PaySpecial
		    {
				get
		        {
					if(_Barcode_PaySpecial_W == null)
	        	    {
						_Barcode_PaySpecial_W = TearOff.Barcode_PaySpecial;
					}
					return _Barcode_PaySpecial_W;
				}
			}

			private AggregateParameter _Barcode_ID_W = null;
			private AggregateParameter _Titel_Id_W = null;
			private AggregateParameter _Barcode_Unit_W = null;
			private AggregateParameter _Barcode_PayPrice_W = null;
			private AggregateParameter _Barcode_BuyPrice_W = null;
			private AggregateParameter _Barcode_Count_W = null;
			private AggregateParameter _Barcode_Code_W = null;
			private AggregateParameter _Barcode_PaySpecial_W = null;

			public void AggregateClauseReset()
			{
				_Barcode_ID_W = null;
				_Titel_Id_W = null;
				_Barcode_Unit_W = null;
				_Barcode_PayPrice_W = null;
				_Barcode_BuyPrice_W = null;
				_Barcode_Count_W = null;
				_Barcode_Code_W = null;
				_Barcode_PaySpecial_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsBarcodeInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Barcode_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsBarcodeUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TblGoodsBarcodeDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Barcode_ID);
			p.SourceColumn = ColumnNames.Barcode_ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Barcode_ID);
			p.SourceColumn = ColumnNames.Barcode_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Titel_Id);
			p.SourceColumn = ColumnNames.Titel_Id;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_Unit);
			p.SourceColumn = ColumnNames.Barcode_Unit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_PayPrice);
			p.SourceColumn = ColumnNames.Barcode_PayPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_BuyPrice);
			p.SourceColumn = ColumnNames.Barcode_BuyPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_Count);
			p.SourceColumn = ColumnNames.Barcode_Count;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_Code);
			p.SourceColumn = ColumnNames.Barcode_Code;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Barcode_PaySpecial);
			p.SourceColumn = ColumnNames.Barcode_PaySpecial;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
